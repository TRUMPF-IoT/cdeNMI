var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cde;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cde) {
    //////////////////////////////////////////////////////////////////////////////
    /// Interfaces
    //////////////////////////////////////////////////////////////////////////////
    function IsIE() {
        if (!navigator)
            return false; //NodeJS should return false here
        var ua = navigator.userAgent;
        /* MSIE used to detect old browsers and Trident used to newer ones*/
        return ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1;
    }
    cde.IsIE = IsIE;
    function cdeEval(pCode) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        if (pCode.substr(0, 1) === "[") {
            return JSON.parse(pCode.replace(/'/g, "\""));
        }
        if (pCode.substr(0, 2) === "([" || pCode.substr(0, 2) === "({") {
            var tJ = pCode.substr(1, pCode.length - 2);
            return JSON.parse(tJ.replace(/'/g, "\""));
        }
        return Function('"use strict";return (' + pCode + ')').apply(void 0, param);
    }
    cde.cdeEval = cdeEval;
    /**
 C-DEngine Base Class for all Databound classes
*/
    var TheDataBase = /** @class */ (function () {
        function TheDataBase() {
            this.MyEvents = [];
        }
        TheDataBase.prototype.HasEvent = function (pName) {
            if (this.MyEvents && this.MyEvents[pName])
                return true;
            return false;
        };
        TheDataBase.prototype.RegisterEvent = function (pName, pCallBackSink) {
            if (!this.MyEvents[pName])
                this.MyEvents[pName] = [];
            if (this.MyEvents[pName].indexOf(pCallBackSink) < 0)
                this.MyEvents[pName].push(pCallBackSink);
        };
        TheDataBase.prototype.UnregisterEvent = function (pName, pCallback) {
            if (this.MyEvents[pName]) {
                if (!pCallback)
                    this.MyEvents[pName] = [];
                else {
                    for (var i = this.MyEvents[pName].length - 1; i >= 0; i--) { // STEP 1
                        if (this.MyEvents[pName][i] === pCallback) { // STEP 2
                            this.MyEvents[pName].splice(i, 1); // STEP 3
                            break;
                        }
                    }
                }
            }
        };
        TheDataBase.prototype.FireEvent = function (FireAsync, pEvtName) {
            var _a;
            var params = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                params[_i - 2] = arguments[_i];
            }
            if (this.MyEvents[pEvtName]) {
                for (var mh = 0; mh < this.MyEvents[pEvtName].length; mh++) {
                    if (this.MyEvents[pEvtName][mh]) {
                        try {
                            switch (pEvtName) {
                                default:
                                    if (typeof this.MyEvents[pEvtName][mh] === "string") {
                                        //const TargetControl = this;
                                        var EventName = pEvtName;
                                        //const Evt = params[0];
                                        var Parameter = params.length > 1 ? params[1] : null;
                                        var PropertyName = params.length > 2 ? params[2] : null;
                                        if (params.length < 3) {
                                            debugger;
                                        }
                                        //if (FireAsync) {
                                        //    cde.cdeRunAsync((pEvtName, params) => {
                                        //        cdeEval(this.MyEvents[pEvtName][mh]);
                                        //    }, 0, params, mh);
                                        //}
                                        //else
                                        var tJS = this.MyEvents[EventName][mh];
                                        if (tJS.substr(0, 3) === "JS:")
                                            cdeEval(tJS.substr(3));
                                        else {
                                            cde.MyBaseAssets.FireEvent(FireAsync, "OnStringEvent", tJS, this, Parameter, PropertyName, params);
                                        }
                                    }
                                    else {
                                        /*if (FireAsync) {
                                            cde.cdeRunAsync((pEvtName, params, mh) => {
                                                this.MyEvents[pEvtName][mh](this, ...params);
                                            }, 0, params, mh);
                                        }
                                        else*/
                                        if (params.length > 0 && params[0] instanceof cde.TheProcessMessage)
                                            this.MyEvents[pEvtName][mh](this, params[0]);
                                        else
                                            (_a = this.MyEvents[pEvtName])[mh].apply(_a, __spreadArrays([this], params));
                                    }
                                    break;
                            }
                        }
                        catch (error) {
                            if (pEvtName !== "CDE_NEW_LOGENTRY")
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeCore:FireEvent", "FireEvent:" + error + "<br>" + error.stack);
                        }
                    }
                }
            }
        };
        return TheDataBase;
    }());
    cde.TheDataBase = TheDataBase;
    /**
 Extension to the C-DEngine Base Class for all Databound classes including Meta Data (i.e. for Table and Form descriptions)
*/
    var TheEngineState = /** @class */ (function (_super) {
        __extends(TheEngineState, _super);
        function TheEngineState() {
            var _this = _super.call(this) || this;
            _this.IsInitialized = false;
            _this.IsEngineScoped = false;
            _this.IsEngineReady = false;
            return _this;
        }
        return TheEngineState;
    }(TheDataBase));
    cde.TheEngineState = TheEngineState;
    var TheMetaDataBase = /** @class */ (function (_super) {
        __extends(TheMetaDataBase, _super);
        function TheMetaDataBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheMetaDataBase;
    }(TheDataBase));
    cde.TheMetaDataBase = TheMetaDataBase;
    var TSM = /** @class */ (function () {
        function TSM(pEng) {
            this.ENG = pEng;
            this.TIM = new Date();
            this.FID = cde.MyBaseAssets.MyServiceHostInfo.MsgSendCounter++;
            this.PLB = null;
            this.QDX = 5; //Sync with Full CDE
            this.LVL = 4; //Sync with Full CDE
        }
        TSM.GetOriginator = function (pTSM) {
            if (!pTSM.ORG)
                return "";
            var t = pTSM.ORG.split(';');
            return t[0];
        };
        return TSM;
    }());
    cde.TSM = TSM;
    var TheDeviceMessage = /** @class */ (function () {
        function TheDeviceMessage() {
        }
        return TheDeviceMessage;
    }());
    cde.TheDeviceMessage = TheDeviceMessage;
    var TheMeshPicker = /** @class */ (function (_super) {
        __extends(TheMeshPicker, _super);
        function TheMeshPicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheMeshPicker;
    }(cde.TheDataBase));
    cde.TheMeshPicker = TheMeshPicker;
    var TheISBConnect = /** @class */ (function () {
        function TheISBConnect() {
        }
        return TheISBConnect;
    }());
    cde.TheISBConnect = TheISBConnect;
    var cdeP = /** @class */ (function (_super) {
        __extends(cdeP, _super);
        function cdeP() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return cdeP;
    }(TheMetaDataBase));
    cde.cdeP = cdeP;
    var TheThing = /** @class */ (function (_super) {
        __extends(TheThing, _super);
        function TheThing() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheThing;
    }(TheMetaDataBase));
    cde.TheThing = TheThing;
    var TheSegment = /** @class */ (function () {
        function TheSegment() {
        }
        return TheSegment;
    }());
    cde.TheSegment = TheSegment;
    var TheProcessMessage = /** @class */ (function () {
        function TheProcessMessage(pTopic, pTSM) {
            this.Topic = pTopic;
            this.Message = pTSM;
        }
        return TheProcessMessage;
    }());
    cde.TheProcessMessage = TheProcessMessage;
    var TheNV = /** @class */ (function () {
        function TheNV() {
        }
        return TheNV;
    }());
    cde.TheNV = TheNV;
    var TheTimeouts = /** @class */ (function () {
        function TheTimeouts() {
            this.HeartBeat = 30;
            this.PickupRate = 250;
            this.InitRate = 100;
            this.HeartBeatMissed = 4;
            this.PickupRateDelay = 1;
            this.WsTimeOut = 5000;
        }
        TheTimeouts.prototype.EnterAdrenalin = function () {
            this.HeartBeat = 5;
            this.HeartBeatMissed = 30;
        };
        TheTimeouts.prototype.NormalHeartRate = function () {
            this.HeartBeat = 30;
            this.HeartBeatMissed = 4;
        };
        TheTimeouts.prototype.EnterSleepMode = function () {
            this.HeartBeat = 100;
            this.HeartBeatMissed = 3;
        };
        return TheTimeouts;
    }());
    cde.TheTimeouts = TheTimeouts;
    var TheCommConfig = /** @class */ (function () {
        function TheCommConfig(ptimout) {
            this.NoISB = false;
            this.RequestPath = null;
            this.DisableRSA = false;
            this.KeepSessionAlive = false;
            this.port = 80;
            this.host = null; ///"127.0.0.1";
            this.Creds = null;
            this.useTLS = false;
            this.cdeTIM = new Date();
            this.IsWSHBDisabled = false;
            this.TO = new TheTimeouts();
            if (ptimout > 0)
                this.TO.WsTimeOut = ptimout;
        }
        return TheCommConfig;
    }());
    cde.TheCommConfig = TheCommConfig;
    var TheCDECredentials = /** @class */ (function () {
        function TheCDECredentials() {
            this.QUID = "";
            this.QPWD = "";
            this.QToken = null;
        }
        return TheCDECredentials;
    }());
    cde.TheCDECredentials = TheCDECredentials;
    var TheCoreQueueContent = /** @class */ (function () {
        function TheCoreQueueContent(pEng, pTopic, pMsg) {
            this.ENG = pEng;
            this.JMSG = JSON.stringify(pMsg);
            this.TOPIC = pTopic;
        }
        return TheCoreQueueContent;
    }());
    cde.TheCoreQueueContent = TheCoreQueueContent;
    var TheServiceHostInfo = /** @class */ (function () {
        function TheServiceHostInfo() {
            //Embedded Objects
            this.IsEmbedded = false; //Should be set to true if the NMI is hosted in another Site
            this.ResourcePath = ''; //Additional path if NMI resources are merged with other sites resources (i.e. /NMI/ loads all resources under <hostingurl>/NMI/*)
            this.WsTimeOut = 0;
            this.DisableRSA = false;
            this.UToken = "";
            //Target Service Depending Settings
            this.RequestGeoLocation = false;
            this.EnablePinLogin = false;
            this.DoAllowAnonymous = false;
            this.LoginDisallowed = false;
            this.DisableWebWorker = false;
            this.IsUsingUserMapper = false;
            this.AllowSetScopeWithSetAdmin = false;
            this.WebPlatform = 0;
            this.RedPill = false;
            this.LastSID = ""; //4.209: No longer Used!!
            this.KnownRelays = "";
            this.AutoConnectRelay = null;
            this.NMIVersion = 4.0;
            this.WasPortalRequested = false;
            this.PortalPage = "";
            this.ShowClassic = false;
            this.ScreenManagerClass = null;
            this.ShowLogInConsole = false;
            this.ApplicationTitle = "";
            this.MainConfigScreen = "";
            this.TileSize = 78;
            this.TileScale = 1.0;
            this.InputSize = 60;
            this.ScreenClassName = "cdeBrowserTop";
            this.WasInitialScreenVisible = false;
            ///Used by Convenience Apps
            this.IsLiteTheme = false;
            this.DoesRequireConfiguration = false;
            this.MyStationID = "";
            this.HasInternetAccess = false;
            this.IsAppHosted = false;
            this.IsWebHosted = false;
            this.MsgSendCounter = 0;
            this.DebugLevel = 0;
            this.MyWSServiceUrl = null; //WebSockets URL of the FirstNode - can be emtpy if websockets are disabled
            this.PortalReset = null;
            this.mPortalScreen = null;
            this.mStartScreen = null;
            this.mCurrentLCID = null;
            this.mHideHeader = null;
            this.mAdminPWMustBeSet = null;
            this.mAdminRole = null;
            //FirstNodeID: string = '';
            this.mFirstNodeID = null;
        }
        Object.defineProperty(TheServiceHostInfo.prototype, "PortalScreen", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.MyBaseAssets.MyCommStatus.UserPref.PortalScreen)
                    return cde.MyBaseAssets.MyCommStatus.UserPref.PortalScreen;
                return this.mPortalScreen;
            },
            set: function (value) { this.mPortalScreen = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "StartScreen", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.MyBaseAssets.MyCommStatus.UserPref.StartScreen)
                    return cde.MyBaseAssets.MyCommStatus.UserPref.StartScreen;
                return this.mStartScreen;
            },
            set: function (value) { this.mStartScreen = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "CurrentLCID", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.CInt(cde.MyBaseAssets.MyCommStatus.UserPref.LCID) > 0)
                    return cde.MyBaseAssets.MyCommStatus.UserPref.LCID;
                return this.mCurrentLCID;
            },
            set: function (value) { this.mCurrentLCID = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "HideHeader", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.CBool(cde.MyBaseAssets.MyCommStatus.UserPref.HideHeader) === true)
                    return cde.CBool(cde.MyBaseAssets.MyCommStatus.UserPref.HideHeader);
                return this.mHideHeader;
            },
            set: function (value) { this.mHideHeader = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "AdminPWMustBeSet", {
            get: function () {
                if (cde.CBool(cde.MyBaseAssets.MyCommStatus.AdminPWMustBeSet))
                    return true;
                return this.mAdminPWMustBeSet;
            },
            set: function (value) { this.mAdminPWMustBeSet = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "AdminRole", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.AdminRole)
                    return cde.MyBaseAssets.MyCommStatus.AdminRole;
                return this.mAdminRole;
            },
            set: function (value) { this.mAdminRole = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "FirstNodeID", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.FirstNodeID)
                    return cde.MyBaseAssets.MyCommStatus.FirstNodeID;
                return this.mFirstNodeID;
            },
            set: function (value) { this.mFirstNodeID = value; },
            enumerable: false,
            configurable: true
        });
        ;
        Object.defineProperty(TheServiceHostInfo.prototype, "IsUserLoggedIn", {
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus)
                    return cde.MyBaseAssets.MyCommStatus.IsUserLoggedIn;
                else
                    return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TheServiceHostInfo.prototype, "CurrentUserName", {
            //Moved to MyCommStatus! - can lead to back-incompat if used by a 3rd party extension - all set to read only
            //UserPref: cde.TheUserPreferences;
            //MyServiceUrl: string = '';
            //RequestPath: string = '';
            get: function () {
                if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.MyBaseAssets.MyCommStatus.UserPref.CurrentUserName)
                    return cde.MyBaseAssets.MyCommStatus.UserPref.CurrentUserName;
                return "";
            },
            enumerable: false,
            configurable: true
        });
        return TheServiceHostInfo;
    }());
    cde.TheServiceHostInfo = TheServiceHostInfo;
    var TheWHSI = /** @class */ (function () {
        function TheWHSI() {
            this.CurrentRSA = null; //CurrentRSA Key used for RSA Encryption
            this.IsConnected = false; //True if the Communication was established
            this.CallerCount = 0; //Amount of SharedWorker ports
            this.InitialNPA = null;
            this.HasAutoLogin = false; //True if the credentials have been set before the Login Dialog appeard (AutoLogin)
            this.FirstNodeID = null; //NodeID of FirstNode after connect
            this.AdminPWMustBeSet = false; //True if FirstNode requires AdminPWToBe Set (browser is unscoped and cannot send any telegrams except "SET_ADMIN_PWD")
            this.AdminRole = null; //Role of the Current User (Not used, yet)
            this.LastPortalScreen = null; //If a user hit F5 this will contain the last portal screen used
            this.LastStartScreen = null; //If a user hit F5 this will contain the last start screen used
            this.MyServiceUrl = null; //Http URL of the FirstNode - can be used for DeepLinks
            this.UserPref = null; //User Preferences (see below) coming in with the CDE_LOGIN_EVENT
        }
        Object.defineProperty(TheWHSI.prototype, "IsUserLoggedIn", {
            get: function () {
                if (this.UserPref)
                    return true;
                else
                    return false;
            },
            enumerable: false,
            configurable: true
        });
        return TheWHSI;
    }());
    cde.TheWHSI = TheWHSI;
    var TheBaseAssets = /** @class */ (function (_super) {
        __extends(TheBaseAssets, _super);
        function TheBaseAssets() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.MyServiceHostInfo = new TheServiceHostInfo();
            _this.MyCommStatus = new TheWHSI(); //CommChannel Relevant Status
            _this.MyEngines = new Array();
            return _this;
        }
        ///Used by Convenience Apps
        TheBaseAssets.IsConnectionDown = function () {
            return (!cde.MyCommChannel || !cde.MyCommChannel.IsConnected).toString();
        };
        Object.defineProperty(TheBaseAssets.prototype, "HasAutoLogin", {
            get: function () { return (cde.MyCommChannel && cde.MyCommChannel.HasAutoLogin === true); },
            enumerable: false,
            configurable: true
        });
        return TheBaseAssets;
    }(TheDataBase));
    cde.TheBaseAssets = TheBaseAssets;
    var TheUserPreferences = /** @class */ (function (_super) {
        __extends(TheUserPreferences, _super);
        function TheUserPreferences() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.CurrentUserName = null;
            _this.PortalScreen = null; //PortalScreen of the NMI (Must be a dashboard)
            _this.StartScreen = null; //StartScreen of the NMI (a screen within the PortalScreen Dashboard)
            _this.HideHeader = false; //True if the FirstNode wants to see no Header in the browser
            return _this;
        }
        return TheUserPreferences;
    }(cde.TheDataBase));
    cde.TheUserPreferences = TheUserPreferences;
    //From CommonUtils to reduce references
    function FixupPath(pInPath) {
        if (!pInPath || pInPath.length === 1)
            return "";
        var tPa = "";
        if (cde.MyBaseAssets.MyServiceHostInfo.ResourcePath) {
            tPa = cde.MyBaseAssets.MyServiceHostInfo.ResourcePath;
            if (pInPath.substr(0, 1) !== "/")
                tPa += "/";
        }
        if (cde.MyBaseAssets.MyCommStatus.MyServiceUrl && document.location.origin !== cde.MyBaseAssets.MyCommStatus.MyServiceUrl) {
            if (tPa.length > 0)
                tPa = cde.MyBaseAssets.MyCommStatus.MyServiceUrl + "/" + tPa;
            else
                tPa = cde.MyBaseAssets.MyCommStatus.MyServiceUrl;
        }
        if ((tPa.length > 0 && tPa.substr(tPa.length - 1, 1) !== "/") && !pInPath.startsWith("/") && !pInPath.toLowerCase().startsWith("http"))
            tPa += "/";
        return tPa + pInPath;
    }
    cde.FixupPath = FixupPath;
    function DateToString(inDate) {
        var month = inDate.getMonth() + 1;
        var day = inDate.getDate();
        var year = inDate.getFullYear();
        var hours = inDate.getHours();
        var minutes = inDate.getMinutes();
        var ampm = "AM";
        if (hours > 11) {
            ampm = "PM";
        }
        return month + "/" + day + "/" + year + " " + hours + ":" + minutes + " " + ampm;
    }
    cde.DateToString = DateToString;
    function IsNotSet(pInVal) {
        return pInVal === undefined || pInVal === null || pInVal === "";
    }
    cde.IsNotSet = IsNotSet;
    function CStr(pInVal) {
        if (!pInVal)
            return "";
        else
            return pInVal.toString();
    }
    cde.CStr = CStr;
    function CInt(pInVal) {
        if (isNaN(pInVal) || !pInVal)
            return 0;
        var retVal = 0;
        try {
            retVal = parseInt(pInVal);
        }
        catch (ex) {
            //ignored
        }
        if (isNaN(retVal))
            return 0;
        return retVal;
    }
    cde.CInt = CInt;
    function CBool(inStr) {
        if (this.IsNotSet(inStr))
            return false;
        if (typeof (inStr) === "boolean")
            return inStr;
        switch (inStr.toString().toLowerCase()) {
            case "true":
            case "yes":
            case "1":
            case "on": return true;
            default: return false;
        }
    }
    cde.CBool = CBool;
    function CDbl(pInVal) {
        if (isNaN(pInVal) || !pInVal)
            return 0;
        var retVal = 0;
        try {
            retVal = parseFloat(pInVal);
        }
        catch (ex) {
            //ignored
        }
        if (isNaN(retVal))
            return 0;
        return retVal;
    }
    cde.CDbl = CDbl;
    function GetSubstringIndex(pInStr, pSubStr, pOccurance) {
        var times = 0;
        var index = 0;
        while (times < pOccurance && index !== -1) {
            index = pInStr.indexOf(pSubStr, index + pSubStr.length);
            times++;
        }
        return index;
    }
    cde.GetSubstringIndex = GetSubstringIndex;
    function GuidToString(InGuid) {
        if (!InGuid)
            return "";
        var OutGuid = InGuid.replace('{', '').replace('}', '');
        while (OutGuid.indexOf('-') > 0)
            OutGuid = OutGuid.replace('-', '');
        return OutGuid.toUpperCase();
    }
    cde.GuidToString = GuidToString;
    function DeleteAllCookies() {
        var cookies = document.cookie.split("; ");
        for (var c = 0; c < cookies.length; c++) {
            var d = window.location.hostname.split(".");
            while (d.length > 0) {
                var cookieBase = encodeURIComponent(cookies[c].split(";")[0].split("=")[0]) + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=' + d.join('.') + ' ;path=';
                var p = location.pathname.split('/');
                document.cookie = cookieBase + '/';
                while (p.length > 0) {
                    document.cookie = cookieBase + p.join('/');
                    p.pop();
                }
                ;
                d.shift();
            }
        }
    }
    cde.DeleteAllCookies = DeleteAllCookies;
    cde.MyBaseAssets = new cde.TheBaseAssets();
    cde.MyContentEngine = null;
    cde.MyCommChannel = null;
    cde.MyEventLogger = new TheMetaDataBase();
})(cde || (cde = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cde;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cde) {
    cde.eTheContentService = "ContentService";
    cde.IsHostRunning = false;
    //Engine Specific Settings
    var TheBaseEngine = /** @class */ (function (_super) {
        __extends(TheBaseEngine, _super);
        function TheBaseEngine() {
            var _this = _super.call(this) || this;
            _this.eventOverideHeartBeat = null;
            _this.EngineState = new cde.TheEngineState();
            return _this;
        }
        TheBaseEngine.prototype.GetEngineName = function () {
            return this.EngineState.ClassName;
        };
        TheBaseEngine.prototype.SendInitialize = function () {
            if (!cde.MyCommChannel)
                return;
            var tTSM = new cde.TSM(this.EngineState.ClassName);
            tTSM.TXT = "CDE_INITIALIZE";
            tTSM.PLS = this.EngineState.ClassName;
            tTSM.LVL = 3;
            cde.MyCommChannel.SendToFirstNode(tTSM);
        };
        TheBaseEngine.prototype.SendSubscribe = function () {
            if (!cde.MyCommChannel)
                return;
            cde.MyCommChannel.Subscribe(this.EngineState.ClassName);
        };
        //Backwards compat:
        TheBaseEngine.prototype.RegisterIncomingMessage = function (pCallback) {
            if (cde.MyCommChannel) {
                cde.MyCommChannel.RegisterEvent("CDE_INCOMING_MSG", function (s, p) { pCallback(p); });
            }
        };
        // Called when a service was found and telegrams are returned
        TheBaseEngine.prototype.FireEngineIsReady = function (pIsReady) {
            this.EngineState.IsEngineReady = pIsReady;
            this.FireEvent(true, "EngineReady", pIsReady);
        };
        TheBaseEngine.prototype.HandleMessage = function (pTopic, pMSG) {
            this.FireEvent(true, "IncomingMessage", new cde.TheProcessMessage(pTopic, pMSG));
        };
        TheBaseEngine.prototype.PublishToNode = function (pTargetNode, pTXT, pPLS, pGRO) {
            if (!cde.MyCommChannel)
                return;
            if (pPLS === undefined)
                pPLS = "";
            cde.MyCommChannel.SendQueued("", "CDE_SYSTEMWIDE", this.GetEngineName(), pTXT, pPLS, 0, 5, 3, pTargetNode, pGRO);
        };
        TheBaseEngine.prototype.PublishToFirstNode = function (pTXT, pPLS) {
            if (!cde.MyCommChannel)
                return;
            if (pPLS === undefined)
                pPLS = "";
            var tTSM = new cde.TSM(this.GetEngineName());
            tTSM.TXT = pTXT;
            tTSM.PLS = pPLS;
            cde.MyCommChannel.SendToFirstNode(tTSM);
        };
        TheBaseEngine.prototype.PublishCentral = function (pTXT, pPLS) {
            if (!cde.MyCommChannel)
                return;
            if (pPLS === undefined)
                pPLS = "";
            cde.MyCommChannel.SendQueued("", this.GetEngineName(), this.GetEngineName(), pTXT, pPLS, 0, 5, 3, "");
        };
        TheBaseEngine.prototype.PublishToService = function (pTXT, pPLS) {
            if (!cde.MyCommChannel)
                return;
            if (pPLS === undefined)
                pPLS = "";
            cde.MyCommChannel.SendQueued("", this.GetEngineName(), this.GetEngineName(), pTXT, pPLS, 8, 5, 3, "");
        };
        TheBaseEngine.prototype.PublishToOwner = function (pOwner, pTXT, pPLS, pTarget, pGRO, pSender) {
            if (!cde.MyCommChannel)
                return;
            if (pPLS === undefined)
                pPLS = "";
            cde.MyCommChannel.SendQueued(pOwner, this.GetEngineName(), this.GetEngineName(), pTXT, pPLS, 8, 5, 3, pTarget, pGRO, pSender);
        };
        TheBaseEngine.prototype.PublishToOriginator = function (pTSM, pTXT, pPLS, pSender) {
            if (!cde.MyCommChannel)
                return;
            if (pPLS === undefined)
                pPLS = "";
            cde.MyCommChannel.SendQueued(pTSM.OWN, this.GetEngineName(), this.GetEngineName(), pTXT, pPLS, 0, pTSM.QDX, pTSM.LVL, cde.TSM.GetOriginator(pTSM), pTSM.ORG, pSender);
        };
        TheBaseEngine.prototype.RSAEncrypt = function (text, token) {
            if (cde.MyCommChannel)
                return cde.MyCommChannel.RSAEncrypt(text, token);
            else
                return text;
        };
        TheBaseEngine.prototype.SaveFile = function (pContent, pName, pMime, IsBinary) {
            var ab;
            if (IsBinary) {
                var bString = atob(pContent);
                ab = new ArrayBuffer(bString.length);
                var ia = new Uint8Array(ab);
                for (var i = 0; i < bString.length; i++) {
                    ia[i] = bString.charCodeAt(i);
                }
            }
            else {
                ab = pContent;
            }
            var bb = new Blob([ab], { type: pMime });
            var tFS = new cde.cdeFileSaver();
            tFS.SaveAs(bb, pName);
        };
        return TheBaseEngine;
    }(cde.TheThing));
    cde.TheBaseEngine = TheBaseEngine;
    function StartEngineHost() {
        var _this = this;
        if (cde.IsHostRunning)
            return false;
        cde.IsHostRunning = true;
        cde.MyContentEngine = cde.StartNewEngine(cde.eTheContentService);
        cde.MyContentEngine.RegisterEvent("IncomingMessage", function (pSender, pProcessMessage) {
            var pMSG = pProcessMessage.Message;
            if (!pMSG)
                return;
            var tCmd = pMSG.TXT.split(':');
            switch (tCmd[0]) {
                case "CDE_FILE":
                    if (tCmd.length > 2) {
                        if (pMSG.PLB) {
                            cde.MyContentEngine.SaveFile(pMSG.PLB, tCmd[1], tCmd[2], true);
                        }
                        else {
                            cde.MyContentEngine.SaveFile(pMSG.PLS, tCmd[1], tCmd[2], false);
                        }
                    }
                    break;
                case "CDE_ENGINEJS":
                    if (pMSG.PLS && tCmd.length > 1) {
                        cde.MyContentEngine.RegisterEvent("EngineReady", function (a) {
                            if (a === tCmd[1])
                                cdeNMI.MyTCF.FireLazyCreate(a);
                        });
                        if (!cde.MyBaseAssets.MyEngines[tCmd[1]]) {
                            cde.CreateScriptInRoot(tCmd[1], pMSG.PLS);
                            cde.StartNewEngine(tCmd[1]);
                            try {
                                cde.cdeEval(tCmd[1] + ".StartEngine()");
                            }
                            catch (error) {
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "StartEngineHost:HandleEvent", "CDE_ENGINEJS:" + error + "<br>" + error.stack);
                            }
                        }
                    }
                    break;
                case "CDE_CUSTOM_HTML":
                    if (pMSG.PLS && tCmd.length > 1) {
                        var ele = document.getElementById('content');
                        if (ele)
                            ele.innerHTML = pMSG.PLS;
                    }
                    break;
                case "CDE_CUSTOM_CSS":
                    if (pMSG.PLS) {
                        var tCSS = pMSG.PLS.split(';');
                        cde.AddCSSToHeader(tCSS[0], tCSS.length > 1 ? tCSS[1] : null);
                    }
                    break;
                default:
                    break;
            }
        });
        if (cde.MyCommChannel) {
            cde.MyCommChannel.RegisterEvent("CDE_INCOMING_MSG", function (pSender, tProgress) {
                //if (tProgress instanceof cde.TheProcessMessage) { //Does not work with Weg Worker Messages
                if (tProgress && tProgress.Message && tProgress.Message.ENG !== '') {
                    if (cde.MyBaseAssets.MyEngines[tProgress.Message.ENG]) {
                        if (!cde.MyBaseAssets.MyEngines[tProgress.Message.ENG].EngineState.IsInitialized || cde.MyBaseAssets.MyEngines[tProgress.Message.ENG].EngineState.IsEngineScoped !== (tProgress.Message.SID !== '')) {
                            cde.MyBaseAssets.MyEngines[tProgress.Message.ENG].EngineState.IsInitialized = true;
                            cde.MyBaseAssets.MyEngines[tProgress.Message.ENG].EngineState.IsEngineScoped = tProgress.Message.SID !== '';
                            cde.MyBaseAssets.MyEngines[tProgress.Message.ENG].FireEngineIsReady();
                        }
                        try {
                            cde.MyBaseAssets.MyEngines[tProgress.Message.ENG].FireEvent(true, "IncomingMessage", tProgress);
                        }
                        catch (e) {
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "error during process Message:" + e, "cdeEngines:StartEngineHost/eTheContentService");
                        }
                        _this.HBCounter = 0;
                    }
                    else {
                        if (cde.MyBaseAssets.MyServiceHostInfo.DebugLevel > 0)
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Engine Not found:" + tProgress.Message.ENG + "(" + tProgress.Message.TXT + ")", "cdeEngines:StartEngineHost/eTheContentService");
                        cde.MyCommChannel.SendQueued("", cde.eTheContentService, cde.eTheContentService, "CDE_GET_ENGINEJS", tProgress.Message.ENG, 8, 5, 3, ""); //record that we asked for it already...only ask again if not received in a certain time
                    }
                }
                //}
            });
            //Comm Channel was reset - all Engine Re-Init
            cde.MyCommChannel.RegisterEvent("CDE_REINIT_ENGINES", function () {
                for (var tEngine in cde.MyBaseAssets.MyEngines)
                    if (cde.MyBaseAssets.MyEngines.hasOwnProperty(tEngine))
                        cde.MyBaseAssets.MyEngines[tEngine].SendInitialize();
            });
            //Check if any engine wants to send somethign if the queue is empty and the HB is fired
            cde.MyCommChannel.RegisterEvent("CDE_HB_INJECT", function () {
                for (var tEngine in cde.MyBaseAssets.MyEngines) {
                    if (cde.MyBaseAssets.MyEngines.hasOwnProperty(tEngine)) {
                        cde.MyBaseAssets.MyEngines[tEngine].FireEvent(false, "CDE_HB_INJECT");
                    }
                }
            });
            cde.MyCommChannel.RegisterEvent("CDE_ENGINE_GONE", function (pSender, tEngine) {
                if (cde.MyBaseAssets.MyEngines.hasOwnProperty(tEngine)) {
                    cde.MyBaseAssets.MyEngines[tEngine].EngineState.IsInitialized = false;
                    cde.MyBaseAssets.MyEngines[tEngine].FireEngineIsReady(false);
                }
            });
        }
        return true;
    }
    cde.StartEngineHost = StartEngineHost;
    function StartNewEngine(pEngineName) {
        if (!pEngineName)
            return null;
        cde.MyBaseAssets.MyEngines[pEngineName] = new cde.TheBaseEngine();
        cde.MyBaseAssets.MyEngines[pEngineName].EngineState.ClassName = pEngineName;
        cde.MyBaseAssets.MyEngines[pEngineName].EngineState.IsInitialized = false;
        cde.MyBaseAssets.MyEngines[pEngineName].EngineState.IsEngineScoped = false;
        cde.MyBaseAssets.MyEngines[pEngineName].SendInitialize();
        return cde.MyBaseAssets.MyEngines[pEngineName];
    }
    cde.StartNewEngine = StartNewEngine;
    function AddCSSToHeader(pCSSFile, pCSSFileLite) {
        var tFileCSS = cde.FixupPath(pCSSFile); //.toLowerCase();
        if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme && pCSSFileLite)
            tFileCSS = cde.FixupPath(pCSSFileLite); //.toLowerCase();
        var links = document.getElementsByTagName("link");
        if (links.length > 0) {
            for (var i = 0; i < links.length; i++) {
                if (links[i].getAttribute("href").toLowerCase() === tFileCSS.toLowerCase())
                    return;
            }
        }
        var fileref = document.createElement("link");
        fileref.setAttribute("rel", "stylesheet");
        fileref.setAttribute("type", "text/css");
        fileref.setAttribute("cde", "colorScheme");
        fileref.setAttribute("media", "screen");
        fileref.setAttribute("dark", cde.FixupPath(pCSSFile));
        if (pCSSFileLite)
            fileref.setAttribute("lite", cde.FixupPath(pCSSFileLite));
        fileref.setAttribute("cde", "colorScheme");
        var tN = cde.MyBaseAssets.MyCommStatus.InitialNPA;
        fileref.setAttribute("href", tFileCSS + (!tN ? "" : "?SID=" + tN.substr(4, tN.length - (4 + (tN.indexOf(".ashx") > 0 ? 5 : 0)))));
        document.getElementsByTagName("head")[0].appendChild(fileref);
    }
    cde.AddCSSToHeader = AddCSSToHeader;
    function CreateScriptInRoot(pScriptName, pScript) {
        var tRoot = document.getElementsByTagName("head")[0]; //'document.getElementById("head");
        if (!tRoot)
            return;
        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "CreateScriptInRoot", "Creating " + pScriptName + " in doc header");
        var tScripEle = tRoot.getElementsByTagName("script");
        var DoInsert = true;
        if (tScripEle.length > 0) {
            for (var i = 0; i < tScripEle.length; i++) {
                if (tScripEle[i].id === pScriptName) {
                    DoInsert = false;
                    break;
                }
            }
        }
        if (DoInsert) {
            var s = document.createElement('script');
            s.type = "text/javascript";
            s.text = pScript;
            s.id = pScriptName;
            tRoot.appendChild(s);
        }
    }
    cde.CreateScriptInRoot = CreateScriptInRoot;
})(cde || (cde = {}));
var cdeCommCore;
(function (cdeCommCore) {
    function StartNewEngine(pEngine) {
        return cde.StartNewEngine(pEngine);
    }
    cdeCommCore.StartNewEngine = StartNewEngine;
    function PublishToOriginator(pOrg, pEngineName, pGRO, pTXT, pPLS, pSender) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        cde.MyCommChannel.SendQueued("", "CDE_SYSTEMWIDE", pEngineName, pTXT, pPLS, 0, 5, 3, pOrg, pGRO, pSender);
    }
    cdeCommCore.PublishToOriginator = PublishToOriginator;
    function PublishToNode(pTargetNode, pEngineName, pTXT, pPLS) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        cde.MyCommChannel.SendQueued("", "CDE_SYSTEMWIDE", pEngineName, pTXT, pPLS, 0, 5, 3, pTargetNode);
    }
    cdeCommCore.PublishToNode = PublishToNode;
    function RegisterTopic(InitString) {
        //if (cde.MyBaseAssets.MyServiceHostInfo.LastSID && cde.MyBaseAssets.MyServiceHostInfo.LastSID != "")
        //    InitString += "@" + cde.MyBaseAssets.MyServiceHostInfo.LastSID;
        cdeCommCore.PublishToFirstNode("ContentService", "CDE_SUBSCRIBE", InitString);
    }
    cdeCommCore.RegisterTopic = RegisterTopic;
    //Legacy Support please use functions below
    function GetNextMessage(pOwner, pTopic, pEngineName, pTXT, pPLS, pFLG, pQDX, pLVL, pTarget, pGro, pSender) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        cde.MyCommChannel.SendQueued(pOwner, pTopic, pEngineName, pTXT, pPLS, pFLG, pQDX, pLVL, pTarget, pGro, pSender);
    }
    cdeCommCore.GetNextMessage = GetNextMessage;
    function PublishToFirstNode(pEngineName, pTXT, pPLS) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        var tTSM = new cde.TSM(pEngineName);
        tTSM.TXT = pTXT;
        tTSM.PLS = pPLS;
        cde.MyCommChannel.SendToFirstNode(tTSM);
    }
    cdeCommCore.PublishToFirstNode = PublishToFirstNode;
    function PublishTSMToFirstNode(pTSM) {
        if (!cde.MyCommChannel)
            return;
        cde.MyCommChannel.SendToFirstNode(pTSM);
    }
    cdeCommCore.PublishTSMToFirstNode = PublishTSMToFirstNode;
    function PublishToOwner(pOwner, pEngineName, pTXT, pPLS, pTarget, pGro, pSender) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        cde.MyCommChannel.SendQueued(pOwner, pEngineName, pEngineName, pTXT, pPLS, 8, 5, 3, pTarget, pGro, pSender);
    }
    cdeCommCore.PublishToOwner = PublishToOwner;
    ///Used by Convenience Apps
    function PublishToService(pEngineName, pTXT, pPLS) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        cde.MyCommChannel.SendQueued("", pEngineName, pEngineName, pTXT, pPLS, 8, 5, 3, "");
    }
    cdeCommCore.PublishToService = PublishToService;
    function PublishTSMToService(pTSM) {
        if (!cde.MyCommChannel)
            return;
        cde.MyCommChannel.SendTSM(pTSM);
    }
    cdeCommCore.PublishTSMToService = PublishTSMToService;
    function PublishCentral(pEngineName, pTXT, pPLS) {
        if (!cde.MyCommChannel)
            return;
        if (pPLS === undefined)
            pPLS = "";
        cde.MyCommChannel.SendQueued("", pEngineName, pEngineName, pTXT, pPLS, 0, 5, 3, "");
    }
    cdeCommCore.PublishCentral = PublishCentral;
    function PublishTSMCentral(pTSM) {
        if (!cde.MyCommChannel)
            return;
        cde.MyCommChannel.SendQueued(pTSM.OWN, pTSM.ENG, pTSM.ENG, pTSM.TXT, pTSM.PLS, pTSM.FLG, pTSM.QDX, pTSM.LVL, "");
    }
    cdeCommCore.PublishTSMCentral = PublishTSMCentral;
    ///Used by Convenience Apps
    function IsNotReadyForLogin() {
        return (!cde.MyCommChannel || !cde.MyCommChannel.IsReady).toString();
    }
    cdeCommCore.IsNotReadyForLogin = IsNotReadyForLogin;
    ///Used by Convenience Apps
    function DoAppLogin(pUID, pPWD, pPlatform) {
        cde.MyBaseAssets.MyServiceHostInfo.IsAppHosted = true;
        if (cdeNMI.MyEngine) {
            cdeNMI.MyEngine.Login(null, pUID, pPWD, pPlatform);
        }
    }
    cdeCommCore.DoAppLogin = DoAppLogin;
    function CleanState() {
        cdeNMI.CleanState();
    }
    cdeCommCore.CleanState = CleanState;
})(cdeCommCore || (cdeCommCore = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeWEB;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeWEB) {
    var cdeWebComm = /** @class */ (function (_super) {
        __extends(cdeWebComm, _super);
        function cdeWebComm() {
            var _this = _super.call(this) || this;
            _this.MyConfig = null;
            _this.DCreds = null;
            _this.MyStationID = ""; //Global Safe (worker use only)
            _this.IsPosting = false;
            _this.IsRetrying = false;
            _this.MyWebSockets = null;
            _this.MyServiceUrl = "";
            _this.UsesWebSockets = false;
            _this.mLoginSent = false;
            _this.HasStarted = false;
            _this.HealthCounter = 0;
            _this.HBCounter = 0;
            _this.DeadCounter = 0;
            _this.MyCoreQueue = new Array();
            _this.Pre4209SID = null;
            _this.IsWSConnected = false;
            _this.IsConnectionDown = false;
            _this.TriesTokenLogin = false;
            _this.ForceDisconnect = false;
            return _this;
        }
        Object.defineProperty(cdeWebComm.prototype, "MyHSI", {
            get: function () {
                return cde.MyBaseAssets.MyCommStatus;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(cdeWebComm.prototype, "IsConnected", {
            get: function () { return this.ForceDisconnect === true ? false : this.MyHSI.IsConnected; },
            set: function (value) {
                if (this.MyHSI.IsConnected !== value) {
                    this.MyHSI.IsConnected = value;
                    this.UpdateHSI();
                    this.FireEvent(true, "CDE_CONN_CHANGED", value);
                }
            },
            enumerable: false,
            configurable: true
        });
        cdeWebComm.prototype.UpdateHSI = function () {
            this.MyHSI.HasAutoLogin = this.HasAutoLogin;
            this.WriteToIDB();
        };
        cdeWebComm.prototype.UpdateCallerHSI = function (pSource) {
            this.UpdateHSI();
            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "UpdateHSI", pSource, 1);
        };
        Object.defineProperty(cdeWebComm.prototype, "IsReady", {
            get: function () { return this.MyHSI.CurrentRSA !== null; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(cdeWebComm.prototype, "HasAutoLogin", {
            get: function () { return (this.MyConfig && this.MyConfig.Creds !== null); },
            enumerable: false,
            configurable: true
        });
        cdeWebComm.prototype.SetTargetRelay = function (pTarget) {
            var tParts;
            try {
                tParts = pTarget.split(';:;');
                var t_1 = null;
                if (!cde.IsIE()) {
                    t_1 = new URL(tParts[0]);
                }
                else {
                    t_1 = document.createElement("a");
                    t_1.href = tParts[0];
                }
                var tConf = this.MyConfig;
                if (tConf === null)
                    tConf = new cde.TheCommConfig(0);
                tConf.host = t_1.hostname;
                tConf.cdeTIM = new Date();
                tConf.port = cde.CInt(t_1.port);
                if (t_1.protocol.indexOf("s:", t_1.protocol.length - 2) !== -1) {
                    tConf.useTLS = true;
                    if (tConf.port === 0)
                        tConf.port = 443;
                }
                else {
                    if (tConf.port === 0)
                        tConf.port = 80;
                }
                if (tParts.length > 1) {
                    tConf.Creds = new cde.TheCDECredentials();
                    tConf.Creds.QUID = tParts[1];
                    if (tParts.length > 2)
                        tConf.Creds.QPWD = tParts[2];
                }
                this.SetConfig(tConf);
                return true;
            }
            catch (ex) {
                var tErr = tParts[0] + " is not a valid Url";
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:SetTargetRelay", tErr, 2);
                this.FireEvent(true, "CDE_SETSTATUSMSG", tErr, 2);
            }
            return false;
        };
        cdeWebComm.prototype.SetConfig = function (pConfig) {
            this.MyConfig = pConfig;
            if (!this.MyConfig)
                return;
            if (this.MyConfig.RequestPath && !this.MyHSI.InitialNPA)
                this.MyHSI.InitialNPA = this.MyConfig.RequestPath;
            if (!this.MyConfig.cdeTIM)
                this.MyConfig.cdeTIM = new Date();
            if (!this.MyConfig.TO)
                this.MyConfig.TO = new cde.TheTimeouts();
            if (!this.MyConfig.host && this.MyConfig.uri) {
                this.SetTargetRelay(this.MyConfig.uri);
            }
        };
        cdeWebComm.prototype.StartCommunication = function (pConfig) {
            var _this = this;
            if (this.IsConnected || this.HasStarted) //don't start twice
             {
                if (this.IsConnected && this.HasStarted)
                    this.FireEvent(true, "CDE_CONN_CHANGED", true);
                return;
            }
            this.IsConnectionDown = false;
            if (!this.MyDB) {
                if (!('indexedDB' in window)) {
                    this.StartCommPhase2(pConfig);
                    return;
                }
                var req = indexedDB.open('cdeDB', 1);
                req.onupgradeneeded = function (ev) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", "In Upgrade Needed", 1);
                    _this.MyDB = ev.target.result;
                    if (!_this.MyDB.objectStoreNames.contains('CDEJS')) {
                        _this.MyDB.createObjectStore('CDEJS', { keyPath: 'id' });
                    }
                    _this.StartCommPhase2(pConfig);
                };
                req.onsuccess = function (ev) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", "Open Success", 1);
                    _this.MyDB = ev.target.result;
                    var transaction = _this.MyDB.transaction(['CDEJS']);
                    var objectStore = transaction.objectStore('CDEJS');
                    var request = objectStore.get(1);
                    request.onerror = function () {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", "Read of Idx1 failed", 3);
                        _this.StartCommPhase2(pConfig);
                    };
                    request.onsuccess = function () {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", "Read Success", 1);
                        if (request.result) {
                            var tConfig = request.result.config;
                            if (tConfig.Creds && tConfig.Creds.QToken && tConfig.Creds.QToken !== "") { //If state is younger than 1minute - use it
                                if (pConfig && pConfig.RequestPath) {
                                    tConfig.RequestPath = pConfig.RequestPath;
                                    if (!_this.MyHSI.InitialNPA)
                                        _this.MyHSI.InitialNPA = pConfig.RequestPath;
                                }
                                pConfig = tConfig;
                                _this.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", 'State Restored', 1);
                            }
                            else {
                                _this.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", 'State ignored', 1);
                                _this.DeleteFromIDB();
                            }
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", "Starting CommPhase2...", 1);
                            _this.StartCommPhase2(pConfig);
                        }
                        else {
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:message", 'No data record', 2);
                            _this.StartCommPhase2(pConfig);
                        }
                    };
                };
                req.onerror = function (ev) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:error", "Error:" + ev, 3);
                    _this.StartCommPhase2(pConfig);
                };
            }
            else
                this.StartCommPhase2(pConfig);
        };
        cdeWebComm.prototype.StartCommPhase2 = function (pConfig) {
            var _this = this;
            if (pConfig) {
                this.SetConfig(pConfig);
            }
            if (this.MyConfig) {
                if (cde.CBool(this.MyConfig.NoISB) === false) {
                    this.HasStarted = true;
                    var tScheme = "http";
                    if (this.MyConfig.useTLS === true)
                        tScheme += "s";
                    this.MyHSI.MyServiceUrl = tScheme + "://" + this.MyConfig.host + ":" + this.MyConfig.port;
                    var isbEndpoint = this.MyHSI.MyServiceUrl + "/MYISBCONNECT";
                    this.GetJSON(isbEndpoint, function (isb) {
                        if (isb.ERR) {
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:StartCommunication", "MyISBConnect returned: " + isb.ERR, 3);
                            _this.FireEvent(true, "CDE_NO_CONNECT", "ISBConnect returned " + isb.ERR + ". Verify ISBConnect is allow on relay");
                        }
                        else {
                            if (isb.WSP > 0) {
                                var tscheme = "ws";
                                if (isb.TLS === true)
                                    tscheme += "s";
                                _this.MyConfig.wsuri = tscheme + "://" + _this.MyConfig.host + ":" + isb.WSP;
                            }
                            {
                                var tscheme = "http";
                                if (isb.TLS === true)
                                    tscheme += "s";
                                _this.MyServiceUrl = tscheme + "://" + _this.MyConfig.host + ":" + _this.MyConfig.port;
                            }
                            _this.MyConfig.RequestPath = isb.NPA;
                            _this.MyHSI.InitialNPA = isb.NPA;
                            _this.MyHSI.FirstNodeID = isb.FNI;
                            if (isb.ADR) {
                                _this.MyHSI.AdminPWMustBeSet = true;
                                _this.MyHSI.AdminRole = isb.ADR;
                            }
                            if (cde.CDbl(isb.VER) > 4)
                                cde.MyBaseAssets.MyServiceHostInfo.NMIVersion = cde.CDbl(isb.VER);
                            else
                                cde.MyBaseAssets.MyServiceHostInfo.NMIVersion = 4.0;
                            _this.DoStartComm();
                        }
                    }, function (error) {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:StartCommunication", "MyISBConnect failed! :" + error, 3);
                        _this.FireEvent(true, "CDE_NO_CONNECT", "ISBConnect failed. Verify ISBConnect is allow on relay");
                    });
                }
            }
            if (!this.HasStarted) {
                this.HasStarted = true;
                this.DoStartComm();
            }
        };
        cdeWebComm.prototype.DoStartComm = function () {
            var _this = this;
            var IsStillWorking = false;
            if (!this.MyConfig.TO) {
                this.MyConfig.TO = new cde.TheTimeouts();
            }
            this.StartupWS();
            this.MyHeartBeatMonitor = setInterval(function () {
                if (IsStillWorking || _this.IsConnectionDown)
                    return;
                IsStillWorking = true;
                _this.HealthCounter++;
                if ((!_this.UsesWebSockets || !_this.MyConfig.IsWSHBDisabled) && _this.HealthCounter % _this.MyConfig.TO.HeartBeat === 0) {
                    if (_this.MyCoreQueue.length === 0) {
                        _this.PickupNextMessage();
                    }
                    if (!_this.UsesWebSockets) {
                        if (_this.IsConnected) {
                            if (_this.HBCounter++ > _this.MyConfig.TO.HeartBeatMissed) {
                                _this.IsConnected = false;
                                _this.IsPosting = false;
                                _this.HBCounter = 0;
                            }
                        }
                        else {
                            if (_this.DeadCounter++ > _this.MyConfig.TO.HeartBeatMissed * 3) {
                                var reason = cde.DateToString(new Date()) + ": Connection Lost because Service is down or unreachable. Click ok to reload this page";
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNode:StartCommunication", reason, 3);
                                _this.EndSession(reason);
                            }
                        }
                    }
                }
                if (_this.UsesWebSockets || ((_this.HealthCounter % _this.MyConfig.TO.PickupRateDelay) === 0 || _this.MyCoreQueue.length > 0))
                    _this.SendNextMessage(null);
                IsStillWorking = false;
            }, this.MyConfig.TO.PickupRate);
            this.FireEvent(true, "CDE_COMM_STARTED");
        };
        cdeWebComm.prototype.GetConnectionType = function () {
            var tConnType = "(REST)";
            if (this.UsesWebSockets)
                tConnType = "(WS)";
            return tConnType;
        };
        cdeWebComm.prototype.PickupNextMessage = function () {
            var tDevMsg = new cde.TheDeviceMessage();
            tDevMsg.TOP = "";
            tDevMsg.MSG = null;
            this.MyCoreQueue.push(tDevMsg);
        };
        cdeWebComm.prototype.SendQueued = function (pOwner, pTopic, pEngineName, pTXT, pPLS, pFLG, pQDX, pLVL, pTarget, pGRO, pSender) {
            if (!pEngineName)
                return;
            if (this.MyCoreQueue.length > 0 && (pTopic === "CDE_PICKUP" || !pTopic))
                return;
            var tTSM = new cde.TSM(pEngineName);
            if (pTarget && pTarget !== "") {
                pTopic = "CDE_SYSTEMWIDE";
                if (this.Pre4209SID && this.Pre4209SID !== "")
                    pTopic += "@" + this.Pre4209SID;
                pTopic += ";" + pTarget;
            }
            else if (pTopic !== "") {
                if (this.Pre4209SID && this.Pre4209SID !== "")
                    pTopic += "@" + this.Pre4209SID;
            }
            tTSM.SID = this.Pre4209SID;
            tTSM.OWN = pOwner;
            tTSM.FLG = pFLG;
            tTSM.LVL = pLVL;
            tTSM.TXT = pTXT;
            if (pGRO)
                tTSM.GRO = pGRO;
            if ((pFLG & 4096) !== 0) {
                tTSM.PLS = this.RSAEncrypt(pPLS); //ATTENTION: PLS Can exceed encryptable size of token!
            }
            else
                tTSM.PLS = pPLS;
            tTSM.QDX = pQDX;
            tTSM.ORG = cde.MyBaseAssets.MyServiceHostInfo.MyStationID + (pSender ? ":" + pSender : "");
            var tDevMsg = new cde.TheDeviceMessage();
            tDevMsg.TOP = pTopic;
            tDevMsg.MSG = tTSM;
            this.MyCoreQueue.push(tDevMsg);
        };
        cdeWebComm.prototype.SendTSM = function (tTSM, pTopic, pTarget, pSender) {
            if (this.MyCoreQueue.length > 0 && pTopic === "CDE_PICKUP")
                return;
            if (pTarget && pTarget !== "") {
                pTopic = "CDE_SYSTEMWIDE";
                if (this.Pre4209SID && this.Pre4209SID !== "")
                    pTopic += "@" + this.Pre4209SID;
                pTopic += ";" + pTarget;
            }
            else if (pTopic !== "") {
                if (this.Pre4209SID && this.Pre4209SID !== "")
                    pTopic += "@" + this.Pre4209SID;
            }
            tTSM.SID = this.Pre4209SID;
            if ((tTSM.FLG & 4096) !== 0) {
                tTSM.PLS = this.RSAEncrypt(tTSM.PLS); //ATTENTION: PLS Can exceed encryptable size of token!
            }
            tTSM.ORG = cde.MyBaseAssets.MyServiceHostInfo.MyStationID + (pSender ? ":" + pSender : "");
            var tDevMsg = new cde.TheDeviceMessage();
            tDevMsg.TOP = pTopic ? pTopic : tTSM.ENG;
            tDevMsg.MSG = tTSM;
            this.MyCoreQueue.push(tDevMsg);
        };
        cdeWebComm.prototype.Subscribe = function (pTopics) {
            var tTSM = new cde.TSM("ContentService");
            tTSM.TXT = "CDE_SUBSCRIBE";
            tTSM.PLS = pTopics;
            if (this.Pre4209SID && this.Pre4209SID !== "")
                tTSM.PLS += "@" + this.Pre4209SID;
            this.SendToFirstNode(tTSM);
        };
        cdeWebComm.prototype.Unsubscribe = function (pTopics) {
            var tTSM = new cde.TSM("ContentService");
            tTSM.TXT = "CDE_UNSUBSCRIBE";
            tTSM.PLS = pTopics;
            if (this.Pre4209SID && this.Pre4209SID !== "")
                tTSM.PLS += "@" + this.Pre4209SID;
            this.SendToFirstNode(tTSM);
        };
        cdeWebComm.prototype.SendToNode = function (tOrg, TargetMessage, IncludeLocalNode) {
            this.SendTSM(TargetMessage, null, tOrg);
            if (IncludeLocalNode)
                this.FireEvent(true, "CDE_INCOMING_MSG", new cde.TheProcessMessage(TargetMessage.ENG, TargetMessage));
        };
        cdeWebComm.prototype.SendToOriginator = function (sourceMessage, TargetMessage, IncludeLocalNode) {
            if (!sourceMessage)
                return;
            this.SendTSM(TargetMessage, null, sourceMessage.ORG);
            if (IncludeLocalNode)
                this.FireEvent(true, "CDE_INCOMING_MSG", new cde.TheProcessMessage(TargetMessage.ENG, TargetMessage));
        };
        cdeWebComm.prototype.SendToFirstNode = function (TargetMessage) {
            this.SendTSM(TargetMessage, null, this.MyHSI.FirstNodeID);
        };
        cdeWebComm.prototype.Logout = function () {
            this.EndSession("logout");
        };
        cdeWebComm.prototype.EndSession = function (reason) {
            if (cde.CBool(this.IsConnectionDown))
                return;
            clearInterval(this.MyHeartBeatMonitor);
            this.HasStarted = false;
            this.IsConnectionDown = true;
            this.IsConnected = false;
            this.IsRetrying = false;
            this.DeleteFromIDB();
            this.FireEvent(true, "CDE_SESSION_ENDED", reason);
        };
        cdeWebComm.prototype.PostError = function (MyQueuedMsg, errorText, pRetryPath) {
            this.IsPosting = false;
            if (!this.IsRetrying && errorText === "timeout") {
                this.IsRetrying = true;
                this.SendNextMessage(MyQueuedMsg, pRetryPath);
            }
            else {
                if (MyQueuedMsg.ENG !== "") {
                    this.FireEvent(true, "CDE_ENGINE_GONE", MyQueuedMsg.ENG);
                }
                var tErr = cde.DateToString(new Date()) + " Communication was lost.You will need to login again";
                this.FireEvent(true, "CDE_SETSTATUSMSG", tErr, 3);
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "PostError", tErr);
                this.EndSession(tErr);
            }
        };
        ///Picks up any REST based Messages
        cdeWebComm.prototype.SendNextMessage = function (MyQueuedMsg, pRetryPath) {
            var _this = this;
            if (!MyQueuedMsg && (this.IsPosting || this.MyCoreQueue.length === 0))
                return;
            if (!this.UsesWebSockets && (!this.MyConfig.RequestPath || this.MyConfig.RequestPath === "") && !pRetryPath)
                return;
            if (this.UsesWebSockets && this.IsWSConnected === false)
                return;
            var _loop_1 = function () {
                this_1.IsPosting = true;
                var uri = void 0;
                if (!MyQueuedMsg) {
                    var telCnt = 0;
                    var tDevList = [];
                    do {
                        tDevList[telCnt] = this_1.MyCoreQueue.shift();
                        telCnt++;
                    } while (this_1.MyCoreQueue.length > 0 && telCnt < 10);
                    MyQueuedMsg = new cde.TheCoreQueueContent("", "", tDevList);
                    var tRPath = (pRetryPath ? pRetryPath : this_1.MyConfig.RequestPath);
                    uri = this_1.MyServiceUrl + encodeURI(tRPath);
                    if (this_1.UsesWebSockets === false && uri.substr(uri.length - 5, 5) === ".ashx")
                        uri = uri.substr(0, uri.length - 5);
                    if (MyQueuedMsg.TOPIC !== "")
                        uri += "?" + encodeURI(MyQueuedMsg.TOPIC);
                    MyQueuedMsg.RQP = uri;
                    pRetryPath = this_1.MyConfig.RequestPath;
                    this_1.MyConfig.RequestPath = "";
                }
                else {
                    uri = MyQueuedMsg.RQP;
                }
                this_1.WriteToIDB();
                if (this_1.UsesWebSockets) {
                    this_1.MyWebSockets.send(MyQueuedMsg.JMSG);
                    this_1.IsPosting = false;
                    MyQueuedMsg = null;
                }
                else {
                    if (window.fetch) {
                        fetch(uri, {
                            method: "post",
                            body: MyQueuedMsg.JMSG,
                            mode: "cors",
                            cache: "no-cache",
                            redirect: "follow",
                            referrer: "no-referrer",
                            headers: {
                                "Content-Type": "application/json; charset=utf-8"
                            }
                        }).then(function (resp) {
                            resp.json().then(function (m) {
                                var tMsg = m;
                                _this.IsPosting = false;
                                var IsPulsing = false;
                                if (tMsg.length > 0)
                                    for (var i = 0; i < tMsg.length; i++) {
                                        if (tMsg[i].CNT > 0)
                                            IsPulsing = true;
                                        _this.IsPosting = !_this.ProcessDeviceMessage(tMsg[i], false);
                                    }
                                if (IsPulsing)
                                    _this.SendNextMessage(null);
                            });
                        }).catch(function (error) {
                            _this.PostError(MyQueuedMsg, error, pRetryPath);
                        });
                    }
                    else {
                        var xhr_1 = new XMLHttpRequest();
                        xhr_1.open('POST', uri);
                        xhr_1.setRequestHeader('Content-Type', 'application/json');
                        xhr_1.onload = function () {
                            if (xhr_1.status === 200) {
                                try {
                                    var tMsg = JSON.parse(xhr_1.responseText);
                                    _this.IsPosting = false;
                                    var IsPulsing = false;
                                    if (tMsg.length > 0)
                                        for (var i = 0; i < tMsg.length; i++) {
                                            if (tMsg[i].CNT > 0)
                                                IsPulsing = true;
                                            _this.IsPosting = !_this.ProcessDeviceMessage(tMsg[i], false);
                                        }
                                    if (IsPulsing)
                                        _this.SendNextMessage(null);
                                }
                                catch (tErr) {
                                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:SendNextMessage", "Message Parse Error:" + tErr);
                                    _this.PostError(MyQueuedMsg, "parse failed", pRetryPath);
                                }
                            }
                            else if (xhr_1.status !== 200) {
                                var tStat = "Message returned: " + xhr_1.status + " msg:" + xhr_1.statusText;
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:SendNextMessage", tStat);
                                _this.PostError(MyQueuedMsg, tStat, pRetryPath);
                            }
                        };
                        xhr_1.onerror = function () {
                            var tStat = "Message returned: " + xhr_1.status + " msg:" + xhr_1.statusText;
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:xhrError", tStat);
                            _this.EndSession(tStat);
                        };
                        xhr_1.send(MyQueuedMsg.JMSG);
                    }
                    return "break";
                }
            };
            var this_1 = this;
            do {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            } while (this.MyCoreQueue.length > 0);
        };
        ///Starts up the WebSocket Communication
        cdeWebComm.prototype.StartupWS = function () {
            var _this = this;
            if (!this.MyConfig.wsuri)
                return false;
            var tUri = this.MyConfig.wsuri;
            if (tUri.indexOf(".ashx") < 0)
                tUri += encodeURI(this.MyConfig.RequestPath);
            try {
                this.MyWebSockets = new WebSocket(tUri);
                if (this.MyConfig.TO.WsTimeOut > 0) {
                    setInterval(function () {
                        if (!_this.IsWSConnected && _this.UsesWebSockets)
                            _this.UsesWebSockets = false;
                    }, this.MyConfig.TO.WsTimeOut);
                }
            }
            catch (e) {
                this.MyWebSockets = null;
                return false;
            }
            if (this.MyWebSockets) {
                this.UsesWebSockets = true;
                this.MyWebSockets.onopen = function () {
                    _this.FireEvent(true, "CDE_SETSTATUSMSG", "Connecting to WS...", 2);
                    _this.MyWebSockets.send("[{\"MET\":0,\"TOP\":\"CDE_INITWS\",\"CNT\":0}]");
                };
                this.MyWebSockets.onmessage = function (args) {
                    if (!_this.UsesWebSockets)
                        return;
                    _this.IsWSConnected = true;
                    try {
                        if (args.data.substring(0, 1) !== '[') {
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:OnMessage", "Strange Response from WServer:" + args.data);
                        }
                        else {
                            var bIsLarge = false;
                            if (args.data.length > 500000) {
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:OnMessage", "Very large Telegram received:" + args.data.length);
                                bIsLarge = true;
                            }
                            var tMsg = JSON.parse(args.data);
                            if (tMsg && tMsg.length > 0) {
                                for (var i = 0; i < tMsg.length; i++) {
                                    if (!tMsg[i].MSG && tMsg[i].TOP !== "") {
                                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "StartUpWS:onMessage", tMsg[i].TOP);
                                        return;
                                    }
                                    else {
                                        var tTops = tMsg[i].TOP.split(";:;");
                                        if (tTops[0] === "CDE_CONNECT" && _this.MyConfig && _this.MyConfig.Creds) {
                                            _this.MyHSI.CurrentRSA = tMsg[i].RSA;
                                            _this.Login(_this.MyConfig.Creds);
                                            continue;
                                        }
                                    }
                                    if (bIsLarge)
                                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:OnMessage", "ORG:" + cde.TSM.GetOriginator(tMsg[i].MSG) + "TXT: " + tMsg[i].MSG.TXT);
                                    _this.ProcessDeviceMessage(tMsg[i], true);
                                }
                            }
                            else {
                                //debugger;
                            }
                        }
                    }
                    catch (e) {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:StartWS", "Error during OnMessage:" + e);
                    }
                };
                this.MyWebSockets.onclose = function () {
                    if (_this.UsesWebSockets) {
                        _this.UsesWebSockets = false;
                        if (_this.IsWSConnected) {
                            var tErr = cde.DateToString(new Date()) + (_this.mLoginSent ? " Relay refused login and closed connection" : " WS Communication was closed. You will need to login again");
                            _this.FireEvent(true, "CDE_SETSTATUSMSG", tErr, 3);
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "StartUpWS:onclose", tErr);
                            _this.EndSession(tErr);
                        }
                        else {
                            var tErr = cde.DateToString(new Date()) + (_this.mLoginSent ? " a connection could not be established" : " WS Communication was closed. You will need to login again");
                            _this.FireEvent(true, "CDE_SETSTATUSMSG", tErr, 3);
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "StartUpWS:onclose", tErr);
                            _this.EndSession(tErr);
                        }
                    }
                };
                this.MyWebSockets.onerror = function (args) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeWebComm:onError", "Error during OnMessage:" + args);
                    if (_this.UsesWebSockets) {
                        _this.UsesWebSockets = false;
                        if (_this.IsWSConnected) {
                            var tErr = cde.DateToString(new Date()) + " WS Communication was interrupted. You will need to login again";
                            _this.FireEvent(true, "CDE_SETSTATUSMSG", tErr, 3);
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "StartUpWS:onerror", tErr);
                            _this.EndSession(tErr);
                        }
                    }
                };
                return true;
            }
            return false;
        };
        cdeWebComm.prototype.ProcessDeviceMessage = function (tMsg, ViaWS) {
            if (tMsg.MSG)
                this.FireEvent(true, "CDE_INCOMING_MSG", new cde.TheProcessMessage(tMsg.TOP.split(":,:")[0], tMsg.MSG));
            if (ViaWS || tMsg.NPA) {
                var IsHSIDirty = false;
                this.MyConfig.RequestPath = tMsg.NPA;
                if (!this.MyHSI.InitialNPA)
                    this.MyHSI.InitialNPA = tMsg.NPA;
                if (tMsg.RSA && tMsg.RSA !== "" && !this.MyHSI.CurrentRSA) {
                    this.MyHSI.CurrentRSA = tMsg.RSA;
                    if (!this.MyHSI.FirstNodeID && tMsg.MSG) {
                        this.MyHSI.FirstNodeID = cde.TSM.GetOriginator(tMsg.MSG);
                        IsHSIDirty = true;
                    }
                    if (this.DCreds) {
                        this.Login(this.DCreds);
                        this.DCreds = null;
                    }
                }
                this.DeadCounter = 0;
                if (tMsg.DID && tMsg.DID !== "" && this.MyStationID !== tMsg.DID) {
                    this.MyStationID = tMsg.DID;
                    IsHSIDirty = true;
                }
                var tIsConnected = this.IsConnected;
                var tJustLoggedIn = false;
                if (tMsg.TOP === 'ERR:CDE_LOGIN_FAILURE') {
                    //debugger;
                    this.MyHSI.UserPref = null;
                    this.mLoginSent = false;
                    this.MyConfig.Creds = null;
                    this.FireEvent(true, "CDE_LOGIN_EVENT", false, "Relay rejected credentials", null);
                    tJustLoggedIn = true;
                    IsHSIDirty = true;
                    this.EndSession("Relay rejected credentials - Login failed");
                }
                else if (tMsg.TOP === 'ERR:CDE_MESHSELECT_FAILURE') {
                    this.MyHSI.UserPref = null;
                    this.mLoginSent = false;
                    this.MyConfig.Creds = null;
                    this.FireEvent(true, "CDE_LOGIN_EVENT", false, "Mesh Picker failed", null);
                    tJustLoggedIn = true;
                    IsHSIDirty = true;
                    this.EndSession("Mesh Selection failed, please reload this page");
                }
                else if (tMsg.TOP.length > 12) {
                    var tLogParts = tMsg.TOP.split(':');
                    if (!this.MyHSI.IsUserLoggedIn) {
                        if (tLogParts[0] === 'LOGIN_SUCCESS') {
                            this.MyHSI.UserPref = new cde.TheUserPreferences();
                            var tScrParts = null;
                            if (tLogParts.length > 1) {
                                tScrParts = tLogParts[1].split(';');
                                if (tScrParts.length > 1) {
                                    this.MyHSI.LastPortalScreen = tScrParts[1];
                                    if (tScrParts.length > 2)
                                        this.MyHSI.UserPref.HideHeader = cde.CBool(tScrParts[2]);
                                }
                                if (!cde.IsNotSet(tScrParts[0])) {
                                    this.MyHSI.LastStartScreen = tScrParts[0];
                                    //this.MyHSI.UserPref.ShowClassic = true; //With Deep Link always show old SM
                                }
                                if (tLogParts.length > 2) {
                                    this.MyHSI.UserPref.CurrentUserName = tLogParts[2];
                                    if (tLogParts.length > 3) {
                                        try {
                                            var pos = cde.GetSubstringIndex(tMsg.TOP, ':', 3);
                                            var tres = tMsg.TOP.substr(pos + 1);
                                            if (tres.length > 2 && tres.substr(0, 1) === "{")
                                                this.MyHSI.UserPref = JSON.parse(tres);
                                            else
                                                this.MyHSI.UserPref.LCID = cde.CInt(tres); //OLD NMIs
                                        }
                                        catch (ee) {
                                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Login:Illegal User Preferences received");
                                        }
                                    }
                                }
                            }
                            if (this.MyConfig["LPS"]) {
                                this.MyHSI.LastPortalScreen = this.MyConfig["LPS"];
                                //this.MyHSI.UserPref.PortalScreen = this.MyConfig["LPS"];
                            }
                            if (this.MyConfig["LSSC"]) {
                                this.MyHSI.LastStartScreen = this.MyConfig["LSSC"];
                                //this.MyHSI.UserPref.StartScreen = this.MyConfig["LSSC"];
                            }
                            this.MyHSI.UserPref.ScreenParts = tScrParts;
                            this.Pre4209SID = tMsg.SID; //For FirstNodes pre 4.209
                            if (tMsg.SID && tMsg.SID.substr(0, 2) === "UT") {
                                this.Pre4209SID = null;
                                this.MyConfig.Creds = new cde.TheCDECredentials();
                                this.MyConfig.Creds.QToken = tMsg.SID;
                            }
                            this.FireEvent(true, "CDE_LOGIN_EVENT", true, "Login Successful!", this.MyHSI.UserPref);
                            tJustLoggedIn = true;
                            IsHSIDirty = true;
                            this.mLoginSent = false;
                        }
                        else if (tLogParts[0] === 'SELECT_MESH') {
                            var tMeshPicker = tMsg.TOP.substr('SELECT_MESH:'.length);
                            var tMeshes = JSON.parse(tMeshPicker);
                            this.FireEvent(true, "CDE_SELECT_MESH", tMeshes);
                        }
                    }
                }
                if (!ViaWS && tMsg.CNT > 0 && this.MyCoreQueue.length === 0)
                    this.PickupNextMessage();
                tIsConnected = true;
                if (tIsConnected !== this.IsConnected) {
                    if (tIsConnected && !tJustLoggedIn) {
                        this.FireEvent(true, "CDE_SETSTATUSMSG", "Connected to " + this.MyHSI.MyServiceUrl + " using " + (this.UsesWebSockets ? "WS" : "REST"), 1);
                    }
                    this.IsConnected = tIsConnected;
                }
                else {
                    if (IsHSIDirty === true) {
                        this.UpdateCallerHSI("ProcessMsgDirty");
                    }
                }
                if (!this.UsesWebSockets)
                    return true;
            }
            return false;
        };
        cdeWebComm.prototype.Login = function (credentials) {
            if (this.mLoginSent === true || !credentials)
                return;
            if (!this.MyConfig)
                this.MyConfig = new cde.TheCommConfig(0);
            if (!this.MyHSI.CurrentRSA && !this.MyConfig.DisableRSA) {
                this.DCreds = new cde.TheCDECredentials;
                this.DCreds.QUID = credentials.QUID;
                this.DCreds.QPWD = credentials.QPWD;
                this.DCreds.QToken = credentials.QToken;
                this.FireEvent(true, "CDE_SETSTATUSMSG", "RSA not initialized, yet. Waiting for relay to provide...", 2); //"cdeEngineStatusYellow");
            }
            else {
                if (this.DCreds && ((this.DCreds.QUID && this.DCreds.QPWD) || this.DCreds.QToken)) {
                    credentials.QToken = this.DCreds.QToken;
                    credentials.QUID = this.DCreds.QUID;
                    credentials.QPWD = this.DCreds.QPWD;
                }
                this.DCreds = null;
                this.FireEvent(true, "CDE_SETSTATUSMSG", "Sending credentials to Relay...", 1);
                if (credentials.QToken && credentials.QToken !== "") {
                    this.TriesTokenLogin = true;
                    this.SendQueued(null, "CDE_TLOGIN" + credentials.QToken, "ContentService", null, null, 1, 1, 1, null, null);
                }
                else if (!credentials.QUID || credentials.QUID === "") {
                    var cred = this.RSAEncrypt(credentials.QPWD, this.MyHSI.CurrentRSA);
                    this.SendQueued(null, "CDE_SETESID" + cred, "ContentService", null, null, 1, 1, 1, null, null);
                }
                else {
                    var cred = this.RSAEncrypt(credentials.QUID + ":;:" + credentials.QPWD, this.MyHSI.CurrentRSA);
                    this.SendQueued(null, "CDE_LOGIN" + cred, "ContentService", null, null, 1, 1, 1, null, null);
                }
                this.mLoginSent = true;
                this.MyConfig.Creds = new cde.TheCDECredentials();
            }
        };
        cdeWebComm.prototype.SelectMesh = function (pMeshID) {
            this.SendQueued(null, "CDE_MESHSELECT:" + pMeshID, "ContentService", null, null, 1, 1, 1, null, null);
        };
        cdeWebComm.prototype.RSAEncrypt = function (text, token) {
            if (this.MyConfig.DisableRSA)
                return text;
            if (!token || token.length === 0)
                token = this.MyHSI.CurrentRSA;
            if (!token || token.length === 0)
                return text;
            var keys = token.split(',');
            var key = new RSAKey();
            key.setPublic(keys[1], keys[0]);
            return key.encrypt(text);
        };
        cdeWebComm.prototype.GetResourceString = function (pUri, pCallback, pErrocCallback) {
            this.GetGlobalResource("/ClientBin/" + pUri, null, pCallback, pErrocCallback);
        };
        cdeWebComm.prototype.GetJSON = function (pUri, pCallback, pErrorCallback) {
            this.GetGlobalResource(pUri, null, function (pMagic, res) {
                try {
                    var tJ = JSON.parse(res);
                    pCallback(tJ);
                }
                catch (ex) {
                    if (pErrorCallback)
                        pErrorCallback(pMagic, ex);
                }
            }, function (pMagic, err) {
                if (pErrorCallback)
                    pErrorCallback(pMagic, err);
            });
        };
        cdeWebComm.prototype.GetGlobalResource = function (pResource, pAddHeader, pCallback, pErrorCallback) {
            if (window.fetch) {
                var fOptions = new Headers();
                if (pAddHeader) {
                    var tHeads = pAddHeader.split(';:;');
                    for (var i = 0; i < tHeads.length; i++) {
                        var tHed = tHeads[i].split('=');
                        if (tHed.length > 1)
                            fOptions.append(tHed[0], tHed[1]);
                    }
                }
                fetch(pResource, { headers: fOptions, cache: "no-store" }).then(function (d) {
                    if (d.ok) {
                        d.text().then(function (txt) {
                            pCallback(pResource, txt);
                        });
                    }
                    else {
                        if (pErrorCallback)
                            pErrorCallback(pResource, d.statusText);
                    }
                }).catch(function (err) {
                    if (pErrorCallback)
                        pErrorCallback(pResource, err);
                });
            }
            else {
                var xhr_2 = new XMLHttpRequest();
                xhr_2.open('GET', pResource);
                xhr_2.responseType = 'text';
                if (pAddHeader) {
                    var tHeads = pAddHeader.split(';:;');
                    var tHasAccept = false;
                    for (var i = 0; i < tHeads.length; i++) {
                        var tHed = tHeads[i].split('=');
                        if (tHed[0] === "Accept")
                            tHasAccept = true;
                        if (tHed.length > 1) {
                            xhr_2.setRequestHeader(tHed[0], tHed[1]);
                        }
                    }
                    if (!tHasAccept)
                        xhr_2.setRequestHeader("Accept", "*/*");
                }
                xhr_2.onload = function () {
                    if (xhr_2.status >= 200 && xhr_2.status < 400) {
                        if (pCallback)
                            pCallback(pResource, xhr_2.responseText);
                    }
                    else {
                        if (pErrorCallback)
                            pErrorCallback(pResource, xhr_2.status + ":" + xhr_2.statusText);
                    }
                };
                xhr_2.onerror = function () {
                    if (pErrorCallback)
                        pErrorCallback(pResource, xhr_2.status + ":" + xhr_2.statusText);
                };
                xhr_2.send();
            }
        };
        cdeWebComm.prototype.UpdateCustomSettings = function (pValues) {
            if (this.MyConfig) {
                for (var key in pValues) {
                    this.MyConfig[key] = pValues[key];
                }
                this.WriteToIDB();
            }
        };
        cdeWebComm.prototype.WriteToIDB = function () {
            if (!this.MyDB) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:WriteToIDB", 'IDB is not ready, yet', 3);
                return;
            }
            this.MyConfig.cdeTIM = new Date();
            var request = this.MyDB.transaction(['CDEJS'], 'readwrite')
                .objectStore('CDEJS')
                .put({ id: 1, config: this.MyConfig }); //whsi: this.MyHSI,
            request.onsuccess = function () {
                //cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:WriteToIDB", 'The data has been written successfully', 1);
            };
            request.onerror = function () {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:WriteToIDB", 'The data has been written failed', 3);
            };
        };
        cdeWebComm.prototype.DeleteFromIDB = function () {
            if (!this.MyDB) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:DeleteFromIDB", 'IDB is not ready, yet', 3);
                return;
            }
            var request = this.MyDB.transaction(['CDEJS'], 'readwrite')
                .objectStore('CDEJS')
                .delete(1);
            request.onsuccess = function () {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "IndexedDB:DeleteFromIDB", 'The data has been deleted', 1);
            };
        };
        return cdeWebComm;
    }(cde.TheThing));
    cdeWEB.cdeWebComm = cdeWebComm;
})(cdeWEB || (cdeWEB = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
//declare const SharedWorker: {
//    prototype: SharedWorker.SharedWorker;
//    /***
//     *
//     * @param {string} stringUrl    Pathname to JavaScript file
//     * @param {string} name         Name of the worker to execute
//     */
//    new(stringUrl: string, name?: string): SharedWorker.SharedWorker;
//};
var cdeWEB;
//declare const SharedWorker: {
//    prototype: SharedWorker.SharedWorker;
//    /***
//     *
//     * @param {string} stringUrl    Pathname to JavaScript file
//     * @param {string} name         Name of the worker to execute
//     */
//    new(stringUrl: string, name?: string): SharedWorker.SharedWorker;
//};
(function (cdeWEB) {
    var cdeWebWorkerComm = /** @class */ (function (_super) {
        __extends(cdeWebWorkerComm, _super);
        function cdeWebWorkerComm() {
            var _this = _super.call(this) || this;
            _this.MyHSI = new cde.TheWHSI();
            _this.ForceDisconnect = false;
            _this.MyConfig = null;
            _this.MyWorker = new SharedWorker("ClientBin/CDE/cdeWorker.min.js?" + document.URL);
            _this.MyWorker.port.onmessage = function (ev) {
                var _a;
                try {
                    var message = ev.data;
                    if (message.length > 1) {
                        switch (message[0]) {
                            case "CDE_NEW_LOGENTRY":
                                (_a = cde.MyEventLogger).FireEvent.apply(_a, __spreadArrays([true, message[0]], message.slice(2)));
                                break;
                            default:
                                //if ((<string>message[0]).substr(0, 4) == "GRS_") debugger;
                                _this.MyHSI = message[1];
                                cde.MyBaseAssets.MyCommStatus = _this.MyHSI;
                                _this.FireEvent.apply(_this, __spreadArrays([true, message[0]], message.slice(2)));
                                break;
                        }
                    }
                }
                catch (ee) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "WebWorker:OnMessage", ee, 3);
                }
            };
            _this.MyWorker.port.start();
            return _this;
        }
        cdeWebWorkerComm.prototype.PostToWorker = function (pArray) {
            if (this.MyWorker) {
                this.MyWorker.port.postMessage(pArray);
                return true;
            }
            return false;
        };
        Object.defineProperty(cdeWebWorkerComm.prototype, "IsConnected", {
            //Public synchronous Interface Methods returning a value
            get: function () { return this.ForceDisconnect === true ? false : this.MyHSI.IsConnected; },
            set: function (value) { this.MyHSI.IsConnected = value; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(cdeWebWorkerComm.prototype, "IsReady", {
            get: function () { return this.MyHSI.CurrentRSA !== null; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(cdeWebWorkerComm.prototype, "HasAutoLogin", {
            get: function () { return this.MyHSI.HasAutoLogin; },
            enumerable: false,
            configurable: true
        });
        cdeWebWorkerComm.prototype.RSAEncrypt = function (text, token) {
            if (!this.MyHSI || !this.MyHSI.CurrentRSA || (this.MyConfig && this.MyConfig.DisableRSA))
                return text;
            if (!token || token.length === 0)
                token = this.MyHSI.CurrentRSA;
            if (!token || token.length === 0)
                return text;
            var keys = token.split(',');
            var key = new RSAKey();
            key.setPublic(keys[1], keys[0]);
            return key.encrypt(text);
        };
        //To Here
        cdeWebWorkerComm.prototype.SetTargetRelay = function (pTarget) {
            return this.PostToWorker(["SetTargetRelay", pTarget]);
        };
        cdeWebWorkerComm.prototype.SetConfig = function (pConfig) {
            if (pConfig) {
                this.MyConfig = pConfig;
                this.PostToWorker(["SetConfig", pConfig]);
            }
        };
        cdeWebWorkerComm.prototype.StartCommunication = function (pConfig) {
            this.MyConfig = pConfig;
            this.PostToWorker(["StartCommunication", pConfig]);
        };
        cdeWebWorkerComm.prototype.SendQueued = function (pOwner, pTopic, pEngineName, pTXT, pPLS, pFLG, pQDX, pLVL, pTarget, pGRO, pSender) {
            this.PostToWorker(["SendQueued", pOwner, pTopic, pEngineName, pTXT, pPLS, pFLG, pQDX, pLVL, pTarget, pGRO, pSender]);
        };
        cdeWebWorkerComm.prototype.Subscribe = function (pTopics) {
            this.PostToWorker(["Subscribe", pTopics]);
        };
        cdeWebWorkerComm.prototype.Unsubscribe = function (pTopics) {
            this.PostToWorker(["Unsubscribe", pTopics]);
        };
        cdeWebWorkerComm.prototype.SendToNode = function (tOrg, TargetMessage, IncludeLocalNode) {
            this.PostToWorker(["SendToNode", tOrg, TargetMessage, IncludeLocalNode]);
        };
        cdeWebWorkerComm.prototype.SendToOriginator = function (sourceMessage, TargetMessage, IncludeLocalNode) {
            if (!sourceMessage)
                return;
            this.PostToWorker(["SendToOriginator", sourceMessage, TargetMessage, IncludeLocalNode]);
        };
        cdeWebWorkerComm.prototype.SendTSM = function (tTSM, pTopic, pTarget, pSender) {
            this.PostToWorker(["SendTSM", tTSM, pTopic, pTarget, pSender]);
        };
        cdeWebWorkerComm.prototype.SendToFirstNode = function (TargetMessage) {
            this.PostToWorker(["SendToFirstNode", TargetMessage]);
        };
        cdeWebWorkerComm.prototype.Logout = function () {
            this.PostToWorker(["Logout", "User logged out"]);
        };
        cdeWebWorkerComm.prototype.Login = function (credentials) {
            if (credentials)
                this.PostToWorker(["Login", credentials]);
        };
        cdeWebWorkerComm.prototype.SelectMesh = function (pMeshID) {
            if (pMeshID)
                this.PostToWorker(["SelectMesh", pMeshID]);
        };
        cdeWebWorkerComm.prototype.UpdateCustomSettings = function (pValues) {
            if (pValues) {
                this.PostToWorker(["UpdateCustomSettings", pValues]);
            }
        };
        cdeWebWorkerComm.prototype.GetResourceString = function (pResource, pCallback, pErrorCallback) {
            var _this = this;
            if (pResource && pCallback) {
                this.RegisterEvent("GRS_/ClientBin/" + pResource, function (sender) {
                    var pars = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        pars[_i - 1] = arguments[_i];
                    }
                    pCallback.apply(void 0, __spreadArrays([pResource], pars));
                    _this.UnregisterEvent("GRS_/ClientBin/" + pResource);
                });
                if (pErrorCallback) {
                    this.RegisterEvent("GRS_ERROR_/ClientBin/" + pResource, function (sender) {
                        var pars = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            pars[_i - 1] = arguments[_i];
                        }
                        pErrorCallback.apply(void 0, __spreadArrays([pResource], pars));
                        _this.UnregisterEvent("GRS_/ClientBin/" + pResource);
                        _this.UnregisterEvent("GRS_ERROR_/ClientBin/" + pResource);
                    });
                }
                this.PostToWorker(["GetResourceString", pResource]);
            }
        };
        cdeWebWorkerComm.prototype.GetGlobalResource = function (pResource, pAddHeader, pCallback, pErrorCallback) {
            var _this = this;
            if (pResource && pCallback) {
                this.RegisterEvent("GGR_" + pResource, function (sender) {
                    var pars = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        pars[_i - 1] = arguments[_i];
                    }
                    pCallback.apply(void 0, __spreadArrays([pResource], pars));
                    _this.UnregisterEvent("GGR_" + pResource);
                });
                if (pErrorCallback) {
                    this.RegisterEvent("GGR_ERROR_" + pResource, function (sender) {
                        var pars = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            pars[_i - 1] = arguments[_i];
                        }
                        pCallback.apply(void 0, __spreadArrays([pResource], pars));
                        _this.UnregisterEvent("GGR_ERROR_" + pResource);
                    });
                }
                this.PostToWorker(["GetGlobalResource", pResource, pAddHeader]);
            }
        };
        cdeWebWorkerComm.prototype.GetJSON = function (pUri, pCallback, pErrorCallback) {
            var _this = this;
            if (pUri && pCallback) {
                this.RegisterEvent("GJ_" + pUri, function (sender) {
                    var pars = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        pars[_i - 1] = arguments[_i];
                    }
                    pCallback.apply(void 0, __spreadArrays([pUri], pars));
                    _this.UnregisterEvent("GJ_" + pUri);
                    if (pErrorCallback)
                        _this.UnregisterEvent("GJ_ERROR_" + pUri);
                });
                if (pErrorCallback) {
                    this.RegisterEvent("GJ_ERROR_" + pUri, function (sender) {
                        var pars = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            pars[_i - 1] = arguments[_i];
                        }
                        pErrorCallback.apply(void 0, __spreadArrays([pUri], pars));
                        _this.UnregisterEvent("GJ_" + pUri);
                        _this.UnregisterEvent("GJ_ERROR_" + pUri);
                    });
                }
                this.PostToWorker(["GetJSONAsync", pUri]);
            }
        };
        return cdeWebWorkerComm;
    }(cde.TheThing));
    cdeWEB.cdeWebWorkerComm = cdeWebWorkerComm;
})(cdeWEB || (cdeWEB = {}));
// SPDX-FileCopyrightText: Copyright (c) 2003-2005  Tom Wu
//
// SPDX-License-Identifier: BSD-3-Clause
//Author:
//      original code by Tom Wu
//      ported to TypeScript by Chris Muench
//Language:
//      neutral in NMI - verified
//CSS Styles: none
//Dependencies: none
//Version History
//      4.109: Initial Drop
/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */
// @ts-nocheck
var dbits;
var canary = 244837814094590;
var j_lm = ((canary & 16777215) == 15715070);
function BigInteger(e, d, f) {
    if (e != null) {
        if ("number" == typeof e) {
            this.fromNumber(e, d, f);
        }
        else {
            if (d == null && "string" != typeof e) {
                this.fromString(e, 256);
            }
            else {
                this.fromString(e, d);
            }
        }
    }
}
function nbi() {
    return new BigInteger(null, null, null);
}
function am1(f, a, b, e, h, g) {
    while (--g >= 0) {
        var d = a * this[f++] + b[e] + h;
        h = Math.floor(d / 67108864);
        b[e++] = d & 67108863;
    }
    return h;
}
function am2(f, q, r, e, o, a) {
    var k = q & 32767, p = q >> 15;
    while (--a >= 0) {
        var d = this[f] & 32767;
        var g = this[f++] >> 15;
        var b = p * d + g * k;
        d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);
        o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);
        r[e++] = d & 1073741823;
    }
    return o;
}
function am3(f, q, r, e, o, a) {
    var k = q & 16383, p = q >> 14;
    while (--a >= 0) {
        var d = this[f] & 16383;
        var g = this[f++] >> 14;
        var b = p * d + g * k;
        d = k * d + ((b & 16383) << 14) + r[e] + o;
        o = (d >> 28) + (b >> 14) + p * g;
        r[e++] = d & 268435455;
    }
    return o;
}
BigInteger.prototype.am = am3;
dbits = 28;
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1 << dbits) - 1);
BigInteger.prototype.DV = (1 << dbits);
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
var DV;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv) {
    BI_RC[rr++] = vv;
}
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv;
}
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv;
}
function int2char(a) {
    return BI_RM.charAt(a);
}
function intAt(b, a) {
    var d = BI_RC[b.charCodeAt(a)];
    return (d == null) ? -1 : d;
}
function bnpCopyTo(b) {
    for (var a = this.t - 1; a >= 0; --a) {
        b[a] = this[a];
    }
    b.t = this.t;
    b.s = this.s;
}
function bnpFromInt(a) {
    this.t = 1;
    this.s = (a < 0) ? -1 : 0;
    if (a > 0) {
        this[0] = a;
    }
    else {
        if (a < -1) {
            this[0] = a + DV;
        }
        else {
            this.t = 0;
        }
    }
}
function nbv(a) {
    var b = nbi();
    b.fromInt(a);
    return b;
}
function bnpFromString(h, c) {
    var e;
    if (c == 16) {
        e = 4;
    }
    else {
        if (c == 8) {
            e = 3;
        }
        else {
            if (c == 256) {
                e = 8;
            }
            else {
                if (c == 2) {
                    e = 1;
                }
                else {
                    if (c == 32) {
                        e = 5;
                    }
                    else {
                        if (c == 4) {
                            e = 2;
                        }
                        else {
                            this.fromRadix(h, c);
                            return;
                        }
                    }
                }
            }
        }
    }
    this.t = 0;
    this.s = 0;
    var g = h.length, d = false, f = 0;
    while (--g >= 0) {
        var a = (e == 8) ? h[g] & 255 : intAt(h, g);
        if (a < 0) {
            if (h.charAt(g) == "-") {
                d = true;
            }
            continue;
        }
        d = false;
        if (f == 0) {
            this[this.t++] = a;
        }
        else {
            if (f + e > this.DB) {
                this[this.t - 1] |= (a & ((1 << (this.DB - f)) - 1)) << f;
                this[this.t++] = (a >> (this.DB - f));
            }
            else {
                this[this.t - 1] |= a << f;
            }
        }
        f += e;
        if (f >= this.DB) {
            f -= this.DB;
        }
    }
    if (e == 8 && (h[0] & 128) != 0) {
        this.s = -1;
        if (f > 0) {
            this[this.t - 1] |= ((1 << (this.DB - f)) - 1) << f;
        }
    }
    this.clamp();
    if (d) {
        BigInteger.prototype.ZERO.subTo(this, this);
    }
}
function bnpClamp() {
    var a = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == a) {
        --this.t;
    }
}
function bnToString(c) {
    if (this.s < 0) {
        return "-" + this.negate().toString(c);
    }
    var e;
    if (c == 16) {
        e = 4;
    }
    else {
        if (c == 8) {
            e = 3;
        }
        else {
            if (c == 2) {
                e = 1;
            }
            else {
                if (c == 32) {
                    e = 5;
                }
                else {
                    if (c == 4) {
                        e = 2;
                    }
                    else {
                        return this.toRadix(c);
                    }
                }
            }
        }
    }
    var g = (1 << e) - 1, l, a = false, h = "", f = this.t;
    var j = this.DB - (f * this.DB) % e;
    if (f-- > 0) {
        if (j < this.DB && (l = this[f] >> j) > 0) {
            a = true;
            h = int2char(l);
        }
        while (f >= 0) {
            if (j < e) {
                l = (this[f] & ((1 << j) - 1)) << (e - j);
                l |= this[--f] >> (j += this.DB - e);
            }
            else {
                l = (this[f] >> (j -= e)) & g;
                if (j <= 0) {
                    j += this.DB;
                    --f;
                }
            }
            if (l > 0) {
                a = true;
            }
            if (a) {
                h += int2char(l);
            }
        }
    }
    return a ? h : "0";
}
function bnNegate() {
    var a = nbi();
    BigInteger.prototype.ZERO.subTo(this, a);
    return a;
}
function bnAbs() {
    return (this.s < 0) ? this.negate() : this;
}
function bnCompareTo(b) {
    var d = this.s - b.s;
    if (d != 0) {
        return d;
    }
    var c = this.t;
    d = c - b.t;
    if (d != 0) {
        return d;
    }
    while (--c >= 0) {
        if ((d = this[c] - b[c]) != 0) {
            return d;
        }
    }
    return 0;
}
function nbits(a) {
    var c = 1, b;
    if ((b = a >>> 16) != 0) {
        a = b;
        c += 16;
    }
    if ((b = a >> 8) != 0) {
        a = b;
        c += 8;
    }
    if ((b = a >> 4) != 0) {
        a = b;
        c += 4;
    }
    if ((b = a >> 2) != 0) {
        a = b;
        c += 2;
    }
    if ((b = a >> 1) != 0) {
        a = b;
        c += 1;
    }
    return c;
}
function bnBitLength() {
    if (this.t <= 0) {
        return 0;
    }
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
}
function bnpDLShiftTo(c, b) {
    var a;
    for (a = this.t - 1; a >= 0; --a) {
        b[a + c] = this[a];
    }
    for (a = c - 1; a >= 0; --a) {
        b[a] = 0;
    }
    b.t = this.t + c;
    b.s = this.s;
}
function bnpDRShiftTo(c, b) {
    for (var a = c; a < this.t; ++a) {
        b[a - c] = this[a];
    }
    b.t = Math.max(this.t - c, 0);
    b.s = this.s;
}
function bnpLShiftTo(j, e) {
    var b = j % this.DB;
    var a = this.DB - b;
    var g = (1 << a) - 1;
    var f = Math.floor(j / this.DB), h = (this.s << b) & this.DM, d;
    for (d = this.t - 1; d >= 0; --d) {
        e[d + f + 1] = (this[d] >> a) | h;
        h = (this[d] & g) << b;
    }
    for (d = f - 1; d >= 0; --d) {
        e[d] = 0;
    }
    e[f] = h;
    e.t = this.t + f + 1;
    e.s = this.s;
    e.clamp();
}
function bnpRShiftTo(g, d) {
    d.s = this.s;
    var e = Math.floor(g / this.DB);
    if (e >= this.t) {
        d.t = 0;
        return;
    }
    var b = g % this.DB;
    var a = this.DB - b;
    var f = (1 << b) - 1;
    d[0] = this[e] >> b;
    for (var c = e + 1; c < this.t; ++c) {
        d[c - e - 1] |= (this[c] & f) << a;
        d[c - e] = this[c] >> b;
    }
    if (b > 0) {
        d[this.t - e - 1] |= (this.s & f) << a;
    }
    d.t = this.t - e;
    d.clamp();
}
function bnpSubTo(d, f) {
    var e = 0, g = 0, b = Math.min(d.t, this.t);
    while (e < b) {
        g += this[e] - d[e];
        f[e++] = g & this.DM;
        g >>= this.DB;
    }
    if (d.t < this.t) {
        g -= d.s;
        while (e < this.t) {
            g += this[e];
            f[e++] = g & this.DM;
            g >>= this.DB;
        }
        g += this.s;
    }
    else {
        g += this.s;
        while (e < d.t) {
            g -= d[e];
            f[e++] = g & this.DM;
            g >>= this.DB;
        }
        g -= d.s;
    }
    f.s = (g < 0) ? -1 : 0;
    if (g < -1) {
        f[e++] = this.DV + g;
    }
    else {
        if (g > 0) {
            f[e++] = g;
        }
    }
    f.t = e;
    f.clamp();
}
function bnpMultiplyTo(c, e) {
    var b = this.abs(), f = c.abs();
    var d = b.t;
    e.t = d + f.t;
    while (--d >= 0) {
        e[d] = 0;
    }
    for (d = 0; d < f.t; ++d) {
        e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
    }
    e.s = 0;
    e.clamp();
    if (this.s != c.s) {
        BigInteger.prototype.ZERO.subTo(e, e);
    }
}
function bnpSquareTo(d) {
    var a = this.abs();
    var b = d.t = 2 * a.t;
    while (--b >= 0) {
        d[b] = 0;
    }
    for (b = 0; b < a.t - 1; ++b) {
        var e = a.am(b, a[b], d, 2 * b, 0, 1);
        if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
            d[b + a.t] -= a.DV;
            d[b + a.t + 1] = 1;
        }
    }
    if (d.t > 0) {
        d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
    }
    d.s = 0;
    d.clamp();
}
function bnpDivRemTo(n, h, g) {
    var w = n.abs();
    if (w.t <= 0) {
        return;
    }
    var k = this.abs();
    if (k.t < w.t) {
        if (h != null) {
            h.fromInt(0);
        }
        if (g != null) {
            this.copyTo(g);
        }
        return;
    }
    if (g == null) {
        g = nbi();
    }
    var d = nbi(), a = this.s, l = n.s;
    var v = this.DB - nbits(w[w.t - 1]);
    if (v > 0) {
        w.lShiftTo(v, d);
        k.lShiftTo(v, g);
    }
    else {
        w.copyTo(d);
        k.copyTo(g);
    }
    var p = d.t;
    var b = d[p - 1];
    if (b == 0) {
        return;
    }
    var o = b * (1 << this.F1) + ((p > 1) ? d[p - 2] >> this.F2 : 0);
    var B = this.FV / o, A = (1 << this.F1) / o, x = 1 << this.F2;
    var u = g.t, s = u - p, f = (h == null) ? nbi() : h;
    d.dlShiftTo(s, f);
    if (g.compareTo(f) >= 0) {
        g[g.t++] = 1;
        g.subTo(f, g);
    }
    BigInteger.prototype.ONE.dlShiftTo(p, f);
    f.subTo(d, d);
    while (d.t < p) {
        d[d.t++] = 0;
    }
    while (--s >= 0) {
        var c = (g[--u] == b) ? this.DM : Math.floor(g[u] * B + (g[u - 1] + x) * A);
        if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
            d.dlShiftTo(s, f);
            g.subTo(f, g);
            while (g[u] < --c) {
                g.subTo(f, g);
            }
        }
    }
    if (h != null) {
        g.drShiftTo(p, h);
        if (a != l) {
            BigInteger.prototype.ZERO.subTo(h, h);
        }
    }
    g.t = p;
    g.clamp();
    if (v > 0) {
        g.rShiftTo(v, g);
    }
    if (a < 0) {
        BigInteger.prototype.ZERO.subTo(g, g);
    }
}
function bnMod(b) {
    var c = nbi();
    this.abs().divRemTo(b, null, c);
    if (this.s < 0 && c.compareTo(BigInteger.prototype.ZERO) > 0) {
        b.subTo(c, c);
    }
    return c;
}
function Classic(a) {
    this.m = a;
}
function cConvert(a) {
    if (a.s < 0 || a.compareTo(this.m) >= 0) {
        return a.mod(this.m);
    }
    else {
        return a;
    }
}
function cRevert(a) {
    return a;
}
function cReduce(a) {
    a.divRemTo(this.m, null, a);
}
function cMulTo(a, c, b) {
    a.multiplyTo(c, b);
    this.reduce(b);
}
function cSqrTo(a, b) {
    a.squareTo(b);
    this.reduce(b);
}
Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;
function bnpInvDigit() {
    if (this.t < 1) {
        return 0;
    }
    var a = this[0];
    if ((a & 1) == 0) {
        return 0;
    }
    var b = a & 3;
    b = (b * (2 - (a & 15) * b)) & 15;
    b = (b * (2 - (a & 255) * b)) & 255;
    b = (b * (2 - (((a & 65535) * b) & 65535))) & 65535;
    b = (b * (2 - a * b % this.DV)) % this.DV;
    return (b > 0) ? this.DV - b : -b;
}
function Montgomery(a) {
    this.m = a;
    this.mp = a.invDigit();
    this.mpl = this.mp & 32767;
    this.mph = this.mp >> 15;
    this.um = (1 << (a.DB - 15)) - 1;
    this.mt2 = 2 * a.t;
}
function montConvert(a) {
    var b = nbi();
    a.abs().dlShiftTo(this.m.t, b);
    b.divRemTo(this.m, null, b);
    if (a.s < 0 && b.compareTo(BigInteger.prototype.ZERO) > 0) {
        this.m.subTo(b, b);
    }
    return b;
}
function montRevert(a) {
    var b = nbi();
    a.copyTo(b);
    this.reduce(b);
    return b;
}
function montReduce(a) {
    while (a.t <= this.mt2) {
        a[a.t++] = 0;
    }
    for (var c = 0; c < this.m.t; ++c) {
        var b = a[c] & 32767;
        var d = (b * this.mpl + (((b * this.mph + (a[c] >> 15) * this.mpl) & this.um) << 15)) & a.DM;
        b = c + this.m.t;
        a[b] += this.m.am(0, d, a, c, 0, this.m.t);
        while (a[b] >= a.DV) {
            a[b] -= a.DV;
            a[++b]++;
        }
    }
    a.clamp();
    a.drShiftTo(this.m.t, a);
    if (a.compareTo(this.m) >= 0) {
        a.subTo(this.m, a);
    }
}
function montSqrTo(a, b) {
    a.squareTo(b);
    this.reduce(b);
}
function montMulTo(a, c, b) {
    a.multiplyTo(c, b);
    this.reduce(b);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
function bnpIsEven() {
    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;
}
function bnpExp(h, j) {
    if (h > 4294967295 || h < 1) {
        return BigInteger.prototype.ONE;
    }
    var f = nbi(), a = nbi(), d = j.convert(this), c = nbits(h) - 1;
    d.copyTo(f);
    while (--c >= 0) {
        j.sqrTo(f, a);
        if ((h & (1 << c)) > 0) {
            j.mulTo(a, d, f);
        }
        else {
            var b = f;
            f = a;
            a = b;
        }
    }
    return j.revert(f);
}
function bnModPowInt(b, a) {
    var c;
    if (b < 256 || a.isEven()) {
        c = new Classic(a);
    }
    else {
        c = new Montgomery(a);
    }
    return this.exp(b, c);
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;
BigInteger.prototype.ZERO = nbv(0);
BigInteger.prototype.ONE = nbv(1);
function Arcfour() {
    this.i = 0;
    this.j = 0;
    this.S = new Array();
}
function ARC4init(d) {
    var c, a, b;
    for (c = 0; c < 256; ++c) {
        this.S[c] = c;
    }
    a = 0;
    for (c = 0; c < 256; ++c) {
        a = (a + this.S[c] + d[c % d.length]) & 255;
        b = this.S[c];
        this.S[c] = this.S[a];
        this.S[a] = b;
    }
    this.i = 0;
    this.j = 0;
}
function ARC4next() {
    var a;
    this.i = (this.i + 1) & 255;
    this.j = (this.j + this.S[this.i]) & 255;
    a = this.S[this.i];
    this.S[this.i] = this.S[this.j];
    this.S[this.j] = a;
    return this.S[(a + this.S[this.i]) & 255];
}
Arcfour.prototype.init = ARC4init;
Arcfour.prototype.next = ARC4next;
function prng_newstate() {
    return new Arcfour();
}
var rng_psize = 256;
var rng_state;
var rng_pool;
var rng_pptr;
function rng_seed_int(a) {
    rng_pool[rng_pptr++] ^= a & 255;
    rng_pool[rng_pptr++] ^= (a >> 8) & 255;
    rng_pool[rng_pptr++] ^= (a >> 16) & 255;
    rng_pool[rng_pptr++] ^= (a >> 24) & 255;
    if (rng_pptr >= rng_psize) {
        rng_pptr -= rng_psize;
    }
}
function rng_seed_time() {
    rng_seed_int(new Date().getTime());
}
if (rng_pool == null) {
    rng_pool = new Array();
    rng_pptr = 0;
    var t;
    while (rng_pptr < rng_psize) {
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
    }
    rng_pptr = 0;
    rng_seed_time();
}
function rng_get_byte() {
    if (rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
            rng_pool[rng_pptr] = 0;
        }
        rng_pptr = 0;
    }
    return rng_state.next();
}
function rng_get_bytes(b) {
    var a;
    for (a = 0; a < b.length; ++a) {
        b[a] = rng_get_byte();
    }
}
function SecureRandom() { }
SecureRandom.prototype.nextBytes = rng_get_bytes;
function parseBigInt(b, a) {
    return new BigInteger(b, a, null);
}
function linebrk(c, d) {
    var a = "";
    var b = 0;
    while (b + d < c.length) {
        a += c.substring(b, b + d) + "\n";
        b += d;
    }
    return a + c.substring(b, c.length);
}
function byte2Hex(a) {
    if (a < 16) {
        return "0" + a.toString(16);
    }
    else {
        return a.toString(16);
    }
}
function pkcs1pad2(e, h) {
    if (h < e.length + 11) {
        return null;
    }
    var g = new Array();
    var d = e.length - 1;
    while (d >= 0 && h > 0) {
        var f = e.charCodeAt(d--);
        if (f < 128) {
            g[--h] = f;
        }
        else {
            if ((f > 127) && (f < 2048)) {
                g[--h] = (f & 63) | 128;
                g[--h] = (f >> 6) | 192;
            }
            else {
                g[--h] = (f & 63) | 128;
                g[--h] = ((f >> 6) & 63) | 128;
                g[--h] = (f >> 12) | 224;
            }
        }
    }
    g[--h] = 0;
    var b = new SecureRandom();
    var a = new Array();
    while (h > 2) {
        a[0] = 0;
        while (a[0] == 0) {
            b.nextBytes(a);
        }
        g[--h] = a[0];
    }
    g[--h] = 2;
    g[--h] = 0;
    return new BigInteger(g, null, null);
}
function RSAKey() {
    this.n = null;
    this.e = 0;
    this.d = null;
    this.p = null;
    this.q = null;
    this.dmp1 = null;
    this.dmq1 = null;
    this.coeff = null;
}
function RSASetPublic(b, a) {
    if (b != null && a != null && b.length > 0 && a.length > 0) {
        this.n = parseBigInt(b, 16);
        this.e = parseInt(a, 16);
    }
}
function RSADoPublic(a) {
    return a.modPowInt(this.e, this.n);
}
function RSAEncrypt(d) {
    var a = pkcs1pad2(d, (this.n.bitLength() + 7) >> 3);
    if (a == null) {
        return null;
    }
    var e = this.doPublic(a);
    if (e == null) {
        return null;
    }
    var b = e.toString(16);
    if ((b.length & 1) == 0) {
        return b;
    }
    else {
        return "0" + b;
    }
}
RSAKey.prototype.doPublic = RSADoPublic;
RSAKey.prototype.setPublic = RSASetPublic;
RSAKey.prototype.encrypt = RSAEncrypt;
//module.exports = RSAKey; //LOCAL: Fix
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeSpeech;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeSpeech) {
    cdeSpeech.synth = window.speechSynthesis;
    function talk(text, lang, voiceIdx) {
        if (lang === void 0) { lang = "en"; }
        if (voiceIdx === void 0) { voiceIdx = 0; }
        if (!text)
            return;
        try {
            if (cdeSpeech.synth.speaking) {
                return;
            }
            var utterThis = new SpeechSynthesisUtterance(text);
            //utterThis.onend = function (event) {
            //    console.log('talking done');
            //}
            //utterThis.onerror = function (event) {
            //    console.error('Talking error');
            //}
            var voices = cdeSpeech.synth.getVoices();
            //ES5:
            var v = voices[voiceIdx];
            for (var t_2 in voices) {
                if (voices[t_2].lang.toLowerCase().startsWith(lang.toLowerCase())) {
                    v = voices[t_2];
                    break;
                }
            }
            //ES6: const v = voices.filter(x => x.lang.includes(lang))[voiceIdx];
            utterThis.voice = v;
            //utterThis.pitch = pitch.value;
            //utterThis.rate = rate.value;
            cdeSpeech.synth.speak(utterThis);
        }
        catch (exception) {
            //ignored
        }
    }
    cdeSpeech.talk = talk;
})(cdeSpeech || (cdeSpeech = {}));
// SPDX-FileCopyrightText: Eli Grey
//
// SPDX-License-Identifier: MIT
/* original code: FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.8
 * 2018 - 03 - 22 14: 03: 47
 *
 * By Eli Grey, https://eligrey.com
 * License: MIT
 * See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 * @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js */
//
//      ported to TypeScript by Chris Muench
//Language:
//      neutral in NMI - verified
//CSS Styles: none
//Dependencies: none
//Version History
//      4.109: Initial Drop
//////////////////////////////////////////////////////////////////////////////
var cde;
// SPDX-FileCopyrightText: Eli Grey
//
// SPDX-License-Identifier: MIT
/* original code: FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.8
 * 2018 - 03 - 22 14: 03: 47
 *
 * By Eli Grey, https://eligrey.com
 * License: MIT
 * See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 * @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js */
//
//      ported to TypeScript by Chris Muench
//Language:
//      neutral in NMI - verified
//CSS Styles: none
//Dependencies: none
//Version History
//      4.109: Initial Drop
//////////////////////////////////////////////////////////////////////////////
(function (cde) {
    var cdeFileSaver = /** @class */ (function (_super) {
        __extends(cdeFileSaver, _super);
        function cdeFileSaver() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.blob = null;
            _this.force = false;
            _this.readyState = "INIT";
            _this.isSafari = false;
            _this.isChromeIos = false;
            _this.save_link = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
            _this.can_use_save_link = "download" in _this.save_link;
            //MySetImmediate = window.setTimeout; //window.setImmediate ||
            _this.force_saveable_type = "application/octet-stream";
            _this.arbitrary_revoke_timeout = 1000 * 40; // in ms
            return _this;
        }
        cdeFileSaver.prototype.SaveAs = function (blob, name, noAutoBom) {
            var _this = this;
            if (window.navigator && window.navigator.msSaveOrOpenBlob) { //IE11+
                window.navigator.msSaveOrOpenBlob(blob, name);
                return;
            }
            if (cde.IsIE()) {
                if (cdeNMI.MyToast)
                    cdeNMI.MyToast.ShowToastMessage("Sorry...but IE does not support saving files!");
                return;
            }
            if (!noAutoBom) {
                this.blob = this.AutoBom(blob);
            }
            else
                this.blob = blob;
            var view = window;
            this.isSafari = /constructor/i.test(view.HTMLElement) || view.safari;
            this.isChromeIos = /CriOS\/[\d]+/.test(navigator.userAgent);
            this.force = blob.type === this.force_saveable_type;
            try {
                if (this.can_use_save_link) {
                    this.ObjectUrl = this.GetURL().createObjectURL(blob);
                    window.setTimeout(function () {
                        _this.save_link.href = _this.ObjectUrl;
                        _this.save_link.download = name;
                        _this.click(_this.save_link);
                        _this.DispatchAll();
                        _this.revoke(_this.ObjectUrl);
                        _this.readyState = "DONE";
                    }, 0);
                    return;
                }
            }
            catch (ex) {
                //ignored
            }
            this.FsError();
        };
        cdeFileSaver.prototype.GetURL = function () {
            return window.URL || window.webkitURL || window;
        };
        ;
        cdeFileSaver.prototype.click = function (node) {
            var event = new MouseEvent("click");
            node.dispatchEvent(event);
        };
        cdeFileSaver.prototype.revoker = function (file) {
            if (typeof file === "string") { // file is an object URL
                this.GetURL().revokeObjectURL(file);
            }
            else { // file is a File
                file.remove();
            }
        };
        // the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
        cdeFileSaver.prototype.revoke = function (file) {
            var _this = this;
            setTimeout(function () { return _this.revoker(file); }, this.arbitrary_revoke_timeout);
        };
        cdeFileSaver.prototype.AutoBom = function (blob) {
            // prepend BOM for UTF-8 XML and text/* types (including HTML)
            // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
            if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type });
            }
            return blob;
        };
        cdeFileSaver.prototype.dispatch = function (filesaver, eventTypes, event) {
            eventTypes = [].concat(eventTypes);
            var i = eventTypes.length;
            while (i--) {
                var listener = filesaver["on" + eventTypes[i]];
                if (typeof listener === "function") {
                    try {
                        listener.call(filesaver, event || filesaver);
                    }
                    catch (ex) {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "FileSaver", "dispatch failed: " + ex + ":" + ex.stack);
                    }
                }
            }
        };
        cdeFileSaver.prototype.DispatchAll = function () {
            this.dispatch(this, "writestart progress write writeend".split(" "), null);
        };
        // First try a.download, then web filesystem, then object URLs
        cdeFileSaver.prototype.FsError = function () {
            var _this = this;
            if ((this.isChromeIos || (this.force && this.isSafari)) && window.FileReader) {
                // Safari doesn't allow downloading of blob urls
                var reader_1 = new FileReader();
                reader_1.onloadend = function () {
                    var url = (_this.isChromeIos ? reader_1.result : reader_1.result.replace(/^data:[^;]*;/, 'data:attachment/file;'));
                    var popup = window.open(url, '_blank');
                    if (!popup)
                        window.location.href = url;
                    url = undefined; // release reference before dispatching
                    _this.readyState = "DONE";
                    _this.DispatchAll();
                };
                reader_1.readAsDataURL(this.blob);
                this.readyState = "INIT";
                return;
            }
            // don't create more object URLs than needed
            if (!this.ObjectUrl) {
                this.ObjectUrl = this.GetURL().createObjectURL(this.blob);
            }
            if (this.force) {
                window.location.href = this.ObjectUrl;
            }
            else {
                var opened = void 0;
                try {
                    opened = window.open(this.ObjectUrl, "_blank");
                }
                catch (_a) {
                    //ignored
                }
                if (!opened) {
                    // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                    window.location.href = this.ObjectUrl;
                }
            }
            this.readyState = "DONE";
            this.DispatchAll();
            this.revoke(this.ObjectUrl);
        };
        return cdeFileSaver;
    }(cde.TheDataBase));
    cde.cdeFileSaver = cdeFileSaver;
})(cde || (cde = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    //////////////////////////////////////////////////////////////////////////////
    /// Interfaces
    //////////////////////////////////////////////////////////////////////////////
    cdeNMI.MyNMIModels = new Array();
    cdeNMI.MyNMINUITags = new Array();
    cdeNMI.MyNMIThingEvents = [];
    cdeNMI.MyTouchOverlay = null;
    cdeNMI.IsMouseDown = false;
    cdeNMI.Key13Event = null;
    cdeNMI.Key27Event = null;
    cdeNMI.DisableKey36Event = false;
    cdeNMI.IsInEdit = false;
    cdeNMI.eTheNMIEngine = "NMIService"; //Main NMI Service Engine
    //////////////////////////////////////////////////////////////////////////////
    /// Enums
    //////////////////////////////////////////////////////////////////////////////
    var cdeControlType;
    (function (cdeControlType) {
        cdeControlType[cdeControlType["BaseControl"] = 0] = "BaseControl";
        /* NMI Control Types        BaseControl         Done?
          ----------------------------------------------------------------------*/
        cdeControlType[cdeControlType["SingleEnded"] = 1] = "SingleEnded";
        cdeControlType[cdeControlType["ComboBox"] = 2] = "ComboBox";
        cdeControlType[cdeControlType["Radio"] = 3] = "Radio";
        cdeControlType[cdeControlType["SingleCheck"] = 4] = "SingleCheck";
        cdeControlType[cdeControlType["TextArea"] = 5] = "TextArea";
        cdeControlType[cdeControlType["YesNo"] = 6] = "YesNo";
        //YesNoNa = 7,//               ctrlComboBox      RETIRED
        cdeControlType[cdeControlType["Time"] = 8] = "Time";
        cdeControlType[cdeControlType["TimeSpan"] = 9] = "TimeSpan";
        cdeControlType[cdeControlType["Password"] = 10] = "Password";
        //SubmitButton = 11,//         ctrlTileButton      YES        RETIRED! USE ctrlTileButton   
        cdeControlType[cdeControlType["Number"] = 12] = "Number";
        cdeControlType[cdeControlType["Region"] = 13] = "Region";
        cdeControlType[cdeControlType["Country"] = 14] = "Country";
        cdeControlType[cdeControlType["TrueFalse"] = 15] = "TrueFalse";
        cdeControlType[cdeControlType["eMail"] = 16] = "eMail";
        cdeControlType[cdeControlType["ComboOption"] = 17] = "ComboOption";
        cdeControlType[cdeControlType["Month"] = 18] = "Month";
        cdeControlType[cdeControlType["FormButton"] = 19] = "FormButton";
        cdeControlType[cdeControlType["SmartLabel"] = 20] = "SmartLabel";
        cdeControlType[cdeControlType["DateTime"] = 21] = "DateTime";
        cdeControlType[cdeControlType["TileButton"] = 22] = "TileButton";
        cdeControlType[cdeControlType["Table"] = 23] = "Table";
        cdeControlType[cdeControlType["CheckField"] = 24] = "CheckField";
        cdeControlType[cdeControlType["RadioGrid"] = 25] = "RadioGrid";
        cdeControlType[cdeControlType["Screen"] = 26] = "Screen";
        cdeControlType[cdeControlType["TableCell"] = 27] = "TableCell";
        cdeControlType[cdeControlType["TileEntry"] = 28] = "TileEntry";
        cdeControlType[cdeControlType["Picture"] = 29] = "Picture";
        cdeControlType[cdeControlType["CanvasDraw"] = 30] = "CanvasDraw";
        cdeControlType[cdeControlType["URL"] = 31] = "URL";
        cdeControlType[cdeControlType["Curreny"] = 32] = "Curreny";
        cdeControlType[cdeControlType["Slider"] = 33] = "Slider";
        cdeControlType[cdeControlType["BarChart"] = 34] = "BarChart";
        cdeControlType[cdeControlType["Toast"] = 35] = "Toast";
        cdeControlType[cdeControlType["TouchDraw"] = 36] = "TouchDraw";
        cdeControlType[cdeControlType["Popup"] = 37] = "Popup";
        cdeControlType[cdeControlType["DrawOverlay"] = 38] = "DrawOverlay";
        //Accordion = 39, //           ctrlAccordion      RETIRED!!!
        cdeControlType[cdeControlType["DropUploader"] = 40] = "DropUploader";
        cdeControlType[cdeControlType["RevealButton"] = 41] = "RevealButton";
        cdeControlType[cdeControlType["PinButton"] = 42] = "PinButton";
        //CenteredTable = 43,//       ctrlCenteredTable   RETIRED!!!
        cdeControlType[cdeControlType["Dashboard"] = 44] = "Dashboard";
        cdeControlType[cdeControlType["FormView"] = 45] = "FormView";
        cdeControlType[cdeControlType["TouchOverlay"] = 46] = "TouchOverlay";
        cdeControlType[cdeControlType["MuTLock"] = 47] = "MuTLock";
        cdeControlType[cdeControlType["ProgressBar"] = 48] = "ProgressBar";
        cdeControlType[cdeControlType["TileGroup"] = 49] = "TileGroup";
        cdeControlType[cdeControlType["VideoViewer"] = 50] = "VideoViewer";
        cdeControlType[cdeControlType["UserControl"] = 51] = "UserControl";
        cdeControlType[cdeControlType["TableRow"] = 52] = "TableRow";
        cdeControlType[cdeControlType["IPAddress"] = 53] = "IPAddress";
        cdeControlType[cdeControlType["Shape"] = 54] = "Shape";
        cdeControlType[cdeControlType["CollapsibleGroup"] = 55] = "CollapsibleGroup";
        cdeControlType[cdeControlType["AboutButton"] = 56] = "AboutButton";
        cdeControlType[cdeControlType["StatusLight"] = 57] = "StatusLight";
        cdeControlType[cdeControlType["FacePlate"] = 58] = "FacePlate";
        //New controls in 4.1
        cdeControlType[cdeControlType["LoginScreen"] = 59] = "LoginScreen";
        cdeControlType[cdeControlType["ShapeRecognizer"] = 60] = "ShapeRecognizer";
        cdeControlType[cdeControlType["ScreenManager"] = 61] = "ScreenManager";
        cdeControlType[cdeControlType["LogoButton"] = 62] = "LogoButton";
        cdeControlType[cdeControlType["ThingPicker"] = 63] = "ThingPicker";
        cdeControlType[cdeControlType["ImageSlider"] = 64] = "ImageSlider";
        cdeControlType[cdeControlType["CircularGauge"] = 65] = "CircularGauge";
        cdeControlType[cdeControlType["SmartGauge"] = 66] = "SmartGauge";
        cdeControlType[cdeControlType["IFrameView"] = 67] = "IFrameView";
        cdeControlType[cdeControlType["PropertyPicker"] = 68] = "PropertyPicker";
        cdeControlType[cdeControlType["PropertyPickerCtrl"] = 69] = "PropertyPickerCtrl";
        cdeControlType[cdeControlType["ToolTip"] = 70] = "ToolTip";
        cdeControlType[cdeControlType["ComboLookup"] = 71] = "ComboLookup";
        cdeControlType[cdeControlType["UserMenu"] = 72] = "UserMenu";
        cdeControlType[cdeControlType["MeshPicker"] = 73] = "MeshPicker";
        cdeControlType[cdeControlType["HashIcon"] = 74] = "HashIcon";
        cdeControlType[cdeControlType["CertPicker"] = 75] = "CertPicker";
        cdeControlType[cdeControlType["DeviceTypePicker"] = 76] = "DeviceTypePicker";
    })(cdeControlType = cdeNMI.cdeControlType || (cdeNMI.cdeControlType = {}));
    var cdeInputEventType;
    (function (cdeInputEventType) {
        cdeInputEventType[cdeInputEventType["UNKOWN"] = 0] = "UNKOWN";
        cdeInputEventType[cdeInputEventType["MOUSE"] = 1] = "MOUSE";
        cdeInputEventType[cdeInputEventType["TOUCH"] = 2] = "TOUCH";
        cdeInputEventType[cdeInputEventType["PEN"] = 3] = "PEN";
        cdeInputEventType[cdeInputEventType["ERASER"] = 4] = "ERASER";
        cdeInputEventType[cdeInputEventType["LEAP"] = 5] = "LEAP";
        cdeInputEventType[cdeInputEventType["KEYBOARD"] = 6] = "KEYBOARD";
        cdeInputEventType[cdeInputEventType["KINECT"] = 7] = "KINECT";
    })(cdeInputEventType = cdeNMI.cdeInputEventType || (cdeNMI.cdeInputEventType = {}));
    var cdeInputEvent;
    (function (cdeInputEvent) {
        cdeInputEvent[cdeInputEvent["IDLE"] = 0] = "IDLE";
        cdeInputEvent[cdeInputEvent["START"] = 1] = "START";
        cdeInputEvent[cdeInputEvent["MOVE"] = 2] = "MOVE";
        cdeInputEvent[cdeInputEvent["END"] = 3] = "END";
    })(cdeInputEvent = cdeNMI.cdeInputEvent || (cdeNMI.cdeInputEvent = {}));
    cdeNMI.TheEscapeMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        "\"": "&quot;",
        "'": '&#39',
    };
    //////////////////////////////////////////////////////////////////////////////
    /// Data Models
    //////////////////////////////////////////////////////////////////////////////
    /**
    ThePlanarImage is used to transfer blobs of Image Information to the C-DEngine NMI UX
    */
    var ThePlanarImage = /** @class */ (function () {
        function ThePlanarImage() {
        }
        return ThePlanarImage;
    }());
    cdeNMI.ThePlanarImage = ThePlanarImage;
    var TheScreenTrans = /** @class */ (function () {
        function TheScreenTrans() {
        }
        return TheScreenTrans;
    }());
    cdeNMI.TheScreenTrans = TheScreenTrans;
    var TheFLDOR = /** @class */ (function () {
        function TheFLDOR() {
        }
        return TheFLDOR;
    }());
    cdeNMI.TheFLDOR = TheFLDOR;
    var TheFOR = /** @class */ (function (_super) {
        __extends(TheFOR, _super);
        function TheFOR() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheFOR;
    }(cde.TheMetaDataBase));
    cdeNMI.TheFOR = TheFOR;
    var TheNMIScene = /** @class */ (function (_super) {
        __extends(TheNMIScene, _super);
        function TheNMIScene() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheNMIScene;
    }(cde.TheMetaDataBase));
    cdeNMI.TheNMIScene = TheNMIScene;
    var TheNMIResource = /** @class */ (function () {
        function TheNMIResource() {
        }
        return TheNMIResource;
    }());
    cdeNMI.TheNMIResource = TheNMIResource;
    var TheKey = /** @class */ (function () {
        function TheKey(pEvt) {
            if (!pEvt)
                return;
            this.altKey = pEvt.altKey;
            this.Cchar = pEvt.char;
            this.charCode = pEvt.charCode;
            this.ctrlKey = pEvt.ctrlKey;
            this.key = pEvt.key;
            this.keyCode = pEvt.keyCode;
            //this.locale = pEvt.locale;
            this.location = pEvt.location;
            this.metaKey = pEvt.metaKey;
            this.repeat = pEvt.repeat;
            this.shiftKey = pEvt.shiftKey;
            this.which = pEvt.which;
            //this.JOYSTICK = pEvt.DOM_KEY_LOCATION_JOYSTICK;
            this.LEFT = pEvt.DOM_KEY_LOCATION_LEFT;
            //this.MOBILE = pEvt.DOM_KEY_LOCATION_MOBILE;
            this.NUMPAD = pEvt.DOM_KEY_LOCATION_NUMPAD;
            this.STANDARD = pEvt.DOM_KEY_LOCATION_STANDARD;
            this.RIGHT = pEvt.DOM_KEY_LOCATION_RIGHT;
            this.eventPhase = pEvt.eventPhase;
            this.isTrusted = pEvt.isTrusted;
            this.returnValue = pEvt.returnValue;
            this.timeStamp = pEvt.timeStamp;
            this.type = pEvt.type;
        }
        return TheKey;
    }());
    cdeNMI.TheKey = TheKey;
    var TheDrawingPoint = /** @class */ (function () {
        function TheDrawingPoint(x, y) {
            this.x = x ? x : 0;
            this.y = y ? y : 0;
            this.z = 0;
            this.t = 0;
        }
        TheDrawingPoint.prototype.toString = function () {
            return "X,Y,Z,T:" + this.x + "," + this.y + "," + this.z + ":t=" + this.t;
        };
        return TheDrawingPoint;
    }());
    cdeNMI.TheDrawingPoint = TheDrawingPoint;
    var ThePointer = /** @class */ (function () {
        function ThePointer(pEle, pID, pX, pY, pZ, pStroke, pPointerType, pPointerEvent, pButtons) {
            this.Identifier = pID;
            this.Position = new TheDrawingPoint();
            this.Position.x = pX;
            this.Position.y = pY;
            this.Position.z = pZ;
            this.Position.t = pStroke;
            this.Shift = new TheDrawingPoint();
            this.AdjPosition = new TheDrawingPoint();
            this.StartPosition = new TheDrawingPoint();
            this.StartPosition.x = pX;
            this.StartPosition.y = pY;
            this.StartPosition.z = pZ;
            this.StartPosition.t = pStroke;
            this.pointerType = pPointerType;
            if (pPointerEvent)
                this.pointerEvent = pPointerEvent;
            else
                this.pointerEvent = cdeInputEvent.IDLE;
            this.Pressure = pStroke;
            this.Buttons = pButtons;
            this.Ele2DocPosition = ThePointer.ComputeDocumentToElementDelta(pEle);
            this.Update(pEle, this.Position);
        }
        ThePointer.prototype.Update = function (pControl, pPointer) {
            this.Shift.x = pPointer.x - this.Position.x;
            this.Shift.y = pPointer.y - this.Position.y;
            this.Shift.z = pPointer.z - this.Position.z;
            this.Shift.t = pPointer.t - this.Position.t;
            this.Position.x = pPointer.x;
            this.Position.y = pPointer.y;
            this.Position.z = pPointer.z;
            this.Position.t = pPointer.t;
            this.AdjPosition = ThePointer.targetRelativeX(pControl, this.Position, this.Ele2DocPosition);
            this.AdjPosition.t = pPointer.t;
            this.Pressure = pPointer.t;
            this.IsOnObject = true; // ThePointer.IsOnObject(pControl, this.Position, this.Ele2DocPosition); //V4.110: TODO find better algo..does not work right
        };
        ThePointer.IsOnObject = function (tControl, t, pDocumentDelta) {
            var elementMouseIsOver = document.elementFromPoint(t.x, t.y);
            return (elementMouseIsOver === tControl);
        };
        ThePointer.targetRelativeX = function (pControl, p, documentToTargetDelta) {
            var tRes = new TheDrawingPoint();
            tRes.x = Math.max(0, Math.min(p.x - documentToTargetDelta.x, pControl.offsetWidth));
            tRes.y = Math.max(0, Math.min(p.y - documentToTargetDelta.y, pControl.offsetHeight));
            return tRes;
        };
        //  we send target-relative coordinates to the draw functions
        //  this calculates the delta needed to convert pageX/Y to offsetX/Y because offsetX/Y don't exist in the TouchEvent object or in Firefox's MouseEvent object
        ThePointer.ComputeDocumentToElementDelta = function (theElement) {
            var tPoint = new TheDrawingPoint();
            var HasFixedRoot = false;
            for (var offsetElement = theElement; offsetElement; offsetElement = offsetElement.offsetParent) {
                tPoint.x += offsetElement.offsetLeft;
                tPoint.y += offsetElement.offsetTop;
                if (offsetElement.className && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 0 && (offsetElement.className === 'cdeHeader'))
                    HasFixedRoot = true;
            }
            if (HasFixedRoot) {
                tPoint.x += window.pageXOffset;
                tPoint.y += window.pageYOffset;
            }
            return tPoint;
        };
        ///Need to remain here that Model does not require cdeNMIUtils
        ThePointer.prototype.PathLength = function () {
            return cdeNMI.Vector2Distance(this.StartPosition, this.Position);
        };
        ThePointer.prototype.PathAngle = function () {
            return cdeNMI.Vector2GetAngle(this.StartPosition, this.Position);
        };
        ThePointer.prototype.toString = function () {
            return "ID: " + this.Identifier + "CP:" + this.Position.toString() + " IP:" + this.StartPosition.toString() + " AP:" + this.AdjPosition.toString() + " Type:" + this.pointerType + " Event:" + this.pointerEvent;
        };
        return ThePointer;
    }());
    cdeNMI.ThePointer = ThePointer;
    /////////////////////////////////////////////////////////////
    /// NMI ViewModels
    /////////////////////////////////////////////////////////////
    var TheScreenInfo = /** @class */ (function (_super) {
        __extends(TheScreenInfo, _super);
        function TheScreenInfo() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.MyStorageInfo = new Array();
            _this.MyStorageMirror = [];
            _this.MyStorageMeta = new Array();
            return _this;
        }
        return TheScreenInfo;
    }(cde.TheMetaDataBase));
    cdeNMI.TheScreenInfo = TheScreenInfo;
    var TheDashPanelInfo = /** @class */ (function (_super) {
        __extends(TheDashPanelInfo, _super);
        function TheDashPanelInfo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheDashPanelInfo;
    }(cde.TheThing));
    cdeNMI.TheDashPanelInfo = TheDashPanelInfo;
    var TheDashboardInfo = /** @class */ (function (_super) {
        __extends(TheDashboardInfo, _super);
        function TheDashboardInfo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheDashboardInfo;
    }(cde.TheThing));
    cdeNMI.TheDashboardInfo = TheDashboardInfo;
    var TheFieldInfo = /** @class */ (function (_super) {
        __extends(TheFieldInfo, _super);
        function TheFieldInfo(pType, pWidth, pHeader, pFlags, pFormID, pBag) {
            var _this = _super.call(this) || this;
            _this.Type = pType;
            if (pBag)
                _this.PropertyBag = pBag;
            else
                _this.PropertyBag = [];
            if (pHeader)
                _this.PropertyBag.push("Title=" + pHeader);
            if (pWidth)
                _this.PropertyBag.push("FldWidth=" + pWidth);
            if (pFlags)
                _this.Flags = pFlags;
            if (pFormID)
                _this.FormID = cde.GuidToString(pFormID);
            return _this;
        }
        TheFieldInfo.NewTFI = function (pType, pOrder, pHeader, pFlags, pBag) {
            var tTFI = new TheFieldInfo(pType, null, pHeader, pFlags, null, pBag);
            if (pOrder > 0)
                tTFI.FldOrder = pOrder;
            return tTFI;
        };
        return TheFieldInfo;
    }(cde.TheThing));
    cdeNMI.TheFieldInfo = TheFieldInfo;
    var TheFormInfo = /** @class */ (function (_super) {
        __extends(TheFormInfo, _super);
        function TheFormInfo() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.DefaultView = 0;
            _this.IsReadOnly = false;
            _this.IsLiveData = false;
            _this.IsAlwaysEmpty = false;
            _this.IsPostingOnSubmit = false;
            _this.IsUsingAbsolute = false;
            _this.GetFromFirstNodeOnly = false;
            _this.GetFromServiceOnly = false;
            _this.IsGenerated = false;
            _this.CurrentRow = 0; //New in 4.1 contains the Row of the table
            return _this;
        }
        return TheFormInfo;
    }(cde.TheThing));
    cdeNMI.TheFormInfo = TheFormInfo;
    var TheDrawingObject = /** @class */ (function () {
        function TheDrawingObject(pLeft, pTop) {
            this.Left = pLeft ? pLeft : 0;
            this.Top = pTop ? pTop : 0;
        }
        return TheDrawingObject;
    }());
    cdeNMI.TheDrawingObject = TheDrawingObject;
    var TheComboLookup = /** @class */ (function () {
        function TheComboLookup() {
        }
        return TheComboLookup;
    }());
    cdeNMI.TheComboLookup = TheComboLookup;
    var TheStrokePoint = /** @class */ (function () {
        function TheStrokePoint() {
        }
        return TheStrokePoint;
    }());
    cdeNMI.TheStrokePoint = TheStrokePoint;
    var TheTRF = /** @class */ (function () {
        function TheTRF(pTN, pRN, pFldInfo) {
            this.RowFilter = null;
            this.FldName = null;
            this.ModelID = null;
            this.RowID = null;
            this.TableName = pTN;
            this.RowNo = pRN;
            this.FldInfo = pFldInfo;
        }
        TheTRF.prototype.GetHash = function () {
            var ret = this.TableName + this.RowNo;
            if (this.FldInfo)
                ret += this.FldInfo.FldOrder;
            return ret;
        };
        TheTRF.prototype.GetDataRow = function () {
            try {
                if (cdeNMI.MyNMIModels[this.ModelID]) {
                    if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName]) {
                        return cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo];
                    }
                }
            }
            catch (ex) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheTRF:GetDataRow", ex);
            }
            return null;
        };
        TheTRF.prototype.GetMID = function () {
            var tN = null;
            try {
                if (cdeNMI.MyNMIModels[this.ModelID]) {
                    if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName]) {
                        if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo]) {
                            tN = cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo].cdeMID;
                        }
                    }
                }
            }
            catch (ex) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheTRF:GetMID", ex);
            }
            if (!tN && this.FldInfo)
                tN = this.FldInfo.cdeMID;
            return tN;
        };
        TheTRF.prototype.GetOwner = function () {
            var tN = null;
            try {
                if (cdeNMI.MyNMIModels[this.ModelID]) {
                    if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName]) {
                        if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo]) {
                            tN = cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo].cdeO;
                        }
                    }
                }
            }
            catch (ex) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheTRF:GetMID", ex);
            }
            if (!tN && this.FldInfo)
                tN = this.FldInfo.cdeO;
            return tN;
        };
        TheTRF.prototype.GetNodeID = function () {
            var tN = null;
            try {
                if (cdeNMI.MyNMIModels[this.ModelID]) {
                    if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName]) {
                        if (cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo]) {
                            tN = cdeNMI.MyNMIModels[this.ModelID].MyStorageMirror[this.TableName][this.RowNo].cdeN;
                            if (!tN) {
                                // WARNING: this is a fallback if the StorageMirror was not using TheMetaDataBase as base class and will not work Multi-Node! 
                                tN = cdeNMI.MyNMIModels[this.ModelID].cdeN;
                            }
                        }
                    }
                }
            }
            catch (ex) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheTRF:GetNodeID", ex);
            }
            if (!tN && this.FldInfo)
                tN = this.FldInfo.cdeN;
            return tN;
        };
        TheTRF.SetFlagsOnly = function (pFlags) {
            return new cdeNMI.TheTRF("", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.BaseControl, 0, "", pFlags));
        };
        TheTRF.FromScreenForm = function (tModel, tFormID) {
            var tFormInfo = (tModel && tModel.MyStorageMeta && tModel.MyStorageMeta[tFormID]) ? tModel.MyStorageMeta[tFormID] : null;
            var tTRF = new cdeNMI.TheTRF(tFormID, tFormInfo && tFormInfo.CurrentRow ? tFormInfo.CurrentRow : 0, null);
            tTRF.FldInfo = new TheFieldInfo(cdeControlType.BaseControl);
            if (tFormInfo) {
                switch (tFormInfo.DefaultView) {
                    case 0:
                        tTRF.FldInfo.Type = cdeControlType.Table;
                        break;
                    case 1:
                        tTRF.FldInfo.Type = cdeControlType.FormView;
                        break;
                    case 2:
                        tTRF.FldInfo.Type = cdeControlType.IFrameView;
                        break;
                }
                tTRF.FldInfo.cdeO = tFormInfo.cdeO;
                tTRF.FldInfo.cdeN = tFormInfo.cdeN;
                tTRF.FldInfo.cdeMID = tFormInfo.cdeMID;
            }
            return tTRF;
        };
        TheTRF.GetTRF = function (pModelID, pDef) {
            if (!pDef || !pDef.TableName)
                return null;
            if (!pModelID)
                pModelID = cde.MyBaseAssets.MyServiceHostInfo.PortalScreen;
            pModelID = cde.GuidToString(pModelID);
            var tModel = cdeNMI.MyNMIModels[pModelID];
            if (!tModel || tModel.MyStorageMirror[pDef.TableName])
                return null;
            var tRow = pDef.RowNo;
            if (pDef.RowFilter) {
                // do nothing
            }
            return tModel.MyStorageMirror[pDef.TableName][tRow][pDef.FldName];
        };
        return TheTRF;
    }());
    cdeNMI.TheTRF = TheTRF;
    var TheNMISettings = /** @class */ (function () {
        function TheNMISettings() {
            this.TileMargin = 1;
            this.IsInEdit = false;
            this.IDCounter = 1;
            this.StrokeSize = 0.3;
            this.DeadPathLength = 40;
            this.SupportsMouse = false;
            this.SupportsTouch = false;
            this.SupportsPointer = false;
            this.SupportsTouchForce = false;
            this.SupportsTouchForceChange = false;
            this.mIsScrolling = false;
            if (typeof Touch !== 'undefined') {
                // In Android, new Touch requires arguments.
                try {
                    if (Touch.prototype.hasOwnProperty('force') || 'force' in new Touch(null)) {
                        this.SupportsTouchForce = true;
                    }
                }
                catch (e) {
                    //ignored
                }
            }
            this.SupportsTouch = 'ontouchstart' in window.document && this.SupportsTouchForce;
            this.SupportsMouse = 'onmousemove' in window.document && !this.SupportsTouch;
            this.SupportsPointer = 'onpointermove' in window.document;
            this.SupportsTouchForceChange = 'ontouchforcechange' in window.document;
        }
        Object.defineProperty(TheNMISettings.prototype, "IsScrolling", {
            get: function () {
                var Res = this.mLastScrollTime && new Date().getTime() < this.mLastScrollTime + 500;
                this.mIsScrolling = cde.CBool(Res);
                return Res;
            },
            set: function (value) {
                this.mIsScrolling = value;
                if (value === true)
                    this.mLastScrollTime = new Date().getTime();
            },
            enumerable: false,
            configurable: true
        });
        return TheNMISettings;
    }());
    cdeNMI.TheNMISettings = TheNMISettings;
    cdeNMI.MyNMISettings = new TheNMISettings();
    var TheNavHistory = /** @class */ (function () {
        function TheNavHistory() {
        }
        return TheNavHistory;
    }());
    cdeNMI.TheNavHistory = TheNavHistory;
    var TheFlashCache = /** @class */ (function () {
        function TheFlashCache() {
        }
        TheFlashCache.AddCache = function (pName, pValue, exp) {
            if (cdeNMI.MyFlashCache[pName]) {
                cdeNMI.MyFlashCache[pName].Value = pValue;
                cdeNMI.MyFlashCache[pName].Stamp = Math.ceil((new Date()).getTime() - (new Date(2014, 4, 1)).getTime());
                return;
            }
            var tSt = new cdeNMI.TheFlashCache();
            tSt.Value = pValue;
            tSt.Stamp = Math.ceil((new Date()).getTime() - (new Date(2014, 4, 1)).getTime());
            if (exp)
                tSt.Exp = exp;
            else
                tSt.Exp = 3000;
            cdeNMI.MyFlashCache[pName] = tSt;
        };
        TheFlashCache.GetCache = function (pName) {
            if (!cdeNMI.MyFlashCache[pName])
                return null;
            if (Math.ceil((new Date()).getTime() - (new Date(2014, 4, 1)).getTime()) - cdeNMI.MyFlashCache[pName].Stamp > cdeNMI.MyFlashCache[pName].Exp) {
                //cdeNMI.MyFlashCache.splice(cdeNMI.MyFlashCache.findIndex(cdeNMI.MyFlashCache[pName]), 1);   //V4.110:TODO ES5/ES6 incompat Test this NOT SUPPORTED IN ES5
                return null;
            }
            return cdeNMI.MyFlashCache[pName].Value;
        };
        TheFlashCache.FlushCache = function () {
            cdeNMI.MyFlashCache = [];
        };
        return TheFlashCache;
    }());
    cdeNMI.TheFlashCache = TheFlashCache;
    cdeNMI.MyFlashCache = [];
    var TheNodeInfo = /** @class */ (function (_super) {
        __extends(TheNodeInfo, _super);
        function TheNodeInfo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TheNodeInfo;
    }(cde.TheMetaDataBase));
    cdeNMI.TheNodeInfo = TheNodeInfo;
    var TheControlBlock = /** @class */ (function () {
        function TheControlBlock() {
        }
        return TheControlBlock;
    }());
    cdeNMI.TheControlBlock = TheControlBlock;
    cdeNMI.MyTCBs = [];
    var TheFaceWait = /** @class */ (function () {
        function TheFaceWait() {
        }
        return TheFaceWait;
    }());
    cdeNMI.TheFaceWait = TheFaceWait;
    var TheNMIC = /** @class */ (function () {
        function TheNMIC() {
        }
        return TheNMIC;
    }());
    cdeNMI.TheNMIC = TheNMIC;
    var TheComboOption = /** @class */ (function () {
        function TheComboOption() {
        }
        return TheComboOption;
    }());
    cdeNMI.TheComboOption = TheComboOption;
    var ThePB = /** @class */ (function () {
        function ThePB() {
        }
        ThePB.GetPropNameFromBag = function (pBag, bDontTrim) {
            var ePos = pBag.indexOf("=");
            if (ePos < 0) {
                ePos = pBag.length;
            }
            if (cde.CBool(bDontTrim))
                return pBag.substring(0, ePos);
            return pBag.substring(0, ePos).trim();
        };
        ThePB.RemoveProperty = function (pBag, pName) {
            if (pBag && pBag.length > 0) {
                for (var jj = 0; jj < pBag.length; jj++) {
                    var ePos = pBag[jj].indexOf("=");
                    if (ePos >= 0) {
                        var tPropName = pBag[jj].substring(0, ePos).trim();
                        if (tPropName === pName) {
                            pBag.splice(jj, 1);
                            return;
                        }
                    }
                }
            }
        };
        ThePB.UpdateProperty = function (pBag, pName, pValue) {
            if (!pBag)
                return;
            if (pBag && pBag.length > 0) {
                for (var jj = 0; jj < pBag.length; jj++) {
                    var ePos = pBag[jj].indexOf("=");
                    if (ePos >= 0) {
                        var tPropName = pBag[jj].substring(0, ePos).trim();
                        if (tPropName === pName) {
                            pBag[jj] = pName + "=" + pValue;
                            return;
                        }
                    }
                }
            }
        };
        ThePB.GetValueFromBagByName = function (pBag, pName, bDontTrim) {
            if (pBag && pBag.length > 0) {
                for (var jj = 0; jj < pBag.length; jj++) {
                    var ePos = pBag[jj].indexOf("=");
                    if (ePos >= 0) {
                        var tPropName = pBag[jj].substring(0, ePos).trim();
                        var tProValue = (bDontTrim === true ? pBag[jj].substring(ePos + 1) : pBag[jj].substring(ePos + 1).trim());
                        if (tPropName === pName)
                            return tProValue;
                    }
                }
            }
            return null;
        };
        // Has to stay any for any field with a PropertyBag
        ThePB.ConvertPropertiesFromBag = function (tFldInfo, pBag) {
            if (!tFldInfo)
                return;
            if (!tFldInfo.PropertyBag)
                tFldInfo.PropertyBag = [];
            for (var jj = 0; jj < tFldInfo.PropertyBag.length; jj++) {
                this.ConvertBagToSettings(tFldInfo, tFldInfo.PropertyBag[jj]);
            }
            if (pBag) {
                for (var jjj = 0; jjj < pBag.length; jjj++) {
                    this.ConvertBagToSettings(tFldInfo, pBag[jjj]);
                }
            }
        };
        ThePB.ConvertBagToSettings = function (pFldInfo, pBagString) {
            if (!pFldInfo || !pBagString)
                return;
            var ePos = pBagString.indexOf("=");
            var bHasValue = true;
            if (ePos < 0) {
                ePos = pBagString.length;
                bHasValue = false;
            }
            var tPropName = pBagString.substring(0, ePos).trim();
            if (tPropName === "Value")
                tPropName = "iValue";
            if (bHasValue) {
                var tProValue = pBagString.substring(ePos + 1).trim();
                if (tPropName === 'Flags' || tPropName === 'FldOrder' || tPropName === 'ACL')
                    pFldInfo[tPropName] = cde.CInt(tProValue);
                else
                    pFldInfo[tPropName] = tProValue;
            }
            else
                pFldInfo[tPropName] = true;
        };
        ThePB.SetPropertiesFromBag = function (pCtrl, pBag, pRow, pIsLive, pIsInTable) {
            if (!pBag || !pCtrl)
                return;
            for (var jj = 0; jj < pBag.length; jj++) {
                var ePos = pBag[jj].indexOf("=");
                var bHasValue = true;
                if (ePos < 0) {
                    ePos = pBag[jj].length;
                    bHasValue = false;
                }
                var tPropName = pBag[jj].substring(0, ePos).trim();
                if (tPropName === "Value")
                    tPropName = "iValue";
                if (cde.CBool(pIsInTable) && (tPropName === "TileWidth" || tPropName === "TileLeft" || tPropName === "TileTop" || tPropName === "IsAbsolute"))
                    continue;
                if (pCtrl.MyBaseType === cdeControlType.TileEntry && (tPropName.toLowerCase() === "onthingevent"))
                    continue;
                var tProValue = "";
                try {
                    if (bHasValue) {
                        tProValue = pBag[jj].substring(ePos + 1).trim();
                        cdeNMI.ThePB.SetRawProperty(pCtrl, tPropName, tProValue, pRow, pIsLive);
                    }
                    else {
                        pCtrl.SetProperty(tPropName, true);
                    }
                }
                catch (except) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ThePB:SetPropertyFromBag", "SetPropertyFromBag failed to SetP on " + tPropName + " to " + tProValue);
                }
            }
        };
        ThePB.SetRawProperty = function (pCtrl, tPropName, pProValue, pRow, pIsLive) {
            if (!tPropName)
                return;
            var tProValue = pProValue;
            if (!tProValue)
                tProValue = "";
            switch (tPropName.toLowerCase()) {
                case "onthingevent":
                    try {
                        var tEvParts = void 0;
                        if (pIsLive)
                            tEvParts = tProValue.split(';');
                        else
                            tEvParts = cdeNMI.GenerateFinalString(tProValue, pRow).split(';');
                        pCtrl.RegisterThingSetP(tEvParts[0], tEvParts[1]);
                    }
                    catch (e) {
                        //ignored
                    }
                    break;
                default:
                    if (tPropName !== "HTML" && tPropName !== "OnClick" && tProValue.indexOf("<%") >= 0 && tProValue.indexOf("%>") >= 0) {
                        tProValue = cdeNMI.GenerateFinalString(tProValue, pRow);
                        pCtrl.SetDataItem(tPropName, tProValue);
                    }
                    else {
                        if (tProValue && tProValue.indexOf('%') >= 0) {
                            tProValue = cdeNMI.GenerateFinalString(tProValue, pRow, null, true);
                        }
                        pCtrl.SetProperty(tPropName, tProValue);
                    }
                    break;
            }
        };
        ThePB.GetSetting = function (pFieldInfo, pName) {
            var res = null;
            if (pFieldInfo) {
                res = pFieldInfo[pName];
                if (!res && pFieldInfo.PropertyBag)
                    res = cdeNMI.ThePB.GetValueFromBagByName(pFieldInfo.PropertyBag, pName);
            }
            return res;
        };
        return ThePB;
    }());
    cdeNMI.ThePB = ThePB;
    var TheLanguageResource = /** @class */ (function () {
        function TheLanguageResource() {
            this.LCID = 0;
            this.MyResources = {};
        }
        return TheLanguageResource;
    }());
    cdeNMI.TheLanguageResource = TheLanguageResource;
    var TheLocalizer = /** @class */ (function (_super) {
        __extends(TheLocalizer, _super);
        function TheLocalizer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.LocalResources = new TheLanguageResource();
            _this.mRequestedLCID = 0;
            return _this;
        }
        TheLocalizer.prototype.SetLCID = function (pLCID) {
            if (pLCID !== this.LocalResources.LCID) {
                this.mRequestedLCID = pLCID;
                if (pLCID === 1033) {
                    this.LocalResources = new TheLanguageResource();
                    this.LocalResources.LCID = pLCID;
                }
                else {
                    this.GetResources();
                    return;
                }
            }
            this.FireEvent(true, "OnLCIDChanged", this.LocalResources.LCID);
        };
        TheLocalizer.prototype.GetCurrentLCID = function () {
            return this.LocalResources.LCID;
        };
        TheLocalizer.prototype.GetResources = function () {
            var _this = this;
            if (this.mRequestedLCID > 0 && this.mRequestedLCID !== 1033) {
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.cdeGetResource("Lang/NMIlang" + cde.CStr(this.mRequestedLCID) + ".json", function (c, t) { _this.SetResources(t); }, null, 3000);
                    return;
                }
            }
            this.FireEvent(true, "OnLCIDChanged", this.LocalResources.LCID);
        };
        TheLocalizer.prototype.SetResources = function (pT) {
            if (pT && pT !== "TIMEOUT" && pT !== "Not Found") {
                try {
                    var pDATA = JSON.parse(pT);
                    if (this.mRequestedLCID === pDATA.LCID) {
                        for (var idx in pDATA.MyResources) {
                            this.LocalResources.MyResources[idx] = pDATA.MyResources[idx];
                        }
                        this.LocalResources.LCID = pDATA.LCID;
                    }
                }
                catch (e) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:SetResource", "failed with " + e + ":" + e.stack);
                }
            }
            this.FireEvent(true, "OnLCIDChanged", this.LocalResources.LCID);
        };
        TheLocalizer.prototype.SaveResources = function () {
            var tS = JSON.stringify(this.LocalResources);
            if (cde.MyContentEngine)
                cde.MyContentEngine.SaveFile(tS, "NMIlang" + this.LocalResources.LCID + ".json", "application/json", false);
        };
        TheLocalizer.prototype.T = function (pKEY) {
            if (typeof pKEY !== "string" || !pKEY || pKEY === "")
                return "";
            pKEY = pKEY.replace('&nbsp;', ' ');
            if (this.LocalResources.MyResources[pKEY])
                return cdeNMI.IconFAShim(this.LocalResources.MyResources[pKEY]);
            else {
                if (cde.MyBaseAssets.MyServiceHostInfo.RedPill && !pKEY.startsWith("(Waiting for control #"))
                    this.LocalResources.MyResources[pKEY] = pKEY; // pKEY;
                return cdeNMI.IconFAShim(pKEY);
            }
        };
        return TheLocalizer;
    }(cde.TheDataBase));
    cdeNMI.TheLocalizer = TheLocalizer;
    cdeNMI.TL = new TheLocalizer();
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var TheControlFactory = /** @class */ (function (_super) {
        __extends(TheControlFactory, _super);
        function TheControlFactory() {
            var _this = _super.call(this) || this;
            _this.cdeControlTypeNames = new Array();
            _this.MyNMIControls = [];
            _this.MyKnownControls = new Array();
            //////////////////////////////////////////////////////////////////////////////
            /// NMI Lazy Control Loader
            //////////////////////////////////////////////////////////////////////////////
            _this.MyLazyCallbacks = [];
            _this.stringToFunction = function (str) {
                var arr = str.split(".");
                var fn = (window);
                var outFn = fn;
                for (var i = 0, len = arr.length; i < len; i++) {
                    outFn = outFn[arr[i]];
                }
                if (typeof outFn !== "function") {
                    throw new Error("function not found");
                }
                return outFn;
            };
            _this.cdeControlTypeNames[0] = "cdeNMI.TheNMIBaseControl";
            _this.cdeControlTypeNames[1] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[2] = "cdeNMI.ctrlComboBox";
            //Radion coming soon
            _this.cdeControlTypeNames[4] = "cdeNMI.ctrlCheckBox";
            _this.cdeControlTypeNames[5] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[6] = "cdeNMI.ctrlComboBox";
            _this.cdeControlTypeNames[7] = "cdeNMI.ctrlComboBox";
            _this.cdeControlTypeNames[8] = "cdeNMI.ctrlDateTimePicker"; //TODO: New Time Picker
            _this.cdeControlTypeNames[9] = "cdeNMI.ctrlDateTimePicker"; //TODO: New TimeSpan Picker
            _this.cdeControlTypeNames[10] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[11] = "cdeNMI.ctrlTileButton"; //11: Submit Button Retired
            _this.cdeControlTypeNames[12] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[13] = "cdeNMI.ctrlComboBox";
            _this.cdeControlTypeNames[14] = "cdeNMI.ctrlComboBox";
            _this.cdeControlTypeNames[15] = "cdeNMI.ctrlComboBox";
            _this.cdeControlTypeNames[16] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[17] = "cdeNMI.ctrlComboBox"; //Todo:Combo Option
            _this.cdeControlTypeNames[18] = "cdeNMI.ctrlDateTimePicker";
            _this.cdeControlTypeNames[20] = "cdeNMI.ctrlSmartLabel";
            _this.cdeControlTypeNames[21] = "cdeNMI.ctrlDateTimePicker"; //TODO: Time Picker
            _this.cdeControlTypeNames[22] = "cdeNMI.ctrlTileButton";
            _this.cdeControlTypeNames[23] = "cdeNMI.ctrlTableView";
            _this.cdeControlTypeNames[24] = "cdeNMI.ctrlCheckField";
            _this.cdeControlTypeNames[26] = "cdeNMI.TheNMIScreen";
            _this.cdeControlTypeNames[28] = "cdeNMI.ctrlTileEntry";
            _this.cdeControlTypeNames[29] = "cdeNMI.ctrlZoomImage";
            _this.cdeControlTypeNames[30] = "cdeNMI.ctrlCanvasDraw";
            _this.cdeControlTypeNames[31] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[32] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[33] = "cdeNMI.ctrlEndlessSlider";
            _this.cdeControlTypeNames[34] = "cdeNMI.ctrlBarChart";
            _this.cdeControlTypeNames[35] = "cdeNMI.TheToast";
            _this.cdeControlTypeNames[36] = "cdeNMI.ctrlTouchDraw";
            _this.cdeControlTypeNames[37] = "cdeNMI.ThePopup";
            _this.cdeControlTypeNames[38] = "cdeNMI.ctrlDrawOverlay";
            _this.cdeControlTypeNames[40] = "cdeNMI.ctrlDropUploader";
            _this.cdeControlTypeNames[41] = "cdeNMI.ctrlRevealButton";
            _this.cdeControlTypeNames[42] = "cdeNMI.ctrlPinButton";
            _this.cdeControlTypeNames[44] = "cdeNMI.TheDashboard";
            _this.cdeControlTypeNames[45] = "cdeNMI.ctrlFormView";
            _this.cdeControlTypeNames[46] = "cdeNMI.ctrlTouchOverlay";
            _this.cdeControlTypeNames[47] = "cdeNMI.ctrlMoTLock";
            _this.cdeControlTypeNames[48] = "cdeNMI.ctrlProgressBar";
            _this.cdeControlTypeNames[49] = "cdeNMI.ctrlTileGroup";
            _this.cdeControlTypeNames[50] = "cdeNMI.ctrlVideoViewer";
            _this.cdeControlTypeNames[53] = "cdeNMI.ctrlEditBox";
            _this.cdeControlTypeNames[54] = "cdeNMI.ctrlShape";
            _this.cdeControlTypeNames[55] = "cdeNMI.ctrlCollapsibleGroup";
            _this.cdeControlTypeNames[56] = "cdeNMI.ctrlAboutButton";
            _this.cdeControlTypeNames[57] = "cdeNMI.ctrlStatusLight";
            _this.cdeControlTypeNames[58] = "cdeNMI.ctrlFacePlate";
            _this.cdeControlTypeNames[59] = "cdeNMI.TheLoginScreen";
            _this.cdeControlTypeNames[60] = "cdeNMI.TheShapeRecognizer";
            _this.cdeControlTypeNames[61] = "cdeNMI.TheScreenManager";
            _this.cdeControlTypeNames[62] = "cdeNMI.ctrlLogoButton";
            _this.cdeControlTypeNames[63] = "cdeNMI.ctrlThingPicker"; //ThingPicker
            _this.cdeControlTypeNames[64] = "cdeNMI.ctrlImageSlider2";
            _this.cdeControlTypeNames[65] = "cdeNMI.ctrlCircularGauge2";
            _this.cdeControlTypeNames[66] = "cdeNMI.ctrlSmartGauge2";
            _this.cdeControlTypeNames[67] = "cdeNMI.ctrlIFrameView";
            _this.cdeControlTypeNames[68] = "cdeNMI.ctrlPropertyPicker"; //Goes to PropertyPickerCtrl control
            _this.cdeControlTypeNames[69] = "cdeNMI.ctrlPropertyPicker"; //The real Property Picker (no edit Box);
            _this.cdeControlTypeNames[70] = "cdeNMI.ctrlToolTip";
            _this.cdeControlTypeNames[71] = "cdeNMI.ctrlComboLookup";
            _this.cdeControlTypeNames[72] = "cdeNMI.ctrlUserMenu";
            _this.cdeControlTypeNames[73] = "cdeNMI.ctrlMeshPicker";
            _this.cdeControlTypeNames[74] = "cdeNMI.ctrlHashIcon";
            _this.cdeControlTypeNames[75] = "cdeNMI.ctrlCertPicker";
            _this.cdeControlTypeNames[76] = "cdeNMI.ctrlDeviceTypePicker";
            _this.MyKnownControls[0] = "CMyDashboard";
            _this.MyKnownControls[1] = "CMyChart";
            _this.MyKnownControls[2] = "CMyTable";
            _this.MyKnownControls[3] = "CMyForm";
            _this.MyKnownControls[4] = "CMyData";
            _this.MyKnownControls[5] = "CMyHTML";
            _this.MyKnownControls[6] = "CMySCRIPT";
            _this.MyKnownControls[7] = "CMyInfo";
            _this.MyKnownControls[8] = "CMyNavigator";
            _this.MyKnownControls[9] = "CMyLiveScreen";
            _this.MyKnownControls[10] = "CMyIFrame";
            _this.MyNMIControls["TABLES"] = [];
            return _this;
        }
        //Required to register customer controls
        TheControlFactory.prototype.InitTCF = function () {
            this.FireEvent(true, "ControlTypeFactory_Ready");
        };
        TheControlFactory.prototype.RegisterKnownControl = function (pIDX, pName) {
            this.MyKnownControls[pIDX] = pName;
        };
        TheControlFactory.prototype.IsControlNameKnown = function (pName) {
            return cdeNMI.DoesArrayContain(this.MyKnownControls, pName);
        };
        TheControlFactory.prototype.RegisterControl = function (pGroup, pID, pCtrl) {
            if (!this.MyNMIControls[pGroup])
                this.MyNMIControls[pGroup] = [];
            if (pID && pCtrl)
                this.MyNMIControls[pGroup][pID] = pCtrl;
        };
        TheControlFactory.prototype.DeleteRegisteredControl = function (pGroup, pID) {
            if (this.MyNMIControls[pGroup] && this.MyNMIControls[pGroup][pID])
                delete this.MyNMIControls[pGroup][pID];
        };
        TheControlFactory.prototype.GetRegisteredControl = function (pGroup, pID) {
            if (this.MyNMIControls[pGroup] && this.MyNMIControls[pGroup][pID])
                return this.MyNMIControls[pGroup][pID];
            return null;
        };
        TheControlFactory.prototype.GetRegisteredControlGroup = function (pGroup) {
            if (this.MyNMIControls[pGroup])
                return this.MyNMIControls[pGroup];
            return null;
        };
        TheControlFactory.prototype.UnregisterControl = function (tOWN, pID) {
            tOWN = cde.GuidToString(tOWN);
            pID = cde.GuidToString(pID);
            //if (this.MyNMIControls[tOWN] && this.MyNMIControls[tOWN][pID]) {
            var tc = this.GetRegisteredControl(tOWN, pID); // this.MyNMIControls[tOWN][pID];
            if (tc) {
                if (cdeNMI.MyEngine) {
                    var tThingOwn = cde.GuidToString(tc.GetProperty("MyThing"));
                    if (cdeNMI.MyNMIThingEvents[tThingOwn] && cdeNMI.MyNMIThingEvents[tThingOwn][pID])
                        delete cdeNMI.MyNMIThingEvents[tThingOwn][pID];
                }
                //delete this.MyNMIControls[tOWN][pID];
                this.DeleteRegisteredControl(tOWN, pID);
            }
            //}
        };
        TheControlFactory.prototype.IsComboBased = function (pFldType) {
            switch (pFldType) {
                case 2:
                case 6:
                case 7:
                case 8:
                case 9:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 21:
                    return true;
            }
            return false;
        };
        TheControlFactory.prototype.IsTypeNumeric = function (pFldType) {
            switch (pFldType) {
                case 12:
                    return true;
            }
            return false;
        };
        TheControlFactory.prototype.RegisterControlType = function (pCType, pTypeName) {
            this.cdeControlTypeNames[pCType] = pTypeName;
        };
        TheControlFactory.prototype.GetControlByName = function (pCTYpe) {
            if (!this.cdeControlTypeNames[pCTYpe])
                return null;
            else
                return this.cdeControlTypeNames[pCTYpe];
        };
        TheControlFactory.prototype.RegisterControlName = function (pCType, pTypeName) {
            this.cdeControlTypeNames[pCType] = pTypeName;
        };
        TheControlFactory.prototype.GetControlType = function (pCTYpe) {
            if (!this.cdeControlTypeNames[pCTYpe])
                return this.cdeControlTypeNames[0];
            else
                return this.cdeControlTypeNames[pCTYpe];
        };
        TheControlFactory.prototype.FireLazyCreate = function (pEngineName, pTargetControl, IsRecurse) {
            if (pTargetControl === void 0) { pTargetControl = null; }
            if (IsRecurse === void 0) { IsRecurse = false; }
            if (!pEngineName || !this.MyLazyCallbacks[pEngineName])
                return;
            for (var mh = this.MyLazyCallbacks[pEngineName].length - 1; mh >= 0; mh--) {
                if (this.MyLazyCallbacks[pEngineName][mh].CallBack) {
                    if (this.CreateControlLazy(this.MyLazyCallbacks[pEngineName][mh].TargetControl, pEngineName, this.MyLazyCallbacks[pEngineName][mh].ControlType, this.MyLazyCallbacks[pEngineName][mh].CallBack, this.MyLazyCallbacks[pEngineName][mh].Cookie))
                        this.MyLazyCallbacks[pEngineName].splice(mh, 1);
                }
            }
            if (!IsRecurse && this.MyLazyCallbacks[pEngineName].length > 0)
                this.FireLazyCreate(pEngineName, pTargetControl, true);
        };
        TheControlFactory.prototype.CreateNMIControl = function (pControlType, bReturnNull) {
            if (bReturnNull === void 0) { bReturnNull = false; }
            if (!this.cdeControlTypeNames[pControlType] || this.cdeControlTypeNames[pControlType] === '') {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:CreateNMIControl", "Unkown Control Type specified: " + pControlType);
                if (bReturnNull)
                    return null;
                return this.CreateBaseControl();
            }
            var tControl = this.CreateControlLazy(null, cdeNMI.eTheNMIEngine, this.cdeControlTypeNames[pControlType], this.CreateNMICallback, null);
            if (!tControl) {
                if (bReturnNull)
                    return null;
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:CreateNMIControlAsync", "Control Type specified not found: " + pControlType);
                tControl = this.CreateBaseControl();
            }
            return tControl;
        };
        TheControlFactory.prototype.CreateBaseControl = function () {
            try {
                return new cdeNMI[this.cdeControlTypeNames[0].split('.')[1]]();
            }
            catch (_a) {
                //ignored
            }
            return null;
        };
        TheControlFactory.prototype.CreateNMICallback = function () {
            //TODO: Later replace dummy with real control
        };
        TheControlFactory.prototype.CreateNMIControlAsync = function (pTargetControl, pControlType, callback) {
            if (!this.cdeControlTypeNames[pControlType]) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:CreateNMIControlAsync", "Unkown Control Type specified: " + pControlType);
                return null;
            }
            return this.CreateControlLazy(pTargetControl, cdeNMI.eTheNMIEngine, this.cdeControlTypeNames[pControlType], callback, null);
        };
        TheControlFactory.prototype.CreateControlLazy = function (pTargetControl, pEngineName, pControlType, callback, cookie) {
            var tResControl = null;
            var bSuccess = false;
            if (pControlType && pControlType.length > 0) {
                try {
                    var mClass = this.stringToFunction(pControlType);
                    tResControl = new mClass();
                    bSuccess = true;
                    tResControl.MyParentCtrl = pTargetControl;
                    if (callback)
                        callback(pTargetControl, tResControl, cookie);
                }
                catch (e) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:CreateControlLazy", "LazyLoad failed:(" + pControlType + ") " + e + ":" + e.stack);
                }
            }
            else {
                return null;
            }
            if (!bSuccess && pEngineName && callback) {
                if (!this.MyLazyCallbacks[pEngineName]) {
                    this.MyLazyCallbacks[pEngineName] = [];
                    if (!cde.MyBaseAssets.MyEngines[pEngineName] && cdeNMI.MyEngine)
                        cdeNMI.MyEngine.PublishToNMI("NMI_GET_ENGINEJS", pEngineName);
                }
                var HasCallback = false;
                for (var mh = 0; mh < this.MyLazyCallbacks[pEngineName].length; mh++) {
                    if (this.MyLazyCallbacks[pEngineName][mh].Cookie === cookie) {
                        HasCallback = true;
                        break;
                    }
                }
                if (!HasCallback)
                    this.MyLazyCallbacks[pEngineName].push({ ControlType: pControlType, TargetControl: pTargetControl, CallBack: callback, Cookie: cookie });
            }
            return tResControl;
        };
        TheControlFactory.prototype.SetControlEssentials = function (pTEControl, pTgtControl, pTEControlMyTRF) {
            //var pTEControl: ctrlTileEntry = this;
            if (!pTEControl)
                return;
            if (!pTEControlMyTRF)
                pTEControlMyTRF = pTEControl.MyTRF;
            if (!pTEControlMyTRF)
                return;
            try {
                var tFldInfo = pTEControlMyTRF.FldInfo;
                var tScreenInfo = null;
                if (cdeNMI.MyEngine)
                    tScreenInfo = cdeNMI.MyNMIModels[pTEControlMyTRF.ModelID];
                if (!tFldInfo && pTEControl)
                    tFldInfo = pTEControl.MyFieldInfo;
                if (pTEControl !== pTgtControl) {
                    pTEControl.MyNMIControl = pTgtControl;
                    pTEControl.MyTEContent.AppendChild(pTEControl.MyNMIControl);
                    if (pTgtControl.MyBaseType === cdeNMI.cdeControlType.Table) //Possibly remove other control types from further processing
                        return;
                    //ID Management
                    var tID = pTEControl.GetProperty("ID");
                    var tOldID = pTgtControl.GetProperty("ID");
                    pTgtControl.SetProperty("ID", tID);
                    cdeNMI.MyTCF.UnregisterControl(tID, tOldID);
                    if (!pTgtControl.MyTRF)
                        pTgtControl.MyTRF = pTEControlMyTRF;
                    if (!pTgtControl.MyFieldInfo) {
                        pTgtControl.MyFieldInfo = pTEControl.MyFieldInfo;
                    }
                    //Size Management
                    if (!cde.IsNotSet(pTgtControl.GetProperty("NoTE")))
                        pTEControl.SetProperty("NoTE", pTgtControl.GetProperty("NoTE"));
                    if (!cde.IsNotSet(pTgtControl.GetProperty("UseTE")))
                        pTEControl.SetProperty("UseTE", pTgtControl.GetProperty("UseTE"));
                    if (!cde.IsNotSet(pTgtControl.GetProperty("TileFactorX")))
                        pTEControl.SetProperty("TileFactorX", pTgtControl.GetProperty("TileFactorX"));
                    if (!cde.IsNotSet(pTgtControl.GetProperty("TileFactorY")))
                        pTEControl.SetProperty("TileFactorY", pTgtControl.GetProperty("TileFactorY"));
                    if (!cde.CBool(pTEControl.GetProperty("IsInTable"))) {
                        pTEControl.SetProperty("MinTileWidth", pTgtControl.GetProperty("MinTileWidth"));
                        pTEControl.SetProperty("MinTileHeight", pTgtControl.GetProperty("MinTileHeight"));
                        if (cde.CInt(pTgtControl.GetProperty("TileWidth")) > 0)
                            pTEControl.SetProperty("TileWidth", pTgtControl.GetProperty("TileWidth"));
                        if (cde.CInt(pTgtControl.GetProperty("TileHeight")) > 0)
                            pTEControl.SetProperty("TileHeight", pTgtControl.GetProperty("TileHeight"));
                        if (cde.CBool(pTgtControl.GetProperty("ShowOverflow")))
                            pTEControl.MyTEContainer.GetElement().style.overflow = "initial";
                        pTgtControl.SetProperty("ControlTW", cde.CInt(pTEControl.GetProperty("ControlTW")));
                        pTgtControl.SetProperty("ControlTH", cde.CInt(pTEControl.GetProperty("ControlTH")));
                    }
                }
                pTgtControl.RegisterNMIControl();
                if (tFldInfo && tFldInfo.DataItem) {
                    pTgtControl.SetProperty("DataItem", tFldInfo.DataItem);
                }
                var tDataRow = null;
                if (tScreenInfo && tScreenInfo.MyStorageMirror[pTEControlMyTRF.TableName]) {
                    tDataRow = tScreenInfo.MyStorageMirror[pTEControlMyTRF.TableName][pTgtControl.MyTRF ? pTgtControl.MyTRF.RowNo : 0];
                    var tFldContentLC = cdeNMI.GetFldContent(tDataRow, pTgtControl.MyFieldInfo, tScreenInfo.IsGenerated, false);
                    if (!cde.IsNotSet(tFldContentLC)) {
                        if (pTgtControl.MyFieldInfo && pTgtControl.MyFieldInfo && pTgtControl.MyFieldInfo.Type === cdeNMI.cdeControlType.Picture && tFldContentLC && tFldContentLC.length > 255)
                            tFldContentLC = "data:image/jpeg;base64," + tFldContentLC;
                        pTgtControl.SetProperty("iValue", tFldContentLC);
                    }
                    tFldInfo["OnClick"] = cdeNMI.GenerateFinalString(tFldInfo["OnClick"], tDataRow);
                    cdeNMI.ThePB.SetRawProperty(pTgtControl, "OnThingEvent", tFldInfo["OnThingEvent"], tDataRow, tScreenInfo.IsLiveForm);
                }
                else {
                    if (tFldInfo["OnThingEvent"] && tScreenInfo.IsLiveForm === true)
                        cdeNMI.ThePB.SetRawProperty(pTgtControl, "OnThingEvent", tFldInfo["OnThingEvent"], null, tScreenInfo.IsLiveForm);
                    if (tFldInfo["DefaultValue"] && !pTgtControl.GetProperty("Value"))
                        pTgtControl.SetProperty("iValue", tFldInfo["DefaultValue"]);
                }
                tFldInfo["Title"] = cdeNMI.GenerateFinalString(tFldInfo["Title"], tDataRow);
                if (!cde.CBool(pTEControl.GetProperty("IsInTable")) &&
                    !cde.CBool(tFldInfo["IsInTable"])) {
                    if (tFldInfo["Options"])
                        tFldInfo["OptionsLive"] = cdeNMI.GenerateFinalString(tFldInfo["Options"], tDataRow);
                    if (tFldInfo && tFldInfo.PropertyBag && tFldInfo.PropertyBag.length > 0) {
                        cdeNMI.ThePB.SetPropertiesFromBag(pTEControl, tFldInfo.PropertyBag, (tScreenInfo && tScreenInfo.MyStorageMirror[pTEControlMyTRF.TableName]) ? tScreenInfo.MyStorageMirror[pTEControlMyTRF.TableName][pTgtControl.MyTRF ? pTgtControl.MyTRF.RowNo : 0] : null, tScreenInfo ? tScreenInfo.IsLiveForm : false, cde.CBool(pTEControl.GetProperty("IsInTable")));
                    }
                    if (tScreenInfo && pTEControlMyTRF.FldInfo) {
                        var tFormInfo = tScreenInfo.MyStorageMeta[cde.GuidToString(pTEControlMyTRF.FldInfo.FormID)];
                        if (tFormInfo && tFormInfo.IsUsingAbsolute && cde.CInt(tFldInfo["ParentFld"]) === 0) {
                            pTEControl.SetProperty("IsAbsolute", true);
                        }
                    }
                    if (pTEControl.GetProperty("RenderTarget")) {
                        var tTarget = cdeNMI.GenerateFinalString(pTEControl.GetProperty("RenderTarget"), false, pTEControl.MyTRF); //.replace("%ID%", this.GetProperty("ID"));
                        pTEControl.FindRenderTarget(tTarget);
                    }
                }
                pTgtControl.SetProperty("TabIndex", !pTgtControl.MyTarget || cde.CBool(pTgtControl.MyTarget.GetProperty("IsUnloaded")) ? -1 : tFldInfo.FldOrder);
                var tPos = pTgtControl.MyTarget.MyChildren.indexOf(pTgtControl);
                if (tPos >= 0)
                    pTgtControl.MyTarget.MyChildren.splice(tPos, 1);
                pTgtControl.MyTarget.MyChildren.push(pTgtControl);
                pTgtControl.ApplySkin();
            }
            catch (eee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TileEntry:SetControlEssentials", eee.message + ":" + eee.stack);
                if (pTEControl)
                    pTEControl.SetProperty("PlaceHolder", eee.message);
            }
        };
        TheControlFactory.prototype.ToggleGroup = function (pScreenID, pPara) {
            if (!pScreenID || !pPara)
                return;
            var tCtrl = cdeNMI.MyTCF.GetRegisteredControl("TABLES", cde.GuidToString(pScreenID)); // cdeNMI.MyEngine.MyNMIControls["TABLES"][cde.GuidToString(pScreenID)];
            if (tCtrl) {
                var tV = pPara.split(':');
                var tGroup = tV[0];
                var tID = tV.length > 1 ? tV[1] : null;
                if (tV.length > 3 && tCtrl.MyBaseType === cdeNMI.cdeControlType.FormView) {
                    var tForm = tCtrl;
                    var tRealCondition = "";
                    try {
                        tRealCondition = tForm.ReplaceMarcos(tV[3], tForm.MyFormControls);
                        var IsTrue = cde.cdeEval(tRealCondition);
                        if (IsTrue)
                            tID = tV[2];
                    }
                    catch (e) {
                        //cdeNMI.ShowToastMessage("Validating Hide-Condition Error:" + e, "in: (" + tHideCondition + ") resolved to<br/>" + tRealCondition);
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Validating Group-Condition Error:" + e, "in: (" + tV[3] + ") resolved to<br/>" + tRealCondition);
                    }
                }
                tCtrl.SetProperty("StartGroup", pPara);
                this.ToggleChildren(tCtrl, tGroup, tID);
            }
        };
        TheControlFactory.prototype.ToggleChildren = function (pControl, pGroup, pID) {
            for (var iPC in pControl.MyChildren) {
                if (pControl.MyChildren.hasOwnProperty(iPC)) {
                    var tCtrl = pControl.MyChildren[iPC];
                    if (tCtrl.GetProperty("Group")) {
                        if (tCtrl.GetProperty("Group").toString().startsWith(pGroup)) {
                            if (pID === null || tCtrl.GetProperty("Group") !== pGroup + ":" + pID) {
                                if (tCtrl.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup)
                                    tCtrl.ToggleDrop(false, true);
                                else {
                                    tCtrl.SetProperty("Visibility", false);
                                    if (tCtrl.GetTE())
                                        tCtrl.GetTE().SetProperty("Visibility", false);
                                }
                            }
                            else {
                                if (tCtrl.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup)
                                    tCtrl.ToggleDrop(true, true);
                                else {
                                    tCtrl.SetProperty("Visibility", true);
                                    if (tCtrl.GetTE())
                                        tCtrl.GetTE().SetProperty("Visibility", true);
                                }
                            }
                        }
                    }
                    else if (tCtrl.MyBaseType === cdeNMI.cdeControlType.TileButton && typeof tCtrl.GetProperty("OnClick") === "string") {
                        var tOncl = tCtrl.GetProperty("OnClick");
                        if (tOncl === "GRP:" + pGroup + ":" + pID) {
                            if (!tCtrl.GetElement().classList.contains("cdeTabSelected"))
                                tCtrl.GetElement().classList.add("cdeTabSelected");
                            if (tCtrl.GetElement().classList.contains("cdeTabNotSelected"))
                                tCtrl.GetElement().classList.remove("cdeTabNotSelected");
                        }
                        else if (tOncl.startsWith("GRP:" + pGroup)) {
                            if (!tCtrl.GetElement().classList.contains("cdeTabNotSelected"))
                                tCtrl.GetElement().classList.add("cdeTabNotSelected");
                            if (tCtrl.GetElement().classList.contains("cdeTabSelected"))
                                tCtrl.GetElement().classList.remove("cdeTabSelected");
                        }
                    }
                    this.ToggleChildren(tCtrl, pGroup, pID);
                }
            }
        };
        TheControlFactory.prototype.FireControls = function (pProcessMessage) {
            if (!pProcessMessage || !pProcessMessage.Message)
                return false;
            var IsSETP = ((pProcessMessage.Message.TXT.substr(0, 5) === 'SETNP' || pProcessMessage.Message.TXT.substr(0, 6) === 'SETFNP') && !(!pProcessMessage.Message.PLS)); //Tuning - UX Properties only
            var tOWN = (pProcessMessage.Message && pProcessMessage.Message.OWN) ? cde.GuidToString(pProcessMessage.Message.OWN) : null; //Tuning
            var tProps = null; //Tuning
            var tInfo;
            var tControl;
            if (IsSETP) {
                tProps = pProcessMessage.Message.PLS.split(":;:");
                if (tOWN && tProps) {
                    var tIsTP = null;
                    var tTargetControl = cdeNMI.cdeControlType.BaseControl;
                    var tFldOrder = -1;
                    var tp = pProcessMessage.Message.TXT.split(":");
                    if (pProcessMessage.Message.TXT.substr(0, 6) === 'SETFNP') {
                        if (tp.length > 1) {
                            tIsTP = cde.GuidToString(tp[1]);
                        }
                    }
                    if (tp.length > 2) {
                        var tCtrlParts = tp[2].split(';');
                        tTargetControl = cde.CInt(tCtrlParts[0]);
                        if (tCtrlParts.length > 1)
                            tFldOrder = cde.CInt(tCtrlParts[1]);
                    }
                    var myNmiControl = cdeNMI.MyTCF.GetRegisteredControlGroup(tOWN);
                    for (tInfo in myNmiControl) {
                        if (myNmiControl.hasOwnProperty(tInfo)) {
                            tControl = myNmiControl[tInfo];
                            if (tIsTP && tIsTP !== "NULL" && tControl && tInfo !== tIsTP)
                                continue;
                            for (var i = 0; i < tProps.length; i++) {
                                var pos = tProps[i].indexOf("=");
                                var tPName = pos < 0 ? tProps[i] : tProps[i].substr(0, pos);
                                if (pos < 0) {
                                    tControl.SetProperty(tProps[i], true);
                                }
                                else {
                                    if (pos > 0 && pos < tProps[i].length) {
                                        var tPV = "";
                                        if (pos < tProps[i].length - 1)
                                            tPV = tProps[i].substr(pos + 1);
                                        if (tPV.substr(0, 11) !== "&^CDESP1^&:") {
                                            if (tTargetControl > 0 && tControl.MyBaseType > 0 && tControl.MyBaseType !== tTargetControl)
                                                continue;
                                            if (tFldOrder >= 0 && tControl.MyTRF && tControl.MyTRF.FldInfo && tControl.MyTRF.FldInfo.FldOrder !== tFldOrder)
                                                continue;
                                            if (tControl.GetTE())
                                                cdeNMI.ThePB.SetRawProperty(tControl.GetTE(), tPName.trim(), tPV.trim());
                                            else
                                                cdeNMI.ThePB.SetRawProperty(tControl, tPName.trim(), tPV.trim());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (tOWN) {
                    var myNmiThingEvent = cdeNMI.MyNMIThingEvents[tOWN];
                    for (tInfo in myNmiThingEvent) {
                        if (myNmiThingEvent.hasOwnProperty(tInfo)) {
                            tControl = myNmiThingEvent[tInfo];
                            tControl.FireEvent(false, "SETP", pProcessMessage);
                        }
                    }
                }
                else {
                    return false;
                }
            }
            return true;
        };
        TheControlFactory.AddAdHocSmartControl = function (pParent, pID, pType, pHeader, pFlags, pBag) {
            var tTRF = new cdeNMI.TheTRF("NOTABLE", 0, cdeNMI.TheFieldInfo.NewTFI(pType, 0, pHeader, pFlags, pBag));
            var tTileEntry = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(pParent, { TRF: tTRF });
            tTileEntry.CreateControl(pID);
            return tTileEntry;
        };
        return TheControlFactory;
    }(cde.TheMetaDataBase));
    cdeNMI.TheControlFactory = TheControlFactory;
    cdeNMI.MyTCF = new TheControlFactory();
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /////////////////////////////////////////////////////////////
    /// NMI HTML5 Controls
    /////////////////////////////////////////////////////////////
    /**
    Base NMI Control ALL controls inherit from
    */
    var TheNMIBaseControl = /** @class */ (function (_super) {
        __extends(TheNMIBaseControl, _super);
        function TheNMIBaseControl(pTarget, pTRF) {
            var _this = _super.call(this) || this;
            _this.MyTarget = null; //The parent Control
            _this.MyParentCtrl = null; //The surrounding Tile Entry Control
            _this.MyDataView = null; //The owning Form/Table (DataView)
            _this.MyNMIControl = null; //First SubControl
            _this.MyTE = null; /// ctrlTileEntry = null;      //If the control is inside a TE the instance of the TE is found here - V4.107: Any control can be container of another control
            _this.MyBaseType = cdeNMI.cdeControlType.BaseControl; //cdeControl Type of the control
            _this.MyScreenID = null; //The Screen ID (Model) Associated with the Control
            _this.MyFormID = null; //Form that contains the Control
            _this.MyEngineName = null; //The Plugin (Engine) associated with the control
            _this.MyTRF = null; //TheTRF (Table Row Field) definition of the Control
            _this.MyFieldInfo = null; //TheFieldInfo of the Control
            _this.TouchPoints = 0;
            _this.PreventManipulation = false;
            _this.PreventDefault = false;
            _this.Visibility = true;
            _this.IsDisabled = false;
            _this.Is3DObject = false;
            _this.IsDirty = false;
            _this.HasFacePlate = false;
            _this.MyWidth = 0;
            _this.MyHeight = 0;
            _this.lastXYById = [];
            _this.MyChildren = [];
            _this.MySubControls = [];
            _this.WasClicked = false;
            _this.MyRenderTarget = null;
            _this.MyDataItems = [];
            _this.PropertyBag = [];
            if (pTarget) {
                _this.MyTarget = pTarget;
                _this.MyFormID = pTarget.MyFormID;
            }
            _this.MyTRF = pTRF;
            if (pTRF) {
                _this.MyFieldInfo = pTRF.FldInfo;
                if (pTRF.FldInfo)
                    _this.PropertyBag["ID"] = cde.GuidToString(pTRF.FldInfo.cdeMID);
                else
                    _this.PropertyBag["ID"] = "CNMIC" + cdeNMI.MyNMISettings.IDCounter++;
                if (pTRF.FldInfo && !_this.MyFormID)
                    _this.MyFormID = pTRF.FldInfo.FormID;
            }
            else
                _this.PropertyBag["ID"] = "CNMIC" + cdeNMI.MyNMISettings.IDCounter++;
            _this.PropertyBag["Disabled"] = false;
            _this.PropertyBag["TouchPoints"] = 0;
            _this.PreventManipulation = false;
            _this.PropertyBag["AreEventsHooked"] = false;
            return _this;
        }
        TheNMIBaseControl.prototype.SetTRF = function (pTRF, pPropertyBag) {
            if (pTRF) {
                this.MyTRF = pTRF;
                if (pTRF.FldInfo) {
                    this.MyFieldInfo = pTRF.FldInfo;
                    if (this.MyFieldInfo.FormID)
                        this.MyFormID = this.MyFieldInfo.FormID;
                    cdeNMI.ThePB.ConvertPropertiesFromBag(this.MyFieldInfo, pPropertyBag);
                }
            }
            else {
                if (!this.MyFieldInfo && pPropertyBag) {
                    this.MyFieldInfo = new cdeNMI.TheFieldInfo(this.MyBaseType);
                    this.MyTRF = new cdeNMI.TheTRF("", 0, this.MyFieldInfo);
                    cdeNMI.ThePB.ConvertPropertiesFromBag(this.MyFieldInfo, pPropertyBag);
                }
            }
        };
        TheNMIBaseControl.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            if (pTargetControl) {
                this.MyTarget = pTargetControl;
                this.MyTarget.MyChildren.push(this);
            }
            this.SetTRF(pTRF, pPropertyBag);
            if (pScreenID)
                this.MyScreenID = cde.GuidToString(pScreenID);
            if (!this.MyFormID && pTargetControl)
                this.MyFormID = pTargetControl.MyFormID;
            this.RegisterEvent("NMI_SHAPE_RECOGNIZED", function (pSend, pName, pScore) { _this.eventShapeRecognized(pSend, pName, pScore); });
            return true;
        };
        TheNMIBaseControl.prototype.eventShapeRecognized = function (sender, pName, pScore) {
            if (!cde.MyBaseAssets.MyServiceHostInfo.RedPill)
                return;
            //TODO: New Feature: Control Updates and new controls
            if (pScore > 1) {
                cdeNMI.ShowToastMessage("Name: " + pName + " Score:" + pScore.toFixed(2));
                if (cde.MyEventLogger)
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ShapeRecognizer", "Name: " + pName + " Score:" + pScore.toFixed(2));
                switch (pName) {
                    case "circle":
                    case "rightmouse": {
                        //TODO: Send Properties of control to NMI Editor
                        this.SetProperty("Background", "pink");
                        var tSideBar = document.getElementById("cdeSideBarRight");
                        if (tSideBar && !tSideBar.classList.contains("cde-animate-right")) {
                            tSideBar.classList.add("cde-animate-right");
                            tSideBar.style.display = '';
                        }
                        break;
                    }
                }
            }
            else {
                cdeNMI.ShowToastMessage("Guess is : " + pName + " but Score too low:" + pScore.toFixed(2));
            }
        };
        TheNMIBaseControl.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if (pName === "PreventManipulation") {
                if (typeof pValue === "undefined" || cde.CBool(pValue)) {
                    pValue = true;
                }
                this.PreventManipulation = pValue;
                return;
            }
            if (pName === "PreventDefault" || pName === "EnableMT") {
                if (typeof pValue === "undefined" || cde.CBool(pValue)) {
                    pValue = true;
                }
                this.PreventDefault = pValue;
                return;
            }
            var tOldValue = this.PropertyBag[pName];
            if (pName === "iValue") {
                tOldValue = this.PropertyBag["Value"];
                this.PropertyBag["Value"] = pValue;
                if (pValue !== tOldValue) {
                    this.FireEvent(false, "OniValueChanged", "SetProperty", pValue, pName);
                }
                return;
            }
            else
                this.PropertyBag[pName] = pValue;
            if (pName === "OnThingEvent") {
                this.RegisterSetP(function (pControl, pMsg) {
                    if (pMsg.Message.TXT.substr(0, 4) === "SETP" || pMsg.Message.TXT.substr(0, 5) === "SETFP") { //ThingProperties only
                        var tProps = pMsg.Message.PLS.split(":;:");
                        for (var i = 0; i < tProps.length; i++) {
                            var pos = tProps[i].indexOf("=");
                            var tPropName = "";
                            var tPropValue = true;
                            if (pos < 0) {
                                tPropName = tProps[i];
                                tPropValue = true;
                            }
                            else {
                                if (pos > 0 && pos < tProps[i].length) {
                                    tPropName = tProps[i].substr(0, pos);
                                    if (pos < tProps[i].length + 1)
                                        tPropValue = tProps[i].substr(pos + 1);
                                    if (tPropName.substr(0, 11) === "&^CDESP1^&:")
                                        continue;
                                }
                            }
                            if (tPropName.length > 0) {
                                if (tPropName === pControl.GetProperty("OnThingEvent")) {
                                    pControl.SetProperty("iValue", tPropValue);
                                    if (pControl.MyTRF && (pControl.MyTRF.ModelID || pControl.MyScreenID)) {
                                        var tModel = cdeNMI.MyNMIModels[pControl.MyTRF.ModelID ? pControl.MyTRF.ModelID : pControl.MyScreenID];
                                        if (tModel && tModel.MyStorageMirror[pControl.MyTRF.TableName])
                                            cdeNMI.UpdFldContent(tModel.MyStorageMirror[pControl.MyTRF.TableName][pControl.MyTRF.RowNo], pControl.MyFieldInfo, tPropValue, null);
                                    }
                                    else {
                                        var tCtrl = pControl.MyNMIControl;
                                        if (tCtrl && tCtrl.MyTRF && tCtrl.MyScreenID) {
                                            var tIModel = cdeNMI.MyNMIModels[tCtrl.MyScreenID];
                                            if (tIModel && tIModel.MyStorageMirror[tCtrl.MyTRF.TableName])
                                                cdeNMI.UpdFldContent(tIModel.MyStorageMirror[tCtrl.MyTRF.TableName][tCtrl.MyTRF.RowNo], tCtrl.MyFieldInfo, tPropValue, null);
                                        }
                                    }
                                    _this.FireEvent(true, "OnPropertyChanged", "SetProperty", tPropValue, "iValue");
                                }
                            }
                        }
                    }
                });
            }
            if (pName === "OniValueChanged") {
                this.RegisterEvent("OniValueChanged", pValue);
                this.FireEvent(true, "OniValueChanged", "SetProperty", this.PropertyBag["Value"], "Value");
            }
            else if (pName === "OnValueChanged") {
                this.RegisterEvent("OnValueChanged", pValue);
                return;
            }
            else if (pName === "OnPropertyChanged") {
                this.RegisterEvent("OnPropertyChanged", pValue);
                return;
            }
            else if (pName === "OnPropertySet") {
                this.RegisterEvent("OnPropertySet", pValue);
                return;
            }
            else if (pName === "RegisterEvent") {
                var tPara = pValue.split(":;:");
                if (tPara.length > 1) {
                    this.RegisterEvent(tPara[0], tPara[1]);
                }
            }
            else if (pName === "Value") {
                if (pValue !== tOldValue) {
                    this.IsDirty = true;
                    this.FireEvent(true, "OnValueChanged", "SetProperty", pValue, this.MyTRF);
                    this.FireEvent(true, "OniValueChanged", "SetProperty", pValue, pName);
                }
            }
            else if (pName === "Visibility" && this.MyRootElement) {
                pValue = cde.CBool(pValue);
                this.Visibility = pValue;
                if (typeof pValue === "undefined" || pValue) {
                    this.MyRootElement.style.display = '';
                    this.OnLoad(this.Visibility);
                }
                else {
                    this.MyRootElement.style.display = 'none';
                    this.OnUnload();
                }
            }
            else if (pName === "IsOwnerDown") {
                if (pValue === true) {
                    if (this.GetProperty(pName) === true)
                        return;
                    this.mOldClassName = this.MyRootElement.className;
                    this.MyRootElement.className += " cdeNodeGone";
                }
                else {
                    if (this.GetProperty(pName) !== true)
                        return;
                    this.MyRootElement.className = this.mOldClassName;
                }
            }
            else if (pName === "Disabled" && this.MyRootElement) {
                this.IsDisabled = cde.CBool(pValue);
                if (this.IsDisabled) {
                    this.MyRootElement.style.opacity = "0.5";
                }
                else {
                    this.MyRootElement.style.opacity = "1.0";
                }
            }
            else if (pName === "Draggable") {
                this.MyRootElement.draggable = cde.CBool(pValue);
            }
            else if (pName === "TID") {
                this.PropertyBag["ID"] = pValue; //Set ID to ThingID without setting root ID of the field - required for table updates
            }
            else if ((pName === "ID" || pName === "MID") && pValue && this.MyRootElement) {
                this.MyRootElement.id = cde.GuidToString(pValue);
                this.PropertyBag["ID"] = pValue; //TODO: TEST table Update scenarios
            }
            else if (pName === "ClassName" && (pValue || pValue === "") && this.MyRootElement) {
                this.MyRootElement.className = pValue;
            }
            else if (pName === "AddClassName" && (pValue || pValue === "") && this.MyRootElement) {
                if (!this.MyRootElement.classList.contains(pValue))
                    this.MyRootElement.classList.add(pValue);
            }
            else if (pName === "RemoveClassName" && (pValue || pValue === "") && this.MyRootElement) {
                if (this.MyRootElement.classList.contains(pValue))
                    this.MyRootElement.classList.remove(pValue);
            }
            else if (pName === "TEClassName" && (pValue || pValue === "")) {
                if (this.MyTE && this.MyTE.MyNMIControl)
                    this.MyTE.MyNMIControl.SetProperty("ClassName", pValue);
            }
            else if (pName === "Display" && pValue && this.MyRootElement) {
                this.MyRootElement.style.display = pValue;
            }
            else if (pName === "Style" && pValue && this.MyRootElement) {
                this.MyRootElement.style.cssText += pValue;
            }
            else if (pName === "Opacity" && this.MyRootElement) {
                this.MyRootElement.style.opacity = pValue;
            }
            else if (pName === "HorizontalAlignment" && this.MyRootElement) {
                this.MyRootElement.style.textAlign = pValue.toLowerCase();
            }
            else if (pName === "VerticalAlignment" && this.MyRootElement) {
                this.MyRootElement.style.verticalAlign = pValue.toLowerCase();
            }
            else if (pName === "Float" && this.MyRootElement) {
                this.MyRootElement.style.cssFloat = pValue;
            }
            else if (pName === "FontSize" && this.MyRootElement) {
                this.MyRootElement.style.fontSize = pValue + "px";
            }
            else if (pName === "Margin" && this.MyRootElement) {
                this.MyRootElement.style.margin = pValue + "px";
            }
            else if (pName === "Z-Index" && this.MyRootElement) {
                //this.MyRootElement.style.position = "relative";       //V4.107: Why?????
                this.MyRootElement.style.zIndex = pValue.toString();
            }
            else if (pName === "PixelWidth" && this.MyRootElement) {
                if (pValue) {
                    if (pValue.toString().endsWith("px") || pValue.toString().endsWith("%") || pValue === "auto")
                        this.MyRootElement.style.width = pValue;
                    else
                        this.MyRootElement.style.width = pValue + "px";
                }
            }
            else if (pName === "PixelHeight" && this.MyRootElement) {
                if (pValue) {
                    if (pValue.toString().endsWith("px") || pValue.toString().endsWith("%") || pValue === "auto")
                        this.MyRootElement.style.height = pValue;
                    else
                        this.MyRootElement.style.height = pValue + "px";
                }
            }
            else if (pName === "TileFactorX" && this.MyRootElement) {
                this.SetInitialWidth(1);
            }
            else if (pName === "TileFactorY" && this.MyRootElement) {
                this.SetInitialHeight(1);
            }
            else if (pName === "TileWidth" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                if (pValue === 0)
                    pValue = 1;
                var tScrolRes = 0;
                this.SetWidth(this.MyRootElement, pValue, this.MyBaseType === cdeNMI.cdeControlType.Screen ? tScrolRes : (this.MyBaseType === cdeNMI.cdeControlType.TileEntry ? 0 : 1));
                //this.MyRootElement.style.width = cdeNMI.GetSizeFromTile(pValue).toString() + "px";
            }
            else if (pName === "TileHeight" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                if (pValue < 0)
                    this.MyRootElement.style.height = "inherit";
                else {
                    if (pValue < 1)
                        pValue = 1;
                    this.SetHeight(this.MyRootElement, pValue, this.MyBaseType === cdeNMI.cdeControlType.Screen ? 0 : (this.MyBaseType === cdeNMI.cdeControlType.TileEntry ? 0 : 1));
                    //this.MyRootElement.style.height = cdeNMI.GetSizeFromTile(pValue).toString() + "px";
                }
            }
            else if (pName === "MaxTileWidth" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                var tMaxWid = cdeNMI.GetSizeFromTile(pValue);
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1 && this.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup && this.MyFieldInfo && this.MyFieldInfo.FldOrder === 1 && cde.CBool(this.GetProperty("UseMargin")) === true) {
                    var tSegments = Math.floor(pValue / 6);
                    if (tSegments > 0)
                        tMaxWid += cdeNMI.GetSizeFromTile(tSegments) / 2;
                }
                if (cdeNMI.MyScreenManager && cdeNMI.MyScreenManager.DocumentWidth > 0 && tMaxWid > cdeNMI.MyScreenManager.DocumentWidth)
                    tMaxWid = cdeNMI.MyScreenManager.DocumentWidth - (cdeNMI.GetSizeFromTile(1));
                this.MyRootElement.style.maxWidth = tMaxWid + "px";
            }
            else if (pName === "BackgroundImage" && this.MyRootElement) {
                if (pValue.substr(0, 1) === "{") {
                    var tPlanar = null;
                    tPlanar = JSON.parse(pValue);
                    this.MyRootElement.style.backgroundImage = "url('data:image/jpeg;base64," + tPlanar.Bits + "')";
                }
                else {
                    this.MyRootElement.style.backgroundImage = "url('" + pValue + "')";
                }
            }
            else if (pName === "TileLeft" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                this.MyRootElement.style.left = ((cdeNMI.GetSizeFromTile(1) * pValue) + (cdeNMI.MyNMISettings.TileMargin * ((pValue * 2) + 1))).toString() + "px";
            }
            else if (pName === "TileTop" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                this.MyRootElement.style.top = ((cdeNMI.GetSizeFromTile(1) * pValue) + (cdeNMI.MyNMISettings.TileMargin * ((pValue * 2) + 1))).toString() + "px";
            }
            else if (pName === "Top" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                this.MyRootElement.style.top = pValue.toString() + "px";
            }
            else if (pName === "Left" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                this.MyRootElement.style.left = pValue.toString() + "px";
            }
            else if (pName === "Right" && this.MyRootElement) {
                pValue = cde.CInt(pValue);
                this.MyRootElement.style.right = pValue.toString() + "px";
            }
            else if (pName === "IsAbsolute" && this.MyRootElement) {
                if (cde.CBool(pValue)) {
                    this.MyRootElement.style.position = "absolute";
                }
                else
                    this.MyRootElement.style.position = "relative";
            }
            else if (pName === "IsHitTestDisabled" && this.MyRootElement) {
                if (cde.CBool(pValue))
                    this.MyRootElement.style.pointerEvents = 'none';
                else
                    this.MyRootElement.style.pointerEvents = '';
            }
            else if (pName === "NUITags" && pValue && cdeNMI.MyEngine) {
                var t_3 = pValue.toString().split(';');
                for (var i = 0; i < t_3.length; i++)
                    cdeNMI.MyNMINUITags[t_3[i]] = this;
            }
            else if (pName === "EngineName" && pValue && pValue !== "") {
                this.MyEngineName = pValue;
            }
            if (pValue !== tOldValue) {
                this.FireEvent(true, "OnPropertyChanged", "SetProperty", pValue, pName);
                var tS = this.GetProperty(pName + "_TCB");
                if (tS) {
                    var tSpan = document.getElementById(tS.TargetID);
                    if (tSpan) {
                        tSpan.innerHTML = pValue;
                    }
                }
            }
            this.FireEvent(true, "OnPropertySet", "SetProperty", pValue, pName);
        };
        TheNMIBaseControl.prototype.SetToDefault = function (bOnlyIfEmpty) {
            if (bOnlyIfEmpty && !cde.IsNotSet(this.GetProperty("Value")))
                return null;
            if (this.MyFieldInfo && this.MyFieldInfo["DefaultValue"]) {
                this.SetProperty("iValue", this.MyFieldInfo["DefaultValue"]);
                return this.MyFieldInfo["DefaultValue"];
            }
            else {
                this.SetProperty("iValue", null);
            }
            return null;
        };
        TheNMIBaseControl.prototype.toJSON = function () {
            var myarray = [];
            var propertyBag = this.PropertyBag;
            for (var tID in propertyBag) {
                if (propertyBag.hasOwnProperty(tID)) {
                    var item = {
                        "N": tID,
                        "V": propertyBag[tID]
                    };
                    myarray.push(item);
                }
            }
            var t = {
                "PropertyBag": myarray,
                "ScreenID": this.MyScreenID,
                "TRF": this.MyTRF,
                "EngineName": this.MyEngineName,
                "BaseType": this.MyBaseType,
                "FieldInfo": this.MyFieldInfo
            };
            return t;
        };
        /**
            Registers an event on the current Control derived from The NMIBaseControl
        */
        TheNMIBaseControl.prototype.RegisterIncomingMessage = function (pEngineName, eventHandler) {
            var tID = this.RegisterNMIControl();
            this.MyEngineName = pEngineName;
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.RegisterIncomingMsg(this, tID, pEngineName);
            this.RegisterEvent("IncomingMessage", eventHandler);
        };
        TheNMIBaseControl.prototype.RegisterNMIControl = function () {
            var tOWN = this.GetProperty("UXID");
            if (!tOWN) {
                if (this.MyFieldInfo && this.MyFieldInfo.cdeMID)
                    tOWN = this.MyFieldInfo.cdeMID;
                else
                    return null;
            }
            tOWN = cde.GuidToString(tOWN);
            var tID = cde.GuidToString(this.GetProperty("ID"));
            if (cdeNMI.MyTCF) {
                cdeNMI.MyTCF.RegisterControl(tOWN, tID, this);
                //if (!cdeNMI.MyTCF.MyNMIControls[tOWN])
                //    cdeNMI.MyTCF.MyNMIControls[tOWN] = [];
                //cdeNMI.MyTCF.MyNMIControls[tOWN][tID] = this;
            }
            return tID;
        };
        TheNMIBaseControl.prototype.RegisterThingSetP = function (pOWN, pName) {
            var tOWN = cde.GuidToString(pOWN);
            var tID = cde.GuidToString(this.GetProperty("ID"));
            this.SetProperty("MyThing", tOWN);
            if (!cdeNMI.MyNMIThingEvents[tOWN])
                cdeNMI.MyNMIThingEvents[tOWN] = [];
            cdeNMI.MyNMIThingEvents[tOWN][tID] = this;
            this.SetProperty("OnThingEvent", pName);
        };
        TheNMIBaseControl.prototype.RegisterSetP = function (eventHandler) {
            this.RegisterNMIControl();
            this.RegisterEvent("SETP", eventHandler); //ThingProperties:SETP
        };
        TheNMIBaseControl.prototype.Create = function (pTargetControl, pOptions) {
            try {
                if (pOptions) {
                    if (pOptions.Cookie)
                        this.SetProperty("Cookie", pOptions.Cookie);
                    this.InitControl(pTargetControl, pOptions.TRF, pOptions.PreInitBag, pOptions.ScreenID);
                    if (pOptions.PostInitBag) {
                        cdeNMI.ThePB.SetPropertiesFromBag(this, pOptions.PostInitBag);
                    }
                }
                else {
                    this.InitControl(pTargetControl);
                }
            }
            catch (exe) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "BaseControl:Create", "Failed with Exception:" + exe);
                return null;
            }
            return this;
        };
        TheNMIBaseControl.prototype.SetTE = function (pTE) {
            this.MyTE = pTE;
        };
        TheNMIBaseControl.prototype.GetTE = function () {
            return this.MyTE;
        };
        TheNMIBaseControl.prototype.ReloadData = function () {
            return false;
        };
        TheNMIBaseControl.prototype.ToggleDrop = function (doClose, doForce) {
            //overrride if required
        };
        TheNMIBaseControl.prototype.SetElement = function (pRootControl, pHookEvents, pContainerElement, NoFireOnLoad) {
            if (pRootControl)
                this.MyRootElement = pRootControl;
            else {
                if (this.MyTarget)
                    this.MyRootElement = this.MyTarget.GetContainerElement();
            }
            if (pContainerElement) {
                this.MyContainerElement = pContainerElement;
            }
            if (this.MyTarget && this.MyTarget.GetContainerElement() && this.MyTarget.GetContainerElement() !== this.MyRootElement) {
                this.MyTarget.AppendElement(pRootControl);
            }
            if (pHookEvents && this.GetSetting("Disabled") !== true) {
                this.HookEvents(false);
            }
            if (this.MyFieldInfo && cde.CBool(NoFireOnLoad) !== true) {
                if (this.GetSetting("OnLoaded") && cdeNMI.MyEngine) { //OnLoaded OK
                    cdeNMI.MyEngine.PublishToNMI("NMI_FLD_LOADED:" + this.MyFieldInfo.cdeMID, this.GetSetting("OnLoaded"), this.cdeN); //OnLoaded OK
                }
            }
        };
        TheNMIBaseControl.prototype.DeleteControl = function (tControl) {
            if (!tControl)
                return;
            if (this.GetContainerElement() && tControl.GetContainerElement().parentElement === this.MyRootElement)
                this.GetContainerElement().removeChild(tControl.GetElement());
        };
        TheNMIBaseControl.prototype.AppendChild = function (pChild) {
            if (pChild && this.GetContainerElement())
                this.GetContainerElement().appendChild(pChild.GetElement());
        };
        TheNMIBaseControl.prototype.RemoveChild = function (pChild) {
            if (pChild) {
                this.GetContainerElement().removeChild(pChild.GetElement());
            }
        };
        TheNMIBaseControl.prototype.AppendElement = function (pEle) {
            this.GetContainerElement().appendChild(pEle);
        };
        TheNMIBaseControl.prototype.HookEvents = function (bDoCapture) {
            var _this = this;
            if (this.PropertyBag["AreEventsHooked"] === true)
                return;
            this.PropertyBag["AreEventsHooked"] = true;
            this.MyRootElement.addEventListener("selectstart", function (e) { cdeNMI.StopPointerEvents(e); }, bDoCapture);
            this.MyRootElement.addEventListener("contextmenu", function (e) { cdeNMI.StopPointerEvents(e); }, bDoCapture);
            this.MyRootElement.addEventListener("MSHoldVisual", function (e) { cdeNMI.StopPointerEvents(e); }, bDoCapture);
            this.MyRootElement.addEventListener("keyup", function (evt) { return _this.sinkDoKey(evt); }, bDoCapture);
            this.MyRootElement.addEventListener("keydown", function (evt) { return _this.sinkDoKey(evt); }, bDoCapture);
            if (cdeNMI.MyNMISettings.SupportsPointer) {
                //  W3C pointer model = IE11
                this.MyRootElement.addEventListener("pointerdown", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("pointermove", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("pointerup", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("pointercancel", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                if (this.PropertyBag["IsPointerOutAllowed"] !== true) {
                    this.MyRootElement.addEventListener("pointerout", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                }
            }
            else if (window.navigator.msPointerEnabled) {
                //  Microsoft pointer model = IE10
                this.MyRootElement.addEventListener("MSPointerDown", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("MSPointerMove", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("MSPointerUp", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("MSPointerCancel", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                if (this.PropertyBag["IsPointerOutAllowed"] !== true) {
                    this.MyRootElement.addEventListener("MSPointerOut", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                }
            }
            else if (this.MyRootElement.addEventListener) {
                //  iOS touch model
                this.MyRootElement.addEventListener("touchstart", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("touchmove", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("touchend", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("touchcancel", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                //  mouse model
                this.MyRootElement.addEventListener("mousedown", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("mousemove", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                this.MyRootElement.addEventListener("mouseup", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                if (this.PropertyBag["IsPointerOutAllowed"] !== true) {
                    this.MyRootElement.addEventListener("mouseleave", function (evt) { return _this.sinkDoEvent(evt); }, bDoCapture);
                }
            }
        };
        TheNMIBaseControl.prototype.PreventDefaultManipulationAndMouseEvent = function (evtObj) {
            var MyControlstyle;
            if (this.PreventDefault) {
                cdeNMI.StopPointerEvents(evtObj);
                //if (typeof this.MyRootElement.style.msContentZooming !== 'undefined')
                //    this.MyRootElement.style.msContentZooming = "none";
                //if (typeof this.MyRootElement.style.msTouchAction !== 'undefined')
                //    this.MyRootElement.style.msTouchAction = "none";
                MyControlstyle = this.MyRootElement.style;
                MyControlstyle.touchAction = "none";
            }
            else {
                //if (typeof this.MyRootElement.style.msContentZooming !== 'undefined')
                //    this.MyRootElement.style.msContentZooming = "zoom";
                //if (typeof this.MyRootElement.style.msTouchAction !== 'undefined')
                //    this.MyRootElement.style.msTouchAction = "auto";
                MyControlstyle = this.MyRootElement.style;
                MyControlstyle.touchAction = "auto";
            }
            if (evtObj && this.PreventManipulation) {
                if (evtObj.preventManipulation)
                    evtObj.preventManipulation();
                if (evtObj.preventMouseEvent)
                    evtObj.preventMouseEvent();
            }
        };
        TheNMIBaseControl.GetControlXY = function (o) {
            var z = o, x = 0, y = 0, c;
            while (z && !isNaN(z.offsetLeft) && !isNaN(z.offsetTop)) {
                var anyWindow = window;
                c = anyWindow.globalStorage ? null : window.getComputedStyle(z, null);
                x += z.offsetLeft - z.scrollLeft + (c ? parseInt(c.getPropertyValue('border-left-width'), 10) : 0);
                y += z.offsetTop - z.scrollTop + (c ? parseInt(c.getPropertyValue('border-top-width'), 10) : 0);
                z = z.offsetParent;
            }
            return { x: o.X = x, y: o.Y = y };
        };
        TheNMIBaseControl.findPos = function (obj, foundScrollLeft, foundScrollTop) {
            var curleft = 0;
            var curtop = 0;
            if (obj.offsetLeft)
                curleft += parseInt(obj.offsetLeft);
            if (obj.offsetTop)
                curtop += parseInt(obj.offsetTop);
            if (obj.scrollTop && obj.scrollTop > 0) {
                curtop -= parseInt(obj.scrollTop);
                foundScrollTop = true;
            }
            if (obj.scrollLeft && obj.scrollLeft > 0) {
                curleft -= parseInt(obj.scrollLeft);
                foundScrollLeft = true;
            }
            var pos;
            if (obj.offsetParent) {
                pos = TheNMIBaseControl.findPos(obj.offsetParent, foundScrollLeft, foundScrollTop);
                curleft += pos.x;
                curtop += pos.y;
            }
            else if (obj.ownerDocument) {
                var thewindow = obj.ownerDocument.defaultView;
                if (!thewindow && obj.ownerDocument.parentWindow)
                    thewindow = obj.ownerDocument.parentWindow;
                if (thewindow) {
                    if (!foundScrollTop && thewindow.scrollY && thewindow.scrollY > 0)
                        curtop -= parseInt(thewindow.scrollY);
                    if (!foundScrollLeft && thewindow.scrollX && thewindow.scrollX > 0)
                        curleft -= parseInt(thewindow.scrollX);
                    if (thewindow.frameElement) {
                        pos = TheNMIBaseControl.findPos(thewindow.frameElement, 0, 0);
                        curleft += pos.x;
                        curtop += pos.y;
                    }
                }
            }
            return { x: curleft, y: curtop };
        };
        TheNMIBaseControl.prototype.EnsurePageXY = function (eventObj) {
            if (typeof eventObj.pageX === 'undefined') {
                var tDoc = cdeNMI.ThePointer.ComputeDocumentToElementDelta(this.MyRootElement);
                eventObj.pageX = eventObj.offsetX + tDoc.x;
                eventObj.pageY = eventObj.offsetY + tDoc.y;
            }
        };
        TheNMIBaseControl.prototype.GetTouchPointer = function (pID) {
            var lastXyById = this.lastXYById;
            for (var index in lastXyById) {
                if (lastXyById.hasOwnProperty(index)) {
                    if (lastXyById[index] && lastXyById[index].Identifier === pID)
                        return lastXyById[index];
                }
            }
            return null;
        };
        TheNMIBaseControl.prototype.GetTouchPointerIdx = function (pID) {
            var lastXyById = this.lastXYById;
            for (var index in lastXyById) {
                if (lastXyById.hasOwnProperty(index)) {
                    if (lastXyById[index] && lastXyById[index].Identifier === pID)
                        return parseInt(index);
                }
            }
            return -1;
        };
        TheNMIBaseControl.prototype.sinkDoKey = function (pKeyEvt) {
            switch (pKeyEvt.type) {
                case "keyup":
                    this.FireEvent(true, "KeyUp", pKeyEvt);
                    break;
                case "keydown":
                    this.FireEvent(true, "KeyDown", pKeyEvt);
                    break;
            }
        };
        TheNMIBaseControl.prototype.sinkDoEvent = function (pEvtObj) {
            if (cde.CBool(this.GetProperty("IsHitTestDisabled")) || cde.CBool(this.GetProperty("IsUnhooked")))
                return;
            if (pEvtObj.type === "mousemove" && this.lastXYById.length === 0 && !cde.CBool(this.GetProperty("AllowMoveWithoutDown")))
                return;
            var IsTouchDown = pEvtObj.type.match(/(start|down)$/i) !== null;
            var IsTouchMove = pEvtObj.type.match(/move$/i) !== null;
            var IsTouchEnd = pEvtObj.type.match(/(up|end|cancel|out|leave)$/i) !== null;
            var IsTouchCancel = pEvtObj.type.match(/(cancel|out|leave)$/i) !== null;
            if (IsTouchDown && pEvtObj.buttons === 1) {
                cdeNMI.IsMouseDown = true;
            }
            if (IsTouchEnd && pEvtObj.buttons === 0) {
                cdeNMI.IsMouseDown = false;
            }
            var tEvtType = cdeNMI.cdeInputEvent.IDLE;
            if (IsTouchDown)
                tEvtType = cdeNMI.cdeInputEvent.START;
            else if (IsTouchMove)
                tEvtType = cdeNMI.cdeInputEvent.MOVE;
            else
                tEvtType = cdeNMI.cdeInputEvent.END;
            if (this.PreventManipulation || this.PreventDefault) //IsTouchDown
                this.PreventDefaultManipulationAndMouseEvent(pEvtObj);
            var pointerList = pEvtObj.changedTouches ? pEvtObj.changedTouches : [pEvtObj];
            var tPS = this.lastXYById.length;
            if (IsTouchDown)
                tPS += pointerList.length;
            this.TouchPoints = tPS;
            for (var i = 0; i < pointerList.length; ++i) {
                var pointerObj = pointerList[i];
                var pointerId = (typeof pointerObj.identifier !== 'undefined') ? pointerObj.identifier : (typeof pointerObj.pointerId !== 'undefined') ? pointerObj.pointerId : 1;
                this.EnsurePageXY(pointerObj);
                var tTouchObj = null;
                if (this.GetProperty("IsOverlay") === true)
                    tTouchObj = new cdeNMI.ThePointer(this.MyRootElement, pointerId, pointerObj.clientX, pointerObj.clientY, 0, this.GetStrokeWidth(pEvtObj), this.GetEventType(pEvtObj), tEvtType, pEvtObj.buttons);
                else
                    tTouchObj = new cdeNMI.ThePointer(this.MyRootElement, pointerId, pointerObj.pageX, pointerObj.pageY, 0, this.GetStrokeWidth(pEvtObj), this.GetEventType(pEvtObj), tEvtType, pEvtObj.buttons);
                var lastTouchObj = this.GetTouchPointer(pointerId);
                var idx = void 0;
                if (IsTouchDown) {
                    if (lastTouchObj) {
                        idx = this.GetTouchPointerIdx(lastTouchObj.Identifier);
                        this.lastXYById.splice(idx, 1);
                        if (this.HasEvent("PointerUp") && pEvtObj.currentTarget !== document) {
                            lastTouchObj.Update(this.MyRootElement, tTouchObj.Position);
                            lastTouchObj.pointerEvent = cdeNMI.cdeInputEvent.END;
                            if (!cdeNMI.MyNMISettings.IsScrolling)
                                this.FireEvent(true, "PointerUp", pEvtObj, lastTouchObj);
                        }
                    }
                    else
                        lastTouchObj = tTouchObj;
                    //  init last page positions for this pointer
                    this.lastXYById.push(lastTouchObj);
                    if (this.HasEvent("PointerDown") && (pEvtObj.type === "mousedown" || pEvtObj.currentTarget !== document)) {
                        lastTouchObj.Update(this.MyRootElement, tTouchObj.Position);
                        lastTouchObj.pointerEvent = tTouchObj.pointerEvent;
                        if (!cdeNMI.MyNMISettings.IsScrolling)
                            this.FireEvent(true, "PointerDown", pEvtObj, lastTouchObj);
                        if (this.PreventDefault)
                            cdeNMI.StopPointerEvents(pEvtObj);
                    }
                }
                else if (IsTouchMove) {
                    if (lastTouchObj && !(lastTouchObj.Position.x === tTouchObj.Position.x && lastTouchObj.Position.y === tTouchObj.Position.y)) {
                        lastTouchObj.Update(this.MyRootElement, tTouchObj.Position);
                        lastTouchObj.pointerEvent = tTouchObj.pointerEvent;
                        if (this.HasEvent("PointerMove") && (pEvtObj.type === "mousemove" || pEvtObj.currentTarget !== document)) {
                            if (!cdeNMI.MyNMISettings.IsScrolling)
                                this.FireEvent(true, "PointerMove", pEvtObj, lastTouchObj);
                            if (this.PreventDefault)
                                cdeNMI.StopPointerEvents(pEvtObj);
                        }
                    }
                    else if (!lastTouchObj && cde.CBool(this.GetProperty("AllowMoveWithoutDown"))) {
                        lastTouchObj = tTouchObj;
                        this.lastXYById.push(lastTouchObj);
                        if (this.HasEvent("PointerMove") && (pEvtObj.type === "mousemove" || pEvtObj.currentTarget !== document)) {
                            if (!cdeNMI.MyNMISettings.IsScrolling)
                                this.FireEvent(true, "PointerMove", pEvtObj, tTouchObj);
                            if (this.PreventDefault)
                                cdeNMI.StopPointerEvents(pEvtObj);
                        }
                    }
                }
                else if (IsTouchEnd) {
                    if (lastTouchObj) {
                        if (cdeNMI.MyTouchOverlay && (!cdeNMI.MyTouchOverlay.CurrentControl || !(cdeNMI.MyTouchOverlay.CurrentControl === this || (cdeNMI.MyTouchOverlay.CurrentControl).MyNMIControl === this))) { //V4.107: MyEditControl is now in MyFirstChild
                            if (cdeNMI.MyTouchOverlay.MyBaseType === this.MyBaseType || cde.CInt(this.GetElement().style.zIndex) < 1000) {
                                if (this.PreventDefault)
                                    cdeNMI.StopPointerEvents(pEvtObj);
                                if (!cdeNMI.MyNMISettings.IsScrolling)
                                    cdeNMI.MyTouchOverlay.FireEvent(false, "Touched");
                                idx = this.GetTouchPointerIdx(lastTouchObj.Identifier);
                                this.lastXYById.splice(idx, 1);
                                break;
                            }
                        }
                        if (this.HasEvent("PointerUp") && !IsTouchCancel && (pEvtObj.type === "mouseup" || pEvtObj.currentTarget !== document)) {
                            lastTouchObj.Update(this.MyRootElement, tTouchObj.Position);
                            lastTouchObj.pointerEvent = tTouchObj.pointerEvent;
                            if (!cdeNMI.MyNMISettings.IsScrolling)
                                this.FireEvent(true, "PointerUp", pEvtObj, lastTouchObj);
                            cdeNMI.StopPointerEvents(pEvtObj);
                        }
                        else if (this.HasEvent("PointerCancel") && IsTouchCancel && (pEvtObj.type === "mouseup" || pEvtObj.currentTarget !== document)) {
                            lastTouchObj.Update(this.MyRootElement, tTouchObj.Position);
                            lastTouchObj.pointerEvent = tTouchObj.pointerEvent;
                            if (!cdeNMI.MyNMISettings.IsScrolling)
                                this.FireEvent(true, "PointerCancel", pEvtObj, lastTouchObj);
                            if (this.PreventDefault)
                                cdeNMI.StopPointerEvents(pEvtObj);
                        }
                        idx = this.GetTouchPointerIdx(lastTouchObj.Identifier);
                        this.lastXYById.splice(idx, 1);
                    }
                }
            }
            this.TouchPoints = this.lastXYById.length;
        };
        TheNMIBaseControl.prototype.GetEventType = function (pEvent) {
            var msEvent = pEvent;
            if (msEvent.mozInputSource) {
                switch (msEvent.mozInputSource) { //Pen
                    case 6: //keyboard
                        return cdeNMI.cdeInputEventType.KEYBOARD;
                    case 3: //Erasor
                        return cdeNMI.cdeInputEventType.ERASER;
                    case 2: //Pen
                        return cdeNMI.cdeInputEventType.PEN;
                    case 5: //Touch
                        return cdeNMI.cdeInputEventType.TOUCH;
                    case 1: //Mouse
                        return cdeNMI.cdeInputEventType.MOUSE;
                    default:
                        return cdeNMI.cdeInputEventType.UNKOWN;
                }
            }
            else if (msEvent.pointerType) {
                if (msEvent.buttons && (msEvent.buttons & 32) !== 0)
                    return cdeNMI.cdeInputEventType.ERASER;
                if (typeof msEvent.pointerType === "string") {
                    switch (msEvent.pointerType) {
                        case "touch":
                            return cdeNMI.cdeInputEventType.TOUCH;
                        case "pen":
                            return cdeNMI.cdeInputEventType.PEN;
                        case "mouse":
                            return cdeNMI.cdeInputEventType.MOUSE;
                        default:
                            return cdeNMI.cdeInputEventType.UNKOWN;
                    }
                }
                else {
                    switch (msEvent.pointerType) {
                        case msEvent.MSPOINTER_TYPE_TOUCH:
                            return cdeNMI.cdeInputEventType.TOUCH;
                        case msEvent.MSPOINTER_TYPE_PEN:
                            return cdeNMI.cdeInputEventType.PEN;
                        case msEvent.MSPOINTER_TYPE_MOUSE:
                            return cdeNMI.cdeInputEventType.MOUSE;
                        default:
                            return cdeNMI.cdeInputEventType.UNKOWN;
                    }
                }
            }
            return cdeNMI.cdeInputEventType.MOUSE;
        };
        TheNMIBaseControl.prototype.GetStrokeWidth = function (pEvent) {
            var tStroke = 20;
            var msEvent = pEvent;
            if (msEvent.mozInputSource) {
                var tPressure = 0.5;
                if (msEvent.mozPressure)
                    tPressure = msEvent.mozPressure;
                switch (msEvent.mozInputSource) { //Pen
                    case 3: //Erasor
                        tStroke = tPressure * 50;
                        break;
                    case 2: //Pen
                        tStroke = tPressure * 20;
                        break;
                    case 5: //Touch
                        tStroke = 20 * tPressure;
                        break;
                    case 1: //Mouse
                        tStroke = 5;
                        break;
                    default:
                        break;
                }
            }
            else if (msEvent.pointerType) {
                if (typeof msEvent.pointerType === "string") {
                    switch (msEvent.pointerType) {
                        case "touch":
                            tStroke = 20 * msEvent.pressure;
                            if (tStroke < 1)
                                tStroke = 20;
                            break;
                        case "pen":
                            tStroke = msEvent.pressure * 20;
                            if (tStroke < 1)
                                tStroke = 1;
                            break;
                        case "mouse":
                            tStroke = 5;
                            break;
                    }
                }
                else {
                    switch (msEvent.pointerType) {
                        case msEvent.MSPOINTER_TYPE_TOUCH:
                            tStroke = 20 * msEvent.pressure;
                            if (tStroke < 1)
                                tStroke = 20;
                            break;
                        case msEvent.MSPOINTER_TYPE_PEN:
                            tStroke = msEvent.pressure * 20;
                            if (tStroke < 1)
                                tStroke = 1;
                            break;
                        case msEvent.MSPOINTER_TYPE_MOUSE:
                            tStroke = 5;
                            break;
                    }
                }
            }
            if (msEvent.touches && msEvent.touches.length > 0 && msEvent.touches[0].force) {
                tStroke = 20 * msEvent.touches[0].force;
                if (tStroke < 1)
                    tStroke = 1;
            }
            return tStroke;
        };
        TheNMIBaseControl.prototype.DoFireClick = function (pTargetObj, pEvent, pPointer) {
            if (!pTargetObj || !pTargetObj.HasEvent("OnClick"))
                return;
            var TPs = pTargetObj.GetProperty("TouchPoints");
            if (!pPointer || ((pPointer.IsOnObject || cde.CBool(pTargetObj.GetProperty("IgnoreHitTarget"))) && pPointer.PathLength() < cdeNMI.MyNMISettings.DeadPathLength)) {
                pTargetObj.WasClicked = true;
                window.setTimeout(function () {
                    pTargetObj.FireEvent(true, "OnClick", pEvent, TPs, pTargetObj.GetProperty("Cookie"), pTargetObj.GetProperty("Parent"));
                }, 100);
            }
        };
        TheNMIBaseControl.prototype.SetDataItem = function (pName, pValue) {
            this.MyDataItems[pName] = pValue;
        };
        TheNMIBaseControl.prototype.OnLoad = function (bIsVisible) {
            this.SetProperty("IsUnloaded", false);
            for (var tdx in this.MyChildren) {
                this.MyChildren[tdx].SetProperty("TabIndex", this.MyChildren[tdx].MyFieldInfo ? this.MyChildren[tdx].MyFieldInfo.FldOrder + 101 : 100);
                this.MyChildren[tdx].OnLoad(bIsVisible);
            }
        };
        TheNMIBaseControl.prototype.OnUnload = function () {
            this.SetProperty("IsUnloaded", true);
            for (var tdx in this.MyChildren) {
                this.MyChildren[tdx].SetProperty("TabIndex", -1);
                this.MyChildren[tdx].OnUnload();
            }
        };
        TheNMIBaseControl.prototype.GetSetting = function (pName, pDefault, CompileAsJSON) {
            var res = null;
            if (this.MyFieldInfo) {
                res = this.MyFieldInfo[pName];
                if (res && CompileAsJSON === true) {
                    try {
                        res = JSON.parse(res);
                    }
                    catch (_a) {
                        res = null;
                    }
                }
                if (!res && this.MyFieldInfo.PropertyBag) {
                    res = cdeNMI.ThePB.GetValueFromBagByName(this.MyFieldInfo.PropertyBag, pName);
                    if (res && CompileAsJSON === true) {
                        try {
                            res = JSON.parse(res);
                        }
                        catch (_b) {
                            res = null;
                        }
                    }
                }
            }
            if (!res && pDefault)
                res = pDefault;
            return res;
        };
        TheNMIBaseControl.prototype.GetProperty = function (pName) {
            if (pName === "PreventManipulation") {
                return this.PreventManipulation;
            }
            if (pName === "PreventDefault" || pName === "EnableMT") {
                return this.PreventDefault;
            }
            if (pName === "TouchPoints")
                return this.TouchPoints;
            if (this.PropertyBag[pName] !== undefined)
                return this.PropertyBag[pName];
            else {
                if (this.MyFieldInfo && this.MyFieldInfo[pName])
                    return this.MyFieldInfo[pName];
            }
            return null;
        };
        TheNMIBaseControl.prototype.GetElement = function () {
            return this.MyRootElement;
        };
        TheNMIBaseControl.prototype.GetContainerElement = function () {
            if (!this.MyContainerElement)
                return this.MyRootElement;
            else
                return this.MyContainerElement;
        };
        TheNMIBaseControl.prototype.ApplySkin = function () {
            //override if needed
        };
        TheNMIBaseControl.prototype.PostCreate = function (pTE) {
            //override if needed
        };
        TheNMIBaseControl.prototype.OnNUITag = function (pTag, pCookie) {
            //override if needed
        };
        TheNMIBaseControl.prototype.FindRenderTarget = function (pTarget) {
            var _this = this;
            if (!this.MyRootElement)
                return;
            this.MyRenderTarget = document.getElementById(pTarget);
            if (this.MyRenderTarget) {
                this.MyRootElement.parentNode.removeChild(this.MyRootElement);
                if (this.MyRenderTarget.children.length === 0) {
                    this.MyRenderTarget.appendChild(this.MyRootElement);
                    this.SetProperty("Visibility", true);
                }
            }
            else {
                setTimeout(function () {
                    if (!_this.MyRenderTarget)
                        _this.FindRenderTarget(pTarget);
                }, 1000);
            }
        };
        TheNMIBaseControl.prototype.ShowFieldContent = function (pContent, pFieldInfo, pScreenID) {
            if (!pFieldInfo)
                pFieldInfo = this.MyFieldInfo;
            if (!pScreenID)
                pScreenID = this.MyScreenID;
            if (pFieldInfo && (pFieldInfo.Flags & 1) !== 0) {
                if (!pContent || pContent.length === 0)
                    return "";
                else
                    return "*****";
            }
            else {
                if (!cde.IsNotSet(pContent)) {
                    if (pFieldInfo) {
                        var tOptions = void 0;
                        var tFormat = void 0;
                        switch (pFieldInfo.Type) {
                            case cdeNMI.cdeControlType.Curreny:
                                if (!pContent)
                                    pContent = "Zero";
                                else
                                    pContent = "$" + parseFloat(pContent).toFixed(2);
                                break;
                            case cdeNMI.cdeControlType.DateTime:
                                if (!pContent)
                                    pContent = "&nbsp;";
                                else {
                                    var mDate = cdeNMI.cdeJsonDate2JSDate(pContent);
                                    if (mDate.toString() !== "Invalid Date") {
                                        if (mDate.getFullYear() < 2) {
                                            pContent = "";
                                        }
                                        else {
                                            try {
                                                if (pFieldInfo["Format"])
                                                    pContent = cdeNMI.FormatDate(mDate, pFieldInfo["Format"]);
                                                else
                                                    pContent = cdeNMI.FormatDate(mDate, "YYYY-MM-DD HH:mm:ss");
                                            }
                                            catch (ex) {
                                                pContent = mDate.toLocaleDateString() + " " + mDate.toLocaleTimeString();
                                            }
                                        }
                                    }
                                }
                                break;
                            case cdeNMI.cdeControlType.Number:
                                if (pContent) {
                                    tFormat = pFieldInfo["Format"];
                                    if (!cde.IsNotSet(tFormat)) {
                                        pContent = parseFloat(pContent).toFixed(parseInt(tFormat));
                                    }
                                }
                                else
                                    pContent = "0";
                                break;
                            case cdeNMI.cdeControlType.SingleCheck:
                                {
                                    tOptions = null;
                                    tOptions = pFieldInfo["Options"];
                                    if (!tOptions)
                                        tOptions = "true;false";
                                    var tOpts = tOptions.split(';');
                                    if (cde.CBool(pContent))
                                        pContent = tOpts[0];
                                    else
                                        pContent = tOpts.length > 1 ? tOpts[1] : "";
                                }
                                break;
                            //case cdeControlType.ThingPicker:
                            case cdeNMI.cdeControlType.ComboLookup:
                                {
                                    var tTableName = cde.GuidToString(this.GetSetting("StorageTarget"));
                                    var tScreenid = pScreenID;
                                    if (this.GetSetting("ModelID"))
                                        tScreenid = this.GetSetting("ModelID");
                                    var tScreenInfo = cdeNMI.MyNMIModels[cde.GuidToString(tScreenid)];
                                    if (!tScreenInfo || !tScreenInfo.MyStorageMirror[tTableName])
                                        return pContent;
                                    else {
                                        for (var row = 0; row < tScreenInfo.MyStorageMirror[tTableName].length; row++) {
                                            var tRow = tScreenInfo.MyStorageMirror[tTableName][row];
                                            var tName = cdeNMI.GetFldContentByName(tRow, this.GetSetting("ValueFld"), false);
                                            if (tName && cde.GuidToString(tName) === cde.GuidToString(pContent))
                                                return cdeNMI.GetFldContentByName(tRow, this.GetSetting("NameFld"), false);
                                        }
                                    }
                                }
                                break;
                            case cdeNMI.cdeControlType.ComboBox:
                                tOptions = this.GetProperty("OptionsLive");
                                if (!tOptions)
                                    tOptions = this.GetSetting("OptionsLive");
                                if (!tOptions)
                                    tOptions = this.GetProperty("Options");
                                if (!tOptions)
                                    tOptions = this.GetSetting("Options");
                                if (tOptions) {
                                    if (tOptions.substr(0, 6) === "LOOKUP") {
                                        var tParas = tOptions.split(':');
                                        if (tParas.length === 2) {
                                            switch (tParas[1]) {
                                                case "THINGPICKER":
                                                    tParas = "LOOKUP:b510837f-3b75-4cf2-a900-d36c19113a13:MyPropertyBag.FriendlyName.Value:cdeMID:MyPropertyBag.DeviceType.Value:FAFA22FF-96AC-42CF-B1DB-7C073053FC39".split(':');
                                                    break;
                                                case "PROPERTYPICKER":
                                                    break;
                                            }
                                        }
                                        if (tParas.length < 3) {
                                            break;
                                        }
                                        else {
                                            var tTableName = cde.GuidToString(tParas[1]);
                                            var tScreenid = pScreenID;
                                            if (tParas.length > 5)
                                                tScreenid = tParas[5];
                                            var tScreenInfo = cdeNMI.MyNMIModels[cde.GuidToString(tScreenid)];
                                            if (!tScreenInfo || !tScreenInfo.MyStorageMirror[tTableName]) {
                                                var tDT = pFieldInfo["DisplayField"];
                                                if (tDT) {
                                                    if (tScreenInfo.MyStorageMirror[cde.GuidToString(pFieldInfo.FormID)]) {
                                                        var tTargetTable = tScreenInfo.MyStorageMirror[cde.GuidToString(pFieldInfo.FormID)];
                                                        for (var row = 0; row < tTargetTable.length; row++) {
                                                            var tRow = tTargetTable[row];
                                                            var tName = cdeNMI.GetFldContentByName(tRow, tParas[3], false);
                                                            if (tName && cde.GuidToString(tName) === cde.GuidToString(pContent)) {
                                                                var tFinal = cdeNMI.GetFldContentByName(tRow, tDT, false);
                                                                if (tFinal)
                                                                    return tFinal;
                                                            }
                                                        }
                                                    }
                                                }
                                                return pContent;
                                            }
                                            else {
                                                for (var row = 0; row < tScreenInfo.MyStorageMirror[tTableName].length; row++) {
                                                    var tRow = tScreenInfo.MyStorageMirror[tTableName][row];
                                                    var tName = cdeNMI.GetFldContentByName(tRow, tParas[3], false);
                                                    if (tName && cde.GuidToString(tName) === cde.GuidToString(pContent))
                                                        return cdeNMI.GetFldContentByName(tRow, tParas[2], false);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (this.GetProperty("LiveOptions"))
                                            tOptions = this.GetProperty("LiveOptions");
                                        if (!tOptions && this.GetProperty("OptionsLive"))
                                            tOptions = this.GetProperty("OptionsLive");
                                        var tGroups = tOptions.split(';:;');
                                        for (var tGrp = 0; tGrp < tGroups.length; tGrp++) {
                                            var i = void 0;
                                            if (tGroups[tGrp].substr(0, 1) === "[") {
                                                var tJOpgs = JSON.parse(tGroups[tGrp]);
                                                for (i = 0; i < tJOpgs.length; i++) {
                                                    if (tJOpgs[i].V === pContent)
                                                        return tJOpgs[i].N;
                                                }
                                            }
                                            else {
                                                var tOps = tGroups[tGrp].split(';');
                                                for (i = 0; i < tOps.length; i++) {
                                                    if (tGroups.length > 1 && i === 0)
                                                        continue;
                                                    var tOptVal = tOps[i].split(':');
                                                    if (tOptVal.length > 1) {
                                                        if (pContent === tOptVal[1] || ((!pContent || pContent === '') && tOptVal[1] === '0'))
                                                            return tOptVal[0];
                                                    }
                                                    else {
                                                        if (pContent === tOptVal[0])
                                                            return tOptVal[0];
                                                    }
                                                }
                                                if (tOptions.substr(0, 12) === "SCREENPICKER") {
                                                    if (cdeNMI.MyEngine) {
                                                        cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:SCREENRESOLVE:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ':' + pContent, '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case cdeNMI.cdeControlType.ThingPicker:
                                return this.GetNameFromValue(pContent);
                                break;
                            default:
                                if (pContent && (pFieldInfo.Flags & 256) === 0)
                                    pContent = cdeNMI.cdeEscapeHtml(pContent);
                                tFormat = pFieldInfo["Format"];
                                if (!tFormat)
                                    tFormat = this.GetProperty("Format");
                                if (!cde.IsNotSet(tFormat)) {
                                    if (cde.CInt(tFormat) > 0) {
                                        if (pContent && pContent.length > parseInt(tFormat)) {
                                            if (isNaN(Number(pContent)) === true)
                                                pContent = pContent.substr(0, parseInt(tFormat));
                                            else
                                                pContent = cde.CDbl(pContent).toFixed(parseInt(tFormat));
                                        }
                                    }
                                    else {
                                        pContent = tFormat.format(pContent);
                                        if (this.GetProperty("Cookie"))
                                            pContent = cdeNMI.GenerateFinalString(pContent, this.GetProperty("Cookie"));
                                        pContent = cdeNMI.GenerateFinalString(pContent, null, this.MyTRF);
                                    }
                                }
                                break;
                        }
                    }
                    return pContent;
                }
            }
            return "";
        };
        TheNMIBaseControl.prototype.GetNameFromValue = function (pVal) {
            if (pVal.length === 0)
                return pVal;
            if (!this.GetProperty("ThingFriendlyName")) {
                return pVal;
            }
            else {
                return this.GetProperty("ThingFriendlyName");
            }
        };
        TheNMIBaseControl.prototype.SetInitialSize = function (tMargin) {
            if (tMargin === void 0) { tMargin = 1; }
            this.SetInitialWidth(tMargin);
            this.SetInitialHeight(tMargin);
        };
        TheNMIBaseControl.prototype.SetInitialWidth = function (tMargin) {
            if (tMargin === void 0) { tMargin = 1; }
            //SIZING: Needs to be the same on all SF Controls
            var tW = cde.CInt(this.GetSetting("ControlTW"));
            if (tW === 0 && this.GetProperty("ControlTW"))
                tW = cde.CInt(this.GetProperty("ControlTW"));
            if (this.GetSetting("TileWidth"))
                tW = cde.CInt(this.GetSetting("TileWidth"));
            if (tW === 0 && this.GetProperty("TileWidth"))
                tW = cde.CInt(this.GetProperty("TileWidth"));
            return this.SetWidth(this.GetElement(), tW, tMargin);
        };
        TheNMIBaseControl.prototype.SetInitialHeight = function (tMargin) {
            if (tMargin === void 0) { tMargin = 1; }
            var tH = cde.CInt(this.GetSetting("ControlTH"));
            if (tH === 0 && this.GetProperty("ControlTH"))
                tH = cde.CInt(this.GetProperty("ControlTH"));
            if (this.GetSetting("TileHeight"))
                tH = cde.CInt(this.GetSetting("TileHeight"));
            if (tH === 0 && this.GetProperty("TileHeight"))
                tH = cde.CInt(this.GetProperty("TileHeight"));
            return this.SetHeight(this.GetElement(), tH, tMargin);
        };
        TheNMIBaseControl.prototype.IsAChildBigger = function (tW) {
            for (var i in this.MyChildren) {
                if (this.MyChildren[i].MyBaseType !== cdeNMI.cdeControlType.Table) {
                    if (this.MyChildren[i].MyBaseType !== cdeNMI.cdeControlType.CollapsibleGroup || cde.CBool(this.MyChildren[i].GetProperty("AllowHorizontalExpand")) === false) {
                        if (cde.CInt(this.MyChildren[i].GetSegmentWidth()) > tW)
                            return true;
                    }
                    if (this.MyChildren[i].IsAChildBigger(tW) === true)
                        return true;
                }
            }
            return false;
        };
        TheNMIBaseControl.prototype.IsAParentSmaller = function (tW) {
            if (this.MyTarget) {
                if (this.MyTarget.MyBaseType !== cdeNMI.cdeControlType.CollapsibleGroup || cde.CBool(this.MyTarget.GetProperty("AllowHorizontalExpand")) === false) {
                    if (cde.CInt(this.MyTarget.GetSegmentWidth()) < tW)
                        return true;
                    if (this.MyTarget.IsAParentSmaller(tW) === true)
                        return true;
                }
            }
            return false;
        };
        TheNMIBaseControl.prototype.GetSegmentWidth = function () {
            var tWid = cdeNMI.GetSizeFromTile(this.GetProperty("TileWidth"));
            if (cde.CInt(this.GetProperty("TileFactorX")) > 1)
                tWid /= cde.CInt(this.GetProperty("TileFactorX"));
            else {
                if (cde.CInt(this.GetSetting("TileFactorX")) > 1)
                    tWid /= cde.CInt(this.GetSetting("TileFactorX"));
            }
            return Math.floor(tWid / cdeNMI.GetSizeFromTile(6));
        };
        TheNMIBaseControl.prototype.SetWidth = function (pElement, tW, tMargin, tDontCheckMaxWidth) {
            if (tMargin === void 0) { tMargin = 1; }
            if (tDontCheckMaxWidth === void 0) { tDontCheckMaxWidth = false; }
            if (tW > 0) {
                if (this.GetProperty("MaxTileWidth") && tW > cde.CInt(this.GetProperty("MaxTileWidth")))
                    tW = cde.CInt(this.GetProperty("MaxTileWidth"));
                if (this.GetProperty("MinTileWidth") && tW < cde.CInt(this.GetProperty("MinTileWidth")))
                    tW = cde.CInt(this.GetProperty("MinTileWidth"));
                var tWid = cdeNMI.GetSizeFromTile(tW); // - tMargin; //-1 compensates for 1px margin
                if (cde.CInt(this.GetProperty("TileFactorX")) > 1)
                    tWid /= cde.CInt(this.GetProperty("TileFactorX"));
                else {
                    if (cde.CInt(this.GetSetting("TileFactorX")) > 1)
                        tWid /= cde.CInt(this.GetSetting("TileFactorX"));
                }
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1 && this.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup && this.MyFieldInfo && this.MyFieldInfo.FldOrder === 1 && cde.CBool(this.GetProperty("UseMargin")) === true) {
                    var tSegments = Math.floor(tW / 6);
                    if (tSegments > 0)
                        tWid += cdeNMI.GetSizeFromTile(tSegments) / 2;
                }
                if (!tDontCheckMaxWidth && cdeNMI.MyScreenManager && cdeNMI.MyScreenManager.DocumentWidth > 0 && tWid > cdeNMI.MyScreenManager.DocumentWidth)
                    tWid = cdeNMI.MyScreenManager.DocumentWidth - (cdeNMI.GetSizeFromTile(1));
                if (pElement) {
                    pElement.style.width = tWid + "px";
                    this.MyWidth = tWid;
                }
                return tWid;
            }
            else {
                //if (pElement)
                //pElement.style.width = "inherit";
            }
            return -1;
        };
        TheNMIBaseControl.prototype.SetHeight = function (pElement, tH, tMargin) {
            if (tMargin === void 0) { tMargin = 1; }
            if (tH > 0) {
                if (this.GetProperty("MaxTileHeight") && tH > cde.CInt(this.GetProperty("MaxTileHeight")))
                    tH = cde.CInt(this.GetProperty("MaxTileHeight"));
                if (this.GetProperty("MinTileHeight") && tH < cde.CInt(this.GetProperty("MinTileHeight")))
                    tH = cde.CInt(this.GetProperty("MinTileHeight"));
                var tHei = cdeNMI.GetSizeFromTile(tH) - tMargin;
                if (cde.CInt(this.GetProperty("TileFactorY")) > 1) {
                    tHei /= cde.CInt(this.GetProperty("TileFactorY"));
                }
                else {
                    if (cde.CInt(this.GetSetting("TileFactorY")) > 1)
                        tHei /= cde.CInt(this.GetSetting("TileFactorY"));
                }
                if (pElement)
                    pElement.style.height = tHei + "px";
                this.MyHeight = tHei;
                return tHei;
            }
            else {
                if (pElement)
                    pElement.style.height = "inherit";
            }
            return -1;
        };
        TheNMIBaseControl.GetTileEntry = function (node) {
            var els = (node).getElementsByTagName("*");
            for (var i = 0, j = els.length; i < j; i++) {
                var tEle = els[i];
                if (tEle.className === "cdeTileEntryText")
                    return tEle;
            }
            return null;
        };
        //Backwards Compat requirements
        TheNMIBaseControl.SetPropertiesFromBag = function (pCtrl, pBag, pRow, pIsLive, pIsInTable) {
            return cdeNMI.ThePB.SetPropertiesFromBag(pCtrl, pBag, pRow, pIsLive, pIsInTable);
        };
        return TheNMIBaseControl;
    }(cde.TheThing));
    cdeNMI.TheNMIBaseControl = TheNMIBaseControl;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
    * Creates a new Screen Control that can host other controls and will be added to the NMI Screen Manager
    *
    * 4.1 Ready
     * tuned and cleaned
    */
    var TheNMIScreen = /** @class */ (function (_super) {
        __extends(TheNMIScreen, _super);
        function TheNMIScreen(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divDragContent = null;
            _this.mDragButton = null;
            _this.pos1 = 0;
            _this.pos2 = 0;
            _this.pos3 = 0;
            _this.pos4 = 0;
            _this.oldz = "";
            _this.oldBC = "";
            _this.IsDragging = false;
            _this.MyScreenDIV = null;
            _this.MyScreen = null; //BackCompat
            _this.mDivDashboardContent = null;
            _this.DisallowHeaderToggle = false;
            _this.mIsInitialized = false;
            _this.IsIFrame = false;
            _this.MyHostNode = "";
            _this.MyRefreshButton = null;
            _this.MySavePin = null;
            _this.MyRefreshPin = null;
            _this.MyCloseButton = null;
            _this.MyPinButton = null;
            _this.MyDrawPin = null;
            _this.MyOverlay = null;
            _this.MyPinArea = null;
            _this.MyScreenTitle = null;
            _this.HasRenderTarget = false;
            _this.oldTop = 0;
            _this.oldLeft = 0;
            return _this;
        }
        TheNMIScreen.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Screen;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            //if (cde.CBool(this.GetSetting("AllowDrag")))
            //    debugger;
            var tRenderTarget = this.GetSetting("RenderTarget");
            // if (tRenderTarget) debugger;
            this.divDragContent = document.getElementById("Screen_" + this.MyScreenID);
            if (!this.divDragContent) {
                this.divDragContent = document.createElement("div");
                this.divDragContent.id = "Screen_" + this.MyScreenID;
                this.divDragContent.style.position = "relative"; //V4.107: New...double check with all scenarios
                var tAdd = this.GetSetting("DashBoardID");
                if (document.getElementById(tRenderTarget))
                    this.HasRenderTarget = true;
                else
                    tRenderTarget = "MyDashboard" + (tAdd ? tAdd : "");
                var tMainDash = document.getElementById(tRenderTarget);
                if (!tMainDash) {
                    tMainDash = document.createElement("div");
                    tMainDash.className = "cdeMyDashboard";
                    tMainDash.id = "MyDashboard" + (tAdd ? tAdd : "");
                    var tBody = document.getElementsByTagName("body");
                    if (tBody)
                        document.body.insertBefore(tMainDash, document.body.firstChild);
                    else
                        document.appendChild(document.createElement("body")).appendChild(tMainDash);
                    //this.FireEvent(true,"CDE_LOG_EVENT","TheNMIScreen:InitControl", "Homing Dashboard not found. Requires a DIV with ID='MyDashboard'")
                }
                if (cde.CBool(this.GetSetting("AllowDrag"))) {
                    this.MyScreenDIV = document.createElement('div');
                    this.MyScreenDIV.style.position = "absolute";
                    this.MyScreenDIV.style.overflow = "hidden";
                    this.MyScreenDIV.style.zIndex = "400";
                    this.divDragContent.appendChild(this.MyScreenDIV);
                    tMainDash.appendChild(this.divDragContent); // 
                    this.SetElement(this.divDragContent, false, this.MyScreenDIV);
                }
                else {
                    this.MyScreenDIV = this.divDragContent;
                    tMainDash.appendChild(this.MyScreenDIV);
                    this.SetElement(this.MyScreenDIV);
                }
            }
            else {
                this.divDragContent.style.position = "relative"; //V4.107: New...double check with all scenarios
                this.MyScreenDIV = this.divDragContent;
                this.SetElement(this.MyScreenDIV);
            }
            this.MyScreen = this.MyScreenDIV; //BackCompat
            this.MyScreenDIV.className = cde.MyBaseAssets.MyServiceHostInfo.ScreenClassName; // "cdeBrowserTop";
            if (cde.CInt(this.GetSetting("TileWidth")) == 0)
                this.MyScreenDIV.style.width = "100%";
            this.divDragContent.classList.add("cde-animate-opacity");
            //this.SetElement(this.MyScreenDIV);
            if (!cde.CBool(this.GetSetting("NeverHide")) && !cde.CBool(this.GetSetting("HidePins")) && !cde.MyBaseAssets.MyServiceHostInfo.HideHeader && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 2 && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 4) {
                var IsTesla = (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 5);
                this.MyPinArea = cdeNMI.MyTCF.CreateBaseControl().Create(this);
                var tPinDiv = document.createElement("div");
                if (IsTesla)
                    tPinDiv.className = "cdePinAreaTesla";
                else
                    tPinDiv.className = "cdePinArea";
                this.MyPinArea.SetElement(tPinDiv);
                this.MyScreenTitle = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.MyPinArea, { ScreenID: this.MyScreenID, PreInitBag: ["Element=h1"], PostInitBag: [(this.GetSetting("ScreenTitle") ? "iValue=" + this.GetSetting("ScreenTitle") : ""), "ClassName=cdeScreenTitle"] });
                var tAllPins = cdeNMI.MyTCF.CreateBaseControl().Create(this.MyPinArea);
                var tAllPinDiv = document.createElement("div");
                tAllPinDiv.className = "cdeAllPinArea";
                tAllPins.SetElement(tAllPinDiv);
                if (!this.HasRenderTarget) {
                    if (!cde.CBool(this.GetSetting("HidePinPins"))) {
                        this.MyPinButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=" + (this.GetSetting("IsPinned") === true), "Right=0", "Top=6"] });
                        this.MyPinButton.SetProperty("OnClick", function (val, evt, pointer) {
                            if (evt.button === 2) {
                                if (!cdeNMI.MyScreenManager)
                                    return;
                                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(_this.MyScreenID);
                                if (tScreen) {
                                    if (cdeNMI.MyPopUp)
                                        cdeNMI.MyPopUp.Show('Are you sure you want to make this screen your home screen? ', false, null, 1, function (tPopup, pParent, cookie) {
                                            _this.SaveHomeScreen(cookie);
                                        }, null, tScreen);
                                    else
                                        _this.SaveHomeScreen(tScreen);
                                }
                            }
                            else {
                                if (!cde.CBool(_this.GetProperty("IsPinned"))) {
                                    _this.SetProperty("IsPinned", true);
                                }
                                else {
                                    if (cdeNMI.MyScreenManager && (_this !== cdeNMI.MyScreenManager.GetCurrentScreen() || cdeNMI.MyScreenManager.AreScreensPinned(_this) > 0)) {
                                        _this.SetProperty("Visibility", false);
                                        if (_this === cdeNMI.MyScreenManager.GetCurrentScreen()) {
                                            var tNS = cdeNMI.MyScreenManager.FindPinnedScreen();
                                            if (tNS)
                                                cdeNMI.MyScreenManager.SetCurrentScreen(tNS);
                                        }
                                    }
                                    _this.SetProperty("IsPinned", false);
                                }
                                _this.ShowPin();
                            }
                        });
                        var tPosRight = 35;
                        if (IsTesla) {
                            this.MyPinButton.SetProperty("Content", "<i class='fa fa-2x'>&#xf08d;</i>");
                            tPosRight = 60;
                        }
                        else
                            this.MyPinButton.SetProperty("Content", "<i class='fa'>&#xf08d;</i>");
                        this.ShowPin();
                        var tUpPin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=true", "Right=" + tPosRight, "Top=6", "ClassName=cdeDivUp"] });
                        tUpPin.SetProperty("OnClick", function (val, evt, pointer) {
                            var tH = _this.GetElement();
                            var tParent = tH.parentElement;
                            var tLPos = -1;
                            for (var index = 0; index < tH.parentElement.children.length; index++) {
                                if (tH.parentElement.children[index] === tH) {
                                    if (tLPos >= 0) {
                                        var tNode = tH.parentElement.children[tLPos];
                                        tH.parentElement.removeChild(tH);
                                        tParent.insertBefore(tH, tNode);
                                    }
                                    break;
                                }
                                if (tH.parentElement.children[index].style.display !== 'none')
                                    tLPos = index;
                            }
                            if (cdeNMI.MyScreenManager)
                                cdeNMI.MyScreenManager.RenumberScreens();
                        });
                        if (IsTesla) {
                            tUpPin.SetProperty("Content", "<i class='fa fa-2x'>&#xf062;</i>");
                            tPosRight = 120;
                        }
                        else {
                            tUpPin.SetProperty("Content", "<i class='fa'>&#xf062;</i>");
                            tPosRight = 70;
                        }
                        var tDnPin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=true", "Right=" + tPosRight, "Top=6", "ClassName=cdeDivDown"] });
                        tDnPin.SetProperty("OnClick", function (val, evt, pointer) {
                            var tH = _this.GetElement();
                            var tParent = tH.parentElement;
                            var tLPos = -1;
                            for (var index = tH.parentElement.children.length - 1; index >= 0; index--) {
                                if (tH.parentElement.children[index] === tH) {
                                    if (tLPos < tH.parentElement.children.length - 1) {
                                        var tNode = tH.parentElement.children[tLPos + 1];
                                        if (tNode === tH)
                                            break;
                                        tH.parentElement.removeChild(tH);
                                        tParent.insertBefore(tH, tNode);
                                    }
                                    else {
                                        tH.parentElement.removeChild(tH);
                                        tParent.appendChild(tH);
                                    }
                                    break;
                                }
                                if (tH.parentElement.children[index].style.display !== 'none')
                                    tLPos = index;
                            }
                            if (cdeNMI.MyScreenManager)
                                cdeNMI.MyScreenManager.RenumberScreens();
                        });
                        if (IsTesla) {
                            tDnPin.SetProperty("Content", "<i class='fa fa-2x'>&#xf063;</i>");
                        }
                        else {
                            tDnPin.SetProperty("Content", "<i class='fa'>&#xf063;</i>");
                        }
                    }
                    else {
                        if (cde.CBool(this.GetSetting("IsPopup")) === true) {
                            this.MyCloseButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["Right=0", "Top=6", "ClassName=cdeDivSave"] });
                            this.MyCloseButton.SetProperty("OnClick", function (val, evt, pointer) {
                                if (cdeNMI.MyScreenManager) {
                                    cdeNMI.MyScreenManager.TransitToScreen(_this.GetProperty("OldScreen"));
                                }
                            });
                            this.MyCloseButton.SetProperty("Content", "<i class='fa'>&#xf410;</i>");
                        }
                    }
                }
                if (!IsTesla) {
                    this.MySavePin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=true", "Right=140", "Top=6", "ClassName=cdeDivSave"] });
                    this.MySavePin.SetProperty("OnClick", function (val, evt, pointer) {
                        var tScreen = cdeNMI.MyTCF.GetRegisteredControl("TABLES", _this.MyScreenID);
                        if (tScreen) {
                            if (evt.button === 2) {
                                if (cdeNMI.MyEngine) {
                                    cdeNMI.MyEngine.PublishToNMI("NMI_CLEAR_SCREEN:" + _this.MyScreenID, tScreen.MyDataRow.cdeN);
                                    cdeNMI.ShowToastMessage("Screen options cleared");
                                }
                                else
                                    cdeNMI.ShowToastMessage("No NMI Engine found - Screen options not cleared!");
                            }
                            else {
                                if (cdeNMI.MyEngine) {
                                    var tScene = new cdeNMI.TheFOR();
                                    tScene.ID = _this.MyScreenID;
                                    tScene.TileWidth = tScreen.GetProperty("TileWidth");
                                    if (tScreen.GetProperty("StartGroup"))
                                        tScene.StartGroup = tScreen.GetProperty("StartGroup");
                                    tScene.Flds = new Array();
                                    for (var i in tScreen.MyFormControls) {
                                        var tF = tScreen.MyFormControls[i];
                                        if (tF.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup) {
                                            if (tScene.TileWidth === null) {
                                                if (cde.CBool(tF.GetProperty("AllowHorizontalExpand")) === true)
                                                    tScene.TileWidth = tF.GetProperty("ControlTW");
                                                else
                                                    tScene.TileWidth = 0;
                                            }
                                            var tOpt = new cdeNMI.TheFLDOR();
                                            tOpt.PO = [];
                                            if (tF.MyFieldInfo)
                                                tOpt.FldOrder = tF.MyFieldInfo.FldOrder;
                                            tOpt.PO.push("DoClose=" + !cde.CBool(tF.GetProperty("IsOpen")));
                                            if (cde.CInt(tF.GetProperty("TileWidth")) > 0)
                                                tOpt.PO.push("TileWidth=" + tF.GetProperty("TileWidth"));
                                            tScene.Flds.push(tOpt);
                                        }
                                    }
                                    var tStr = JSON.stringify(tScene);
                                    cdeNMI.MyEngine.PublishToNMI("NMI_SAVE_SCREEN:" + _this.MyScreenID, tStr, tScreen.MyDataRow.cdeN);
                                    cdeNMI.ShowToastMessage("Screen options saved");
                                }
                                else {
                                    cdeNMI.ShowToastMessage("No NMI Engine found - Screen options not saved");
                                }
                            }
                        }
                    });
                    this.MySavePin.SetProperty("Content", "<i class='fa'>&#xf0c7;</i>");
                    this.MySavePin.SetProperty("Visibility", false);
                }
                this.MyRefreshPin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=true", "Left=0", "Top=6", "ClassName=cdeDivRefresh"] });
                this.MyRefreshPin.SetProperty("OnClick", function (val, evt, pointer) {
                    if (!cdeNMI.MyEngine || !cdeNMI.MyScreenManager)
                        return;
                    var tScreen = cdeNMI.MyScreenManager.GetScreenByID(_this.MyScreenID);
                    if (tScreen) {
                        if (_this.MyNMIControl && _this.MyNMIControl.ReloadData() === true)
                            return;
                        var bForce = false;
                        if (evt.button !== 2)
                            bForce = true;
                        var tFetch = 'NMI_GET_DATA:' + _this.MyScreenID + ':' + tScreen.GetProperty("ControlClass") + ':' + tScreen.GetProperty("DashID") + ':true:' + bForce;
                        cdeNMI.MyEngine.PublishToNMI(tFetch, '', _this.MyFieldInfo ? _this.MyFieldInfo.cdeN : null);
                    }
                });
                if (IsTesla)
                    this.MyRefreshPin.SetProperty("Content", "<i class='fa fa-3x'>&#xf021;</i>");
                else
                    this.MyRefreshPin.SetProperty("Content", "<i class='fa'>&#xf021;</i>");
                this.MyRefreshPin.SetProperty("Visibility", false);
                if (cde.MyBaseAssets.MyServiceHostInfo.RedPill === true) {
                    this.MyDrawPin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=true", "Right=105", "Top=6", "ClassName=cdeDivDraw"] });
                    this.MyDrawPin.SetProperty("OnClick", function (val, evt, pointer) {
                        if (!_this.MyOverlay) {
                            _this.MyOverlay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.DrawOverlay).Create(_this, { PreInitBag: ["HideClear=true", "EnableRecognizer=true"] });
                        }
                        else {
                            _this.RemoveChild(_this.MyOverlay);
                            _this.MyOverlay = null;
                        }
                    });
                    this.MyDrawPin.SetProperty("Content", "<i class='fa'>&#xf044;</i>");
                    this.MyDrawPin.SetProperty("Visibility", !cde.CBool(this.GetSetting("UseIFrame")));
                }
                if (cde.CBool(this.GetSetting("AllowDrag"))) {
                    this.mDragButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tAllPins, { ScreenID: this.MyScreenID, PostInitBag: ["iValue=true", "Right=175", "Top=6", "ClassName=cdeDivDraw"] });
                    this.mDragButton.SetProperty("Content", "<i class='fa'>&#xF0b2;</i>");
                    this.mDragButton.SetProperty("HoverClassName", "cdeDragButton");
                    this.mDragButton.SetProperty("OnPointerDown", function (sender, e) {
                        if (_this.IsDragging) {
                            _this.closeDragElement(e);
                            return;
                        }
                        e = e || window.event;
                        e.preventDefault();
                        _this.pos3 = e.clientX;
                        _this.pos4 = e.clientY;
                        _this.mDragButton.SetProperty("Foreground", "green");
                        _this.IsDragging = true;
                        _this.oldz = _this.MyScreenDIV.style.zIndex;
                        _this.MyScreenDIV.style.zIndex = "450";
                        document.onpointerup = function (evt) { _this.closeDragElement(evt); };
                        document.onpointermove = function (evt) { _this.elementDrag(evt); };
                    });
                }
            }
            if (cde.CBool(this.GetSetting("UseIFrame"))) {
                this.mDivDashboardContent = document.createElement("iframe");
                this.mDivDashboardContent.className = "cdeDashboardIFrame";
                this.mDivDashboardContent.style.width = "inherit";
                this.mDivDashboardContent.style.height = "inherit";
                this.IsIFrame = true;
                this.mDivDashboardContent.onload = function (evt) {
                    _this.FireEvent(true, "OnIFrameLoaded", evt);
                };
            }
            else
                this.mDivDashboardContent = document.createElement("div");
            this.mDivDashboardContent.id = "Content_" + this.MyScreenID;
            this.mDivDashboardContent.className = "CMyDashboard";
            if (cde.CInt(this.GetSetting("TileWidth")) == 0)
                this.mDivDashboardContent.style.width = "100%";
            this.MyScreenDIV.appendChild(this.mDivDashboardContent);
            this.MyContainerElement = this.mDivDashboardContent;
            if (cdeNMI.MyScreenManager) {
                this.SetProperty("FldOrder", cdeNMI.MyScreenManager.GetScreenIndex());
                if (cde.CBool(this.GetProperty("IsPopup"))) {
                    cdeNMI.MyScreenManager.RegisterEvent("OnWindowResize", function () { _this.ResizePopup(); });
                    cdeNMI.MyScreenManager.RegisterEvent("OnWindowScroll", function () { _this.ResizePopup(); });
                }
            }
            return true;
        };
        TheNMIScreen.prototype.closeDragElement = function (e) {
            //cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "closedrag", "closed");
            e.stopPropagation();
            e.preventDefault();
            this.IsDragging = false;
            /* stop moving when mouse button is released:*/
            document.onpointermove = null;
            document.onpointerup = null;
            this.mDragButton.SetProperty("Foreground", null);
            this.MyScreenDIV.style.zIndex = this.oldz;
            this.ApplySkin();
        };
        TheNMIScreen.prototype.elementDrag = function (e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            this.pos1 = this.pos3 - e.clientX;
            this.pos2 = this.pos4 - e.clientY;
            this.pos3 = e.clientX;
            this.pos4 = e.clientY;
            if (this.pos1 === 0 && this.pos2 === 0) {
                this.closeDragElement(e);
                return;
            }
            this.IsDragging = true;
            //cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ElemetDrag", this.pos1 + "," + this.pos2 + "," + this.pos3 + "," + this.pos4 + " OT:" + this.MyScreenDIV.offsetTop + " OL:" + this.MyScreenDIV.offsetLeft);
            // set the element's new position:
            this.oldTop = (this.oldTop - this.pos2);
            this.oldLeft = (this.oldLeft - this.pos1);
            this.MyScreenDIV.style.top = (this.oldTop) + "px";
            this.MyScreenDIV.style.left = (this.oldLeft) + "px";
        };
        TheNMIScreen.prototype.SaveHomeScreen = function (tScreen) {
            var tScene = new cdeNMI.TheNMIScene();
            tScene.FriendlyName = "MyHome";
            tScene.IsPublic = false;
            tScene.Screens = new Array();
            var tS = new cdeNMI.TheScreenTrans();
            tS.ID = this.MyScreenID;
            tS.DashID = tScreen.GetProperty("DashID");
            var tStr = "RESET";
            if (tS.DashID) {
                tS.IsVisible = true;
                tS.IsPinned = false;
                tS.FldOrder = -1;
                tScene.Screens.push(tS);
                tStr = JSON.stringify(tScene);
            }
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.PublishToNMI("NMI_SAVE_HOMESCENE", tStr); //TODO: Either do per User or general. If per user: this needs cdeN of user!
            cdeNMI.ShowToastMessage("Home Scene saved!");
        };
        TheNMIScreen.prototype.SetInitialized = function (bRegisterOnly) {
            this.mIsInitialized = true;
            if (cdeNMI.MyScreenManager && !cde.CBool(this.GetSetting("NeverHide"))) // !this.G.HasRenderTarget)
                cdeNMI.MyScreenManager.RegisterScreen(this.MyScreenID, this, bRegisterOnly);
            this.ResizePopup();
        };
        TheNMIScreen.prototype.ResizePopup = function () {
            if (cde.CBool(this.GetProperty("IsPopup"))) {
                this.GetElement().style.left = (window.innerWidth / 2 - (this.GetElement().clientWidth / 2) + "px");
                var tH = this.GetElement().clientHeight;
                if (tH === 0)
                    tH = cdeNMI.GetSizeFromTile(this.GetProperty("TileHeight"));
                this.GetElement().style.top = ((window.innerHeight / 2 - (tH / 2) + window.scrollY) + "px");
            }
        };
        TheNMIScreen.prototype.GetInitialized = function () {
            return this.mIsInitialized;
        };
        TheNMIScreen.prototype.ApplySkin = function () {
            if (!this.IsIFrame && cde.CBool(this.GetProperty("AllowScrolling")) && this.GetContainerElement())
                this.GetContainerElement().style.width = (this.MyScreenDIV.clientWidth + 20) + "px";
        };
        TheNMIScreen.prototype.SetProperty = function (pName, pValue) {
            if (pName.startsWith("IsOwnerDown")) {
                var tCmds = pName.split(':');
                if (tCmds.length < 2)
                    return;
                if (pValue === true) {
                    if (this.GetProperty(pName) === true)
                        return;
                    if (this.GetProperty("IsDashboard") === true) {
                        for (var cl in this.MyChildren) {
                            var tBut = this.MyChildren[cl];
                            if (tBut && tBut.MyFieldInfo && tBut.MyFieldInfo.cdeN === tCmds[1])
                                tBut.SetProperty("IsOwnerDown", true);
                        }
                    }
                    else {
                        if (!this.MyScreenDIV.classList.contains("cdeNodeGone"))
                            this.MyScreenDIV.classList.add("cdeNodeGone");
                    }
                }
                else {
                    if (this.GetProperty(pName) !== true)
                        return;
                    if (this.GetProperty("IsDashboard") === true) {
                        for (var cl in this.MyChildren) {
                            var tBut = this.MyChildren[cl];
                            if (tBut && tBut.MyFieldInfo && tBut.MyFieldInfo.cdeN === tCmds[1])
                                tBut.SetProperty("IsOwnerDown", false);
                        }
                    }
                    else {
                        this.MyScreenDIV.classList.remove("cdeNodeGone");
                    }
                }
            }
            if (pName === "Visibility" && cde.CBool(pValue) === false) {
                //debugger;
            }
            if (pName === "ClassName" && this.GetContainerElement()) {
                this.GetContainerElement().className = pValue;
            }
            else if (pName === "ScreenClassName") {
                _super.prototype.SetProperty.call(this, "ClassName", pValue + " cde-animate-opacity");
            }
            else
                _super.prototype.SetProperty.call(this, pName, pValue);
            if ((pName === "Value" || pName === "iValue" || pName === "Text" || pName === "Label" || pName === "Caption" || pName === "Title") && this.MyScreenTitle) {
                var tFormat = this.GetProperty("LabelFormat");
                if (tFormat)
                    pValue = tFormat.format(pValue);
                this.MyScreenTitle.SetProperty("Text", pValue);
            }
            else if ((pName === "LabelFormat" || pName === "ScreenTitle") && this.MyScreenTitle && pValue) {
                if (pValue.indexOf("{0}") >= 0)
                    pValue = pValue.format(this.GetProperty("iValue"));
                this.MyScreenTitle.SetProperty("Text", pValue);
            }
            else if (pName === "IsPinned") {
                this.ShowPin();
            }
            else if (pName === "Source" && this.IsIFrame) {
                this.MyContainerElement.src = pValue;
            }
            else if (pName === "OnIFRameLoaded" && this.IsIFrame) {
                this.RegisterEvent("OnIFrameLoaded", pValue);
            }
            else if (pName === "TileHeight" && this.GetContainerElement()) {
                if (!cde.CBool(this.GetSetting("HidePins")))
                    this.GetContainerElement().style.height = (this.GetElement().clientHeight - 44) + "px"; //44=39 +5
                else
                    this.GetContainerElement().style.height = "inherit";
            }
            else if (pName === "TileWidth") {
                this.ApplySkin();
            }
            else if (pName === "AllowScrolling" && this.GetContainerElement()) {
                this.GetContainerElement().style.overflow = "auto";
                this.ApplySkin();
            }
            else if (pName === "HidePins" && this.MyPinArea) {
                this.MyPinArea.SetProperty("Visibility", !cde.CBool(pValue));
            }
        };
        TheNMIScreen.prototype.OnLoad = function (bIsVisible) {
            if (this.MyNMIControl)
                this.MyNMIControl.OnLoad(bIsVisible);
            _super.prototype.OnLoad.call(this);
            this.SetProperty("LastShow", new Date());
            this.FireEvent(true, "OnLoaded");
            if (cde.CBool(this.GetProperty("IsPopup"))) {
                this.ResizePopup();
            }
        };
        TheNMIScreen.prototype.ShowPin = function () {
            if (!this.MyPinButton)
                return;
            if (cde.CBool(this.GetProperty("IsPinned")) === true) {
                this.MyPinButton.SetProperty("iValue", true);
                this.MyPinButton.SetProperty("ClassName", "cdePinDiv");
            }
            else {
                this.MyPinButton.SetProperty("ClassName", "cdePinDiv fa-rotate-45");
                this.MyPinButton.SetProperty("iValue", false);
            }
        };
        TheNMIScreen.prototype.ShowFullscreen = function (bFull) {
            if (this.MyScreenDIV) {
                this.SetProperty("IsFullScreen", bFull);
                if (bFull)
                    this.MyScreenDIV.style.maxWidth = "100%";
                else
                    this.MyScreenDIV.style.maxWidth = "";
            }
        };
        TheNMIScreen.prototype.Clear = function (bClearKids) {
            if (bClearKids)
                this.ClearChildren(bClearKids);
            if (this.divDragContent)
                this.divDragContent.classList.remove("cde-animate-opacity");
            this.GetContainerElement().innerHTML = "";
        };
        TheNMIScreen.prototype.ClearChildren = function (bClearKids) {
            if (!cdeNMI.MyScreenManager)
                return;
            for (var tIdx in this.MyChildren)
                cdeNMI.MyScreenManager.DeleteScreenByID(tIdx, bClearKids);
        };
        TheNMIScreen.prototype.AppendChild = function (pEle) {
            this.GetContainerElement().appendChild(pEle.GetElement());
        };
        TheNMIScreen.prototype.AppendContent = function (pEle) {
            this.GetContainerElement().innerHTML = pEle;
        };
        TheNMIScreen.prototype.CreateHTMLView = function (pHTML) {
            if (this.GetContainerElement())
                this.GetContainerElement().innerHTML = pHTML;
        };
        TheNMIScreen.prototype.CreateScriptInView = function (pScript) {
            if (!this.GetContainerElement())
                return;
            var tScripEle = this.GetContainerElement().getElementsByTagName("script");
            if (tScripEle.length === 0) {
                if (this.mIsInitialized)
                    return;
                this.GetContainerElement().innerHTML = "";
                var s = document.createElement('script');
                s.type = "text/javascript";
                s.text = pScript;
                this.GetContainerElement().appendChild(s);
            }
        };
        TheNMIScreen.prototype.CreateCSSInView = function (pStyle) {
            if (!this.GetContainerElement())
                return;
            var tScripEle = this.GetContainerElement().getElementsByTagName("style");
            if (tScripEle.length > 0) {
                tScripEle[0].innerText = pStyle;
            }
            else {
                var s = document.createElement('style');
                s.type = "text/css";
                s.innerText = pStyle;
                this.GetContainerElement().insertBefore(s, this.GetContainerElement().firstChild);
            }
        };
        TheNMIScreen.prototype.UpdateCSSInView = function (pStyle) {
            if (!this.GetContainerElement())
                return;
            var tScripEle = this.GetContainerElement().getElementsByTagName("style");
            if (tScripEle.length > 0) {
                tScripEle[0].innerText = pStyle;
            }
        };
        TheNMIScreen.prototype.RemoveCSSInView = function () {
            if (!this.GetContainerElement())
                return;
            var tScripEle = this.GetContainerElement().getElementsByTagName("style");
            if (tScripEle.length > 0) {
                tScripEle[0].parentElement.removeChild(tScripEle[0]);
            }
        };
        TheNMIScreen.prototype.OnNUITag = function (pTag, pCookie) {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.TransitToScreen(this.MyScreenID);
        };
        //Backwards compat
        TheNMIScreen.GetScreenByID = function (pScreenID) {
            if (cdeNMI.MyScreenManager)
                return cdeNMI.MyScreenManager.GetScreenByID(pScreenID);
            return null;
        };
        return TheNMIScreen;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.TheNMIScreen = TheNMIScreen;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
     * TheScreenManager manages the main portal screen, screen navigation, login/off etc
     * */
    var TheScreenManager = /** @class */ (function (_super) {
        __extends(TheScreenManager, _super);
        function TheScreenManager(pTarget) {
            var _this = _super.call(this, null) || this;
            _this.divSideBarRight = null;
            _this.MyNMIScreens = new Array(); //All currently registered screens
            _this.MyNavHistory = new Array(); //Navigation Histor
            _this.MyDrawOverlay = null; // Draw / Annotation overlay
            _this.MyMainBackButton = null; // Main Back Button 
            _this.MyPopupOverlay = null;
            _this.CurrentScreen = null; //The Current screen visible in the NMI
            _this.CurrentView = null; //CurrentView (scene) displayed
            _this.StartView = null; //Start View (scece) when user logs in
            _this.IsHeaderVisible = true; //Is the HEader visible or not
            _this.IsBrowserFullscreen = false; //Is the HEader visible or not
            _this.WasLoginHandled = false;
            _this.ScreenOrder = 0; //All Screens have a uinique order
            _this.WaitingForScreen = null; //Temporary screen shown until a screen has loaded
            _this.DocumentWidth = 0;
            _this.IsLoaded = false;
            _this.MyBaseType = cdeNMI.cdeControlType.ScreenManager;
            return _this;
        }
        TheScreenManager.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            cdeNMI.MyNMIPortal = new cdeNMI.TheNMIScreen(null);
            cdeNMI.MyNMIPortal.MyFormID = "NMIPORTAL";
            cdeNMI.MyNMIPortal.MyScreenID = "MYNMIPORTAL";
            cdeNMI.MyNMIPortal.SetProperty("IsAlwaysVisible", true);
            var tPortal = document.getElementById("MyNMIPortal");
            if (!tPortal) {
                tPortal = document.createElement("div");
                tPortal.className = "cdeNMIPortal";
                tPortal.id = "MyNMIPortal";
                var tBody = document.getElementsByTagName("body");
                if (tBody)
                    document.body.insertBefore(tPortal, document.body.firstChild);
                else
                    document.appendChild(document.createElement("body")).appendChild(tPortal);
            }
            document.body.oncontextmenu = function () { return false; };
            cdeNMI.MyNMIPortal.SetElement(tPortal);
            this.RegisterScreen(cdeNMI.MyNMIPortal.MyScreenID, cdeNMI.MyNMIPortal, true);
            this.IsBrowserFS();
            var mDivMainDashboard = document.getElementById("MyDashboard");
            if (!mDivMainDashboard) {
                mDivMainDashboard = document.createElement("div");
                mDivMainDashboard.className = "cdeMyDashboard";
                mDivMainDashboard.id = "MyDashboard";
                tPortal.appendChild(mDivMainDashboard);
            }
            this.divSideBarRight = document.getElementById("cdeSideBarRight");
            if (!this.divSideBarRight) {
                this.divSideBarRight = document.createElement("div");
                this.divSideBarRight.id = "cdeSideBarRight";
                this.divSideBarRight.className = "cdeSideBarRight cdeBlurBack";
                this.divSideBarRight.style.display = "none";
                var divSideBarRightHead = document.createElement("div");
                divSideBarRightHead.id = "cdeInSideBarRightHeader";
                divSideBarRightHead.className = "cdeSideRightHeader";
                this.divSideBarRight.appendChild(divSideBarRightHead);
                var tCtrl = new cdeNMI.TheNMIBaseControl();
                tCtrl.SetElement(divSideBarRightHead);
                var tDnPin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.PinButton).Create(tCtrl, { ScreenID: this.MyScreenID, PostInitBag: ["Left=6", "Top=6", "ClassName=cdeDivDraw"] });
                tDnPin.SetProperty("OnClick", function (val, evt, pointer) {
                    _this.divSideBarRight.style.display = 'none';
                    _this.divSideBarRight.classList.remove("cde-animate-right");
                });
                tDnPin.SetProperty("Content", "<i class='fa fa-2x'>&#xf061;</i>");
                var divSideBarRightIn = document.createElement("div");
                divSideBarRightIn.id = "cdeInSideBarRight";
                this.divSideBarRight.appendChild(divSideBarRightIn);
                document.body.appendChild(this.divSideBarRight);
            }
            this.DocumentWidth = document.body.clientWidth + cdeNMI.GetSizeFromTile(1);
            this.SetElement(tPortal, false, mDivMainDashboard);
            this.IsLoaded = true;
            this.FireEvent(false, "OnIsLoaded", this.IsLoaded);
            return true;
        };
        TheScreenManager.prototype.RegisterEvents = function () {
            var _this = this;
            if (window.addEventListener) {
                window.addEventListener("resize", function () { _this.ResizeEventHandler(); }, false);
                window.addEventListener("scroll", function () { _this.ScollEventHandler(); }, false);
            }
            document.onkeydown = function (evt) {
                //var keyCode = evt ? (evt.which ? evt.which : evt.keyCode) : evt.keyCode;
                var keyCode = evt ? (evt.which ? evt.which : evt.keyCode) : evt.keyCode;
                if (keyCode === 13) {
                    if (cdeNMI.Key13Event !== null)
                        cdeNMI.Key13Event(evt);
                    cdeNMI.Key13Event = null;
                }
                else if (keyCode === 27) {
                    //For escape.
                    if (cdeNMI.Key27Event !== null)
                        cdeNMI.Key27Event(evt);
                    cdeNMI.Key27Event = null;
                }
                else if (keyCode === 36 && cde.MyBaseAssets.MyServiceHostInfo.WasPortalRequested && cdeNMI.Key13Event === null) {
                    if (!cdeNMI.DisableKey36Event)
                        _this.GotoStationHome(false);
                }
                else if (keyCode === 10009) {
                    if (cdeNMI.MyScreenManager)
                        cdeNMI.MyScreenManager.NavigateBack(false);
                }
                else if (keyCode === 39) {
                    cdeNMI.focusNextElement(false);
                }
                else if (keyCode === 37) {
                    cdeNMI.focusNextElement(true);
                }
                if (keyCode > 47 && keyCode < 58 && cdeNMI.Key13Event === null) {
                    _this.TransitToScreenIDX(keyCode - 48);
                }
            };
            window.onpopstate = function () {
                _this.NavigateBack(false);
            };
            if (!cde.MyBaseAssets.MyServiceHostInfo.DoAllowAnonymous) {
                if (!cde.MyBaseAssets.MyCommStatus.IsUserLoggedIn) {
                    cdeNMI.MyLoginScreen = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.LoginScreen, true);
                    if (cdeNMI.MyLoginScreen) {
                        cdeNMI.MyLoginScreen.RegisterEvent("OnLogin", function (s, p, t) { _this.HandleLogin(p, t); });
                        cdeNMI.MyLoginScreen.Create(null);
                        this.CreateLoginButtonOnly();
                    }
                    else {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show("NMI Requires Login but no login provider found. Access is denied", true, null, null, function () {
                                cdeNMI.ResetBrowserToPortal();
                            });
                    }
                }
                else {
                    this.HandleLogin(true);
                }
            }
            if (cdeNMI.MyEngine) {
                cdeNMI.MyEngine.RegisterEvent("CDE_SETSTATUSMSG", function (sender, a, b) { _this.SetStatusMsg(a, b); });
                cdeNMI.MyEngine.RegisterEvent("CDE_SETPLATFORM", function (sender, pID) { _this.SetPlatform(pID); });
                if (cdeNMI.MyEngine.IsConnectedAndReady)
                    this.sinkEngineReady(cdeNMI.MyEngine, true);
                else
                    cdeNMI.MyEngine.RegisterEvent("EngineReady", function (sender, bReady) { _this.sinkEngineReady(sender, bReady); });
            }
            else {
                this.sinkEngineReady(null, true);
            }
        };
        TheScreenManager.prototype.RemoveAllScreens = function () {
            this.MyNMIScreens = new Array(); //All currently registered screens
            this.MyNavHistory = new Array(); //Navigation Histor
            var mDivMainDashboard = document.getElementById("MyDashboard");
            if (mDivMainDashboard)
                mDivMainDashboard.innerHTML = "";
            mDivMainDashboard = document.getElementById("MyDashboardLOGIN");
            if (mDivMainDashboard)
                mDivMainDashboard.innerHTML = "";
        };
        TheScreenManager.prototype.ResizeEventHandler = function () {
            this.DocumentWidth = document.body.clientWidth + cdeNMI.GetSizeFromTile(1);
            this.IsBrowserFS();
            this.FireEvent(true, "OnWindowResize");
        };
        TheScreenManager.prototype.ScollEventHandler = function () {
            this.FireEvent(true, "OnWindowScroll");
        };
        TheScreenManager.prototype.IsBrowserFS = function () {
            if (window.innerWidth === screen.width && window.innerHeight === screen.height) {
                if (!this.IsBrowserFullscreen) {
                    this.IsBrowserFullscreen = true;
                    this.FireEvent(true, "OnBrowserFullscreen", true);
                }
            }
            else {
                if (this.IsBrowserFullscreen) {
                    this.IsBrowserFullscreen = false;
                    this.FireEvent(true, "OnBrowserFullscreen", false);
                }
            }
        };
        TheScreenManager.prototype.CreateLoginButtonOnly = function () {
            var _this = this;
            var tileButHeaderBtnLogin;
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 0) {
                tileButHeaderBtnLogin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-5x' style='font-size:40px'>&#xf011;</span>", "ClassName=MyHeaderButton"] });
                tileButHeaderBtnLogin.SetProperty("OnClick", function (pSender, evt) {
                    if (evt.button === 2 && cde.MyBaseAssets.MyServiceHostInfo.WasPortalRequested === true) {
                        _this.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                    }
                    else
                        cdeNMI.ResetBrowserToPortal();
                });
            }
            else {
                tileButHeaderBtnLogin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.UserMenu).Create(null);
            }
            tileButHeaderBtnLogin.SetProperty("TabIndex", 15);
            var divHeadButtonContentRight = document.getElementById("HeaderButtonContentRight");
            if (!divHeadButtonContentRight) {
                divHeadButtonContentRight = document.createElement("div");
                divHeadButtonContentRight.className = "cdeHeaderButtonContentRight";
                divHeadButtonContentRight.id = "HeaderButtonContentRight";
                var tMyHeader = document.getElementById("MyHeader");
                if (!tMyHeader) {
                    tMyHeader = document.createElement("div");
                    tMyHeader.className = "cdeLogoffTopRight";
                    tMyHeader.id = "MyLogoffButton";
                    this.GetElement().parentNode.insertBefore(tMyHeader, this.GetElement().nextSibling);
                }
                tMyHeader.appendChild(divHeadButtonContentRight);
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1) {
                var tClock = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=2", "ControlTH=1"], PostInitBag: ["Title=" + cdeNMI.UpdateClock(), "ClassName=MyHeaderButton"] });
                tClock.SetProperty("Disabled", true);
                divHeadButtonContentRight.appendChild(tClock.GetElement());
                cdeNMI.StartClock(tClock);
            }
            divHeadButtonContentRight.appendChild(tileButHeaderBtnLogin.GetElement());
            if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.MyBaseAssets.MyCommStatus.UserPref.CurrentUserName)
                tileButHeaderBtnLogin.SetProperty("Caption", "<span class='fa fa-5x' style='font-size:40px'>&#xf2bd;</span></br>" + cde.MyBaseAssets.MyCommStatus.UserPref.CurrentUserName);
        };
        TheScreenManager.prototype.SetApplicationBar = function () {
            //override if needed
        };
        TheScreenManager.prototype.ShowCreateViewPopup = function () {
            var _this = this;
            var tGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(null);
            tGroup.SetProperty("ClassName", "cdeTextCrop");
            var tFld2 = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleEnded, -1, "Name:", 2);
            tFld2.FormID = "SAVEVIEW";
            //var tEdit: ctrlEditBox = ctrlEditBox.Create(tGroup, null, new TheTRF("SceneName", 1, tFld2), "My View", false, "cdeInput cdeInputCenter");
            var tEdit = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleEnded).Create(tGroup, { TRF: new cdeNMI.TheTRF("SceneName", 1, tFld2), PostInitBag: ["ClassName=cdeInput cdeInputCenter", "iValue=My Scene"] });
            //ctrlSmartLabel.Create(tGroup, null, null, "Make Scene available to all user:");
            cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(tGroup, { PostInitBag: ["iValue=Make Scene available to all user:"] });
            //var tCheck: ctrlCheckBox = ctrlCheckBox.Create(tGroup, null, new TheTRF("IsPublic", 2, new TheFieldInfo(cdeControlType.SingleCheck, 3, "Is Public:", 2)), false, "yes");
            var tCheck = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleCheck).Create(tGroup, { TRF: new cdeNMI.TheTRF("IsPublic", 2, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleCheck, 3, "Is Public:", 2)), PostInitBag: ["Title=yes"] });
            tCheck.SetProperty("Style", "float:none;");
            if (cdeNMI.MyPopUp) {
                var tPopup = cdeNMI.MyPopUp.Show("Name this Scene:", false, tGroup, 0, function (obj) {
                    var pC = obj.GetProperty("tEdit");
                    var tCe = obj.GetProperty("tCheck");
                    var tSceeneName = pC.GetProperty("Value");
                    if (tSceeneName && tSceeneName.length > 0) {
                        var tScene = new cdeNMI.TheNMIScene();
                        tScene.FriendlyName = tSceeneName;
                        tScene.IsPublic = tCe.GetProperty("Value");
                        tScene.Screens = new Array();
                        for (var i in _this.MyNMIScreens) {
                            if (_this.MyNMIScreens.hasOwnProperty(i)) {
                                var tS = new cdeNMI.TheScreenTrans();
                                tS.ID = _this.MyNMIScreens[i].MyScreenID;
                                tS.DashID = _this.MyNMIScreens[i].GetProperty("DashID");
                                tS.IsVisible = _this.MyNMIScreens[i].GetProperty("Visibility");
                                tS.IsPinned = _this.MyNMIScreens[i].GetProperty("IsPinned");
                                tS.FldOrder = _this.MyNMIScreens[i].GetProperty("FldOrder");
                                if (tS.IsVisible || tS.IsPinned)
                                    tScene.Screens.push(tS);
                            }
                        }
                        var tStr = JSON.stringify(tScene);
                        if (cdeNMI.MyEngine) {
                            cdeNMI.MyEngine.PublishToNMI("NMI_SAVE_SCENE:" + tSceeneName, tStr); //TODO: Add User Node ID
                            cdeNMI.ShowToastMessage("Scene " + tSceeneName + " saved!");
                        }
                    }
                });
                tPopup.SetProperty("tEdit", tEdit);
                tPopup.SetProperty("tCheck", tCheck);
                tPopup.SetProperty("YesLabel", "Save");
                tPopup.SetProperty("NoLabel", "Cancel");
            }
        };
        TheScreenManager.prototype.SetView = function (pView, ClearScreens) {
            if (ClearScreens === void 0) { ClearScreens = false; }
            if (!pView)
                return;
            if (ClearScreens === true)
                this.ClearScenes();
            this.CurrentView = pView;
            if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen)
                this.StartView = this.CurrentView;
            //this.ShowView();
        };
        TheScreenManager.prototype.ShowView = function () {
            if (!this.CurrentView)
                return;
            for (var tScreen1 in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(tScreen1)) {
                    this.MyNMIScreens[tScreen1].SetProperty("IsPinned", false);
                    this.ShowHideScreen(this.MyNMIScreens[tScreen1]);
                }
            }
            var cntVisibleScreens = 0;
            var i;
            var tScreen;
            for (i = 0; i < this.CurrentView.Screens.length; i++) {
                tScreen = this.GetScreenByID(this.CurrentView.Screens[i].ID);
                if (tScreen) {
                    if (cdeNMI.MyEngine)
                        cdeNMI.MyEngine.CheckDataToFetch(this.CurrentView.Screens[i].ID);
                    tScreen.SetProperty("IsPinned", this.CurrentView.Screens[i].IsPinned);
                    this.ShowHideScreen(tScreen, this.CurrentView.Screens[i].IsVisible);
                    tScreen.SetProperty("FldOrder", this.CurrentView.Screens[i].FldOrder);
                    if (this.CurrentView.Screens[i].IsVisible)
                        cntVisibleScreens++;
                }
                else {
                    if (cdeNMI.MyEngine)
                        cdeNMI.MyEngine.GetScreenMeta(this.CurrentView.Screens[i].DashID, false);
                }
            }
            var tArr = cdeNMI.SortArray(this.CurrentView.Screens, "FldOrder", false, true);
            for (i = 0; i < tArr.length; i++) {
                tScreen = this.GetScreenByID(tArr[i].ID);
                this.MoveScreenToTop(tScreen);
            }
            if (cntVisibleScreens === this.CurrentView.Screens.length)
                this.CurrentView = null;
        };
        TheScreenManager.prototype.RenderHeader = function (bIsVisible) {
            return;
        };
        TheScreenManager.prototype.RequestPortalScreen = function (pForceLoad) {
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.GetScreenMeta(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen, pForceLoad);
        };
        TheScreenManager.prototype.SetPlatform = function (pID) {
            if (pID === 2)
                this.SetHoloLens();
        };
        TheScreenManager.prototype.GetDeepLink = function () {
            var tFetch = this.CurrentScreen.MyScreenID + ';' + this.CurrentScreen.GetProperty("DashID") + ";-;" + this.CurrentScreen.GetProperty("ScreenTitle");
            cdeNMI.ShowToastMessage("Deep Link created!", tFetch);
            return tFetch;
        };
        TheScreenManager.prototype.SetHoloLens = function () {
            document.body.style.background = "black";
            var t = (document.getElementById('MyNMIPortal'));
            if (t)
                t.style.marginTop = "0";
            cdeNMI.ShowToastMessage("Welcome to HoloLens Mode!");
            return "";
        };
        TheScreenManager.prototype.ShowHideDrawOverlay = function () {
            if (!this.MyDrawOverlay) {
                cdeNMI.ShowToastMessage("Welcome to your Scratch Board", "You draw on the screen and save your drawings to your Relay");
                this.MyDrawOverlay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.DrawOverlay).Create(cdeNMI.MyNMIPortal, { TRF: new cdeNMI.TheTRF("ScratchBoard", 0, null), PostInitBag: ["ClassName=cdeDrawOverlay"] });
                this.MyDrawOverlay.SetProperty("IsSynced", true);
                this.MyDrawOverlay.SetProperty("ShowPlay", true);
                this.MyDrawOverlay.SetProperty("IsOverlay", true);
                this.MyDrawOverlay.SetProperty("ShowColors", true);
                this.MyDrawOverlay.SetProperty("AutoAdjust", true);
                this.MyDrawOverlay.RegisterEvent("OnSavePicture", function (pEvent, para) {
                    cdeNMI.ShowToastMessage("Drawing Saved", para[1]);
                });
            }
            else {
                if (cdeNMI.MyNMIPortal)
                    cdeNMI.MyNMIPortal.DeleteControl(this.MyDrawOverlay);
                this.MyDrawOverlay = null;
            }
        };
        TheScreenManager.prototype.sinkEngineReady = function (pSender, bIsReady) {
            if (cde.MyBaseAssets.MyServiceHostInfo.DoAllowAnonymous || cde.MyBaseAssets.MyCommStatus.IsUserLoggedIn) {
                if (pSender === null || bIsReady) {
                    this.HandleLogin(true);
                }
            }
        };
        TheScreenManager.prototype.HandleLogin = function (pIsLoggedIn, tScreenParts) {
            if (this.WasLoginHandled)
                return;
            if (pIsLoggedIn === true) {
                this.WasLoginHandled = true;
                this.SetApplicationBar();
                cde.MyBaseAssets.MyServiceHostInfo.WasPortalRequested = false;
                this.FireEvent(false, "OnHandleLogin", true);
                if (cde.MyBaseAssets.MyCommStatus.LastPortalScreen) {
                    if (cdeNMI.MyEngine)
                        cdeNMI.MyEngine.GetScreenMeta(cde.MyBaseAssets.MyCommStatus.LastPortalScreen, false);
                }
                else
                    this.RequestPortalScreen(false);
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.IsConnectedAndReady = true;
                    if (cde.MyBaseAssets.MyCommStatus.LastStartScreen) {
                        cdeNMI.MyEngine.GetScene(cde.MyBaseAssets.MyCommStatus.LastStartScreen);
                    }
                    else if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen) {
                        cdeNMI.MyEngine.GetScene(cde.MyBaseAssets.MyServiceHostInfo.StartScreen);
                    }
                }
                else {
                    this.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.StartScreen);
                }
            }
        };
        TheScreenManager.prototype.SetStatusMsg = function (pStatusMsg, pState) {
            if (cdeNMI.MyLoginScreen)
                cdeNMI.MyLoginScreen.SetStatusMsg(pStatusMsg, pState);
            if (pState === 3) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Show(pStatusMsg, true, null, null, function () {
                        cdeNMI.ResetBrowserToPortal();
                    });
                else
                    cdeNMI.ResetBrowserToPortal();
            }
        };
        TheScreenManager.prototype.FindDashpanel = function (pScreenID, pID) {
            pID = cde.GuidToString(pID);
            var tModel = cdeNMI.MyNMIModels[pScreenID];
            if (!tModel)
                return null;
            for (var i = 0; i < tModel.MyDashPanels.length; i++) {
                if (cde.GuidToString(tModel.MyDashPanels[i].cdeMID) === pID) {
                    return tModel.MyDashPanels[i];
                }
            }
            return null;
        };
        TheScreenManager.prototype.SetScreenState = function (pScreenID, pScreenName) {
            if (cde.IsNotSet(pScreenID))
                pScreenID = cde.GuidToString(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
            var tDash = this.FindDashpanel(pScreenID, pScreenName);
            if (tDash) {
                if (tDash.IsFullSceen)
                    this.RenderHeader(false);
                else
                    this.RenderHeader(true);
                return cdeNMI.ThePB.GetValueFromBagByName(tDash.PropertyBag, "Title");
            }
            return cde.MyBaseAssets.MyServiceHostInfo.ApplicationTitle;
        };
        TheScreenManager.prototype.ClearScenes = function () {
            this.CurrentScreen = null;
            for (var i in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(i)) {
                    this.MyNMIScreens[i].SetProperty("IsPinned", false);
                    this.ShowHideScreen(this.MyNMIScreens[i]);
                }
            }
        };
        TheScreenManager.prototype.ClearAndGoHome = function () {
            this.ClearScenes();
            this.GotoStationHome(false);
        };
        TheScreenManager.prototype.AreScreensPinned = function (pScreen) {
            var tFound = 0;
            for (var i in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(i)) {
                    if (this.MyNMIScreens[i] !== pScreen && this.MyNMIScreens[i].GetProperty("IsPinned") === true) {
                        tFound++;
                    }
                }
            }
            return tFound;
        };
        TheScreenManager.prototype.FindPinnedScreen = function () {
            for (var i in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(i)) {
                    if (this.MyNMIScreens[i].GetProperty("IsPinned") === true) {
                        return this.MyNMIScreens[i];
                    }
                }
            }
            return null;
        };
        TheScreenManager.prototype.SetCurrentScreen = function (pScreen, pRowID, pOwnerTable) {
            this.CurrentScreen = pScreen;
            if (!pScreen)
                return;
            if (pRowID)
                this.CurrentScreen.SetProperty("TTSCookie", pRowID);
            else
                this.CurrentScreen.SetProperty("TTSCookie", null);
            if (this.CurrentScreen.MyNMIControl) {
                if (pRowID)
                    this.CurrentScreen.MyNMIControl.SetProperty("TTSCookie", pRowID);
                else
                    this.CurrentScreen.MyNMIControl.SetProperty("TTSCookie", null);
            }
            if (pOwnerTable) {
                this.CurrentScreen.SetProperty("MyOwnerTable", pOwnerTable);
                if (this.CurrentScreen.MyNMIControl)
                    this.CurrentScreen.MyNMIControl.SetProperty("MyOwnerTable", pOwnerTable);
            }
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.PublishToNMI("NMI_SHOW_SCREEN" + (pRowID ? ":" + pRowID : ""), this.CurrentScreen.MyScreenID, this.CurrentScreen.MyFieldInfo ? this.CurrentScreen.MyFieldInfo.cdeN : null);
        };
        TheScreenManager.prototype.GetCurrentScreen = function () {
            return this.CurrentScreen;
        };
        TheScreenManager.prototype.GetScreenByID = function (pScreenID) {
            pScreenID = cde.GuidToString(pScreenID);
            return this.MyNMIScreens[pScreenID];
        };
        TheScreenManager.prototype.DeleteScreenByID = function (pScreenID, bDeleteKids) {
            var tScreen = this.GetScreenByID(pScreenID);
            if (!tScreen)
                return false;
            if (bDeleteKids) {
                tScreen.Clear(bDeleteKids);
                if (this.MyNMIScreens.hasOwnProperty(pScreenID)) {
                    delete this.MyNMIScreens[pScreenID];
                }
            }
            return true;
        };
        TheScreenManager.prototype.RegisterScreen = function (pID, pScreen, bRegisterOnly) {
            if (!pScreen)
                return;
            pID = cde.GuidToString(pID);
            this.MyNMIScreens[pID] = pScreen;
            pScreen.SetProperty("LastShow", new Date());
            if (bRegisterOnly)
                return;
            if (!this.CurrentScreen || this.CurrentScreen.MyScreenID !== pID)
                this.ShowHideScreen(pScreen);
        };
        TheScreenManager.prototype.ShowHeader = function (bShow) {
            //override if needed
        };
        TheScreenManager.prototype.ShowAllScreens = function () {
            for (var i in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(i)) {
                    if (this.MyNMIScreens[i].MyScreenID !== "CDELOGINSCREEN") {
                        if (cdeNMI.MyEngine)
                            cdeNMI.MyEngine.CheckDataToFetch(this.MyNMIScreens[i].MyScreenID);
                        this.ShowHideScreen(this.MyNMIScreens[i], true);
                    }
                }
            }
        };
        TheScreenManager.prototype.TransitToWaitingScreen = function (pTargetScreen) {
            if (this.WaitingForScreen && cde.GuidToString(this.WaitingForScreen) === pTargetScreen) {
                this.TransitToScreen(this.WaitingForScreen, false, false);
                this.WaitingForScreen = null;
            }
        };
        TheScreenManager.prototype.TransitToScreenIDX = function (pIDX) {
            if (this.CurrentScreen && this.CurrentScreen.GetProperty("IsDashboard")) {
                for (var tdx in this.CurrentScreen.MyChildren) {
                    var tS = this.CurrentScreen.MyChildren[tdx];
                    if (tS && tS.MyRC >= 0 && tS.MyRC === pIDX) {
                        this.TransitToScreen(tdx);
                        break;
                    }
                }
            }
        };
        TheScreenManager.prototype.TransitToScreen = function (pTargetScreen, MustExist, DontTryLoad, pCookie, pOwnerTable) {
            if (MustExist === void 0) { MustExist = false; }
            if (DontTryLoad === void 0) { DontTryLoad = false; }
            if (cde.CBool(cde.TheBaseAssets.IsConnectionDown()) === true) {
                cdeNMI.ResetBrowserToPortal();
                return;
            }
            if (!pTargetScreen)
                pTargetScreen = cde.MyBaseAssets.MyServiceHostInfo.PortalScreen;
            if (!cde.MyBaseAssets.MyServiceHostInfo.WasInitialScreenVisible) {
                if (cde.MyBaseAssets.MyServiceHostInfo.DoesRequireConfiguration && !cde.MyBaseAssets.MyServiceHostInfo.DoAllowAnonymous && cde.MyBaseAssets.MyServiceHostInfo.MainConfigScreen) {
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Show('Your Relay is not completely configured, yet. Do you want to do this now?', false, null, 1, function (tPopup, parent, cookie) {
                            cdeNMI.MyScreenManager.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.MainConfigScreen);
                        }, null, this, parent);
                }
            }
            if (this.MyPopupOverlay) {
                this.RemoveChild(this.MyPopupOverlay);
                this.MyPopupOverlay = null;
            }
            var tScrolPos = document.body.scrollTop;
            var tTargetScreen = cde.GuidToString(pTargetScreen);
            var tOldScreen = this.GetCurrentScreen();
            this.SetCurrentScreen(null);
            for (var i in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(i)) {
                    if (i === tTargetScreen) {
                        if (tOldScreen && tOldScreen.MyScreenID === i) {
                            this.SetCurrentScreen(tOldScreen, pCookie, pOwnerTable);
                            break;
                        }
                        this.SetCurrentScreen(this.MyNMIScreens[i], pCookie, pOwnerTable);
                        var tScreenInfo = null;
                        if (cdeNMI.MyEngine) {
                            tScreenInfo = cdeNMI.MyNMIModels[this.CurrentScreen.MyScreenID];
                            if (tScreenInfo && tScreenInfo.MyDashboard && tScreenInfo.MyDashboard["InitialState"] &&
                                (!tOldScreen || cde.GuidToString(tScreenInfo.MyDashboard["InitialState"]) !== tOldScreen.MyScreenID)) {
                                this.TransitToScreen(tScreenInfo.MyDashboard["InitialState"]);
                                return;
                            }
                            if (!DontTryLoad)
                                cdeNMI.MyEngine.CheckDataToFetch(pTargetScreen);
                        }
                        this.SetScreenState("", pTargetScreen);
                        this.ShowHideScreen(this.CurrentScreen, true);
                        this.MoveScreenToTop(this.CurrentScreen);
                        if (cde.CBool(this.CurrentScreen.GetProperty("IsPopup"))) {
                            this.MyPopupOverlay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TouchOverlay).Create(this);
                            this.MyPopupOverlay.SetProperty("ClassName", "cdePopupOverlay");
                            this.CurrentScreen.GetElement().style.position = "absolute";
                            this.CurrentScreen.GetElement().style.zIndex = "1100";
                            this.CurrentScreen.GetElement().style.left = (window.innerWidth / 2 - (this.CurrentScreen.GetElement().clientWidth / 2) + "px"); //TODO: Dont use hardcoded size 12
                            this.CurrentScreen.GetElement().className = "cdePopupTemplate cde-animate-opacity";
                            this.CurrentScreen.SetProperty("ClassName", "cdePopupContent");
                            this.CurrentScreen.SetProperty("OldScreen", tOldScreen.MyScreenID);
                        }
                        else {
                            if (tOldScreen && !this.CurrentScreen.HasRenderTarget)
                                this.ShowHideScreen(tOldScreen);
                            if (cde.MyCommChannel) {
                                var tScreenTrack = new Array();
                                tScreenTrack["LSSC"] = pTargetScreen;
                                if (this.CurrentScreen.GetProperty("DashID"))
                                    tScreenTrack["LPS"] = this.CurrentScreen.GetProperty("DashID");
                                cde.MyCommChannel.UpdateCustomSettings(tScreenTrack);
                            }
                        }
                        //if (this.CurrentScreen.GetContainerElement() &&
                        //    this.CurrentScreen.GetProperty("IsDashboard") != true &&
                        //    this.CurrentScreen.GetContainerElement().clientWidth > cdeNMI.GetSizeFromTile(18)) //12 Must be device Width Dependent
                        //    this.CurrentScreen.ShowFullscreen(true);
                        //else
                        this.CurrentScreen.ShowFullscreen(false);
                        if (this.CurrentScreen.GetProperty("IsFullScreen"))
                            cdeNMI.TogglePortalFull(true);
                        else
                            cdeNMI.TogglePortalFull(false);
                        try {
                            if ((!this.CurrentScreen.MyFieldInfo || cde.CBool(this.CurrentScreen.MyFieldInfo["IsTemplate"]) !== true) && !cde.CBool(this.CurrentScreen.GetProperty("IsPopup"))) {
                                var tH = { ScreenID: pTargetScreen, ScrolPos: tScrolPos };
                                this.MyNavHistory.push(tH);
                                window.history.pushState(pTargetScreen, tTargetScreen);
                                document.body.scrollTop = document.documentElement.scrollTop = 0;
                                if (this.MyMainBackButton) {
                                    if (this.MyNavHistory.length < 2)
                                        this.MyMainBackButton.SetProperty("Disabled", true);
                                    else
                                        this.MyMainBackButton.SetProperty("Disabled", false);
                                }
                            }
                        }
                        catch (e) {
                            //ignored
                        }
                    }
                    else {
                        if (this.MyNMIScreens[i] !== tOldScreen)
                            this.ShowHideScreen(this.MyNMIScreens[i]);
                    }
                }
            }
            if (!this.CurrentScreen) {
                this.SetCurrentScreen(this.GetScreenByID(pTargetScreen), pCookie, pOwnerTable);
                if (!this.CurrentScreen) {
                    if (MustExist) {
                        if (cdeNMI.MyEngine)
                            cdeNMI.MyEngine.PublishToNMI("NMI_GET_SCREEN", pTargetScreen);
                        this.WaitingForScreen = pTargetScreen;
                        return;
                    }
                    if (pTargetScreen === cde.MyBaseAssets.MyServiceHostInfo.StartScreen) {
                        if (!this.CurrentView)
                            this.CurrentView = this.StartView;
                        if (this.CurrentView) {
                            this.ShowView();
                            return;
                        }
                        else {
                            this.WaitingForScreen = pTargetScreen;
                            return;
                        }
                    }
                    if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen)
                        pTargetScreen = cde.MyBaseAssets.MyServiceHostInfo.StartScreen;
                    else
                        pTargetScreen = cde.MyBaseAssets.MyServiceHostInfo.PortalScreen;
                    this.MyNavHistory.push({ ScreenID: pTargetScreen, ScrolPos: tScrolPos });
                    if (this.MyMainBackButton)
                        this.MyMainBackButton.SetProperty("Disabled", false);
                    this.SetCurrentScreen(this.GetScreenByID(pTargetScreen), pCookie, pOwnerTable);
                }
                if (!this.CurrentScreen) {
                    if (cdeNMI.MyLoginScreen)
                        this.ShowHideScreen(cdeNMI.MyLoginScreen, true);
                    return;
                }
                if (!DontTryLoad && cdeNMI.MyEngine)
                    cdeNMI.MyEngine.CheckDataToFetch(pTargetScreen);
                this.ShowHideScreen(this.CurrentScreen, true);
            }
            if (!cde.MyBaseAssets.MyServiceHostInfo.WasInitialScreenVisible)
                cdeNMI.ResetKeyCorder();
            cde.MyBaseAssets.MyServiceHostInfo.WasInitialScreenVisible = true;
            if (pTargetScreen === cde.MyBaseAssets.MyServiceHostInfo.PortalScreen) {
                cdeNMI.cdeBlendInTiles('.cdeLiveTile');
                this.RenderHeader(true);
            }
            else {
                cdeNMI.cdeBlendInTiles('.cdeLiveTile');
            }
            this.CurrentView = null;
        };
        TheScreenManager.prototype.ShowHideScreen = function (pScreen, doShow) {
            if (doShow === void 0) { doShow = false; }
            if (!pScreen)
                return;
            if (!doShow) {
                if (!pScreen.GetProperty("IsPinned") && cde.CBool(pScreen.GetProperty("IsAlwaysVisible")) !== true) {
                    if (pScreen.Visibility)
                        pScreen.OnUnload();
                    pScreen.SetProperty("Visibility", false);
                }
            }
            else {
                if (!pScreen.Visibility)
                    pScreen.OnLoad(true);
                pScreen.SetProperty("Visibility", true);
            }
        };
        TheScreenManager.prototype.SwitchTheme = function (pToDark) {
            //overide if needed
        };
        TheScreenManager.prototype.GotoStationHome = function (IsManual) {
            if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen !== "")
                this.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.StartScreen, true);
            else
                this.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen, true);
        };
        ///Used by Convenience Apps
        TheScreenManager.prototype.NavigateBack = function (DoHome) {
            if (cde.CBool(cde.TheBaseAssets.IsConnectionDown()) === true) {
                cdeNMI.ResetBrowserToPortal();
                return;
            }
            if (cdeNMI.MyPopUp)
                cdeNMI.MyPopUp.Hide(false);
            this.FireEvent(false, "NavigateBackClicked");
            if (this.MyNavHistory.length > 1) {
                var tH = this.MyNavHistory.pop();
                var tSP = tH.ScrolPos;
                tH = this.MyNavHistory.pop();
                this.TransitToScreen(tH.ScreenID);
                document.body.scrollTop = document.documentElement.scrollTop = tSP;
            }
            else
                this.GotoStationHome(true);
            if (this.MyMainBackButton) {
                if (this.MyNavHistory.length < 2)
                    this.MyMainBackButton.SetProperty("Disabled", true);
                else
                    this.MyMainBackButton.SetProperty("Disabled", false);
            }
        };
        TheScreenManager.prototype.CntScreenPinned = function () {
            var cnt = 0;
            for (var i in this.MyNMIScreens) {
                if (this.MyNMIScreens.hasOwnProperty(i)) {
                    if (this.MyNMIScreens[i].GetProperty("IsPinned") === true)
                        cnt++;
                }
            }
            return cnt;
        };
        TheScreenManager.prototype.MoveScreenToTop = function (pScreen) {
            if (!pScreen)
                return;
            var tH = pScreen.GetElement();
            var tParent = tH.parentElement;
            if (!tParent)
                return;
            var tNode0 = tParent.children[0];
            if (tNode0 === tH)
                return;
            tH.parentElement.removeChild(tH);
            tParent.insertBefore(tH, tNode0);
            this.RenumberScreens();
        };
        TheScreenManager.prototype.RenumberScreens = function () {
            var tRoot = document.getElementById("MyDashboard");
            if (tRoot) {
                for (var i = 0; i < tRoot.children.length; i++) {
                    var tC = tRoot.children[i];
                    var tc = tC.id.split('_');
                    if (tc.length > 1 && tc[0].toLowerCase() === "screen") {
                        var tScreen = this.GetScreenByID(tc[1]);
                        if (tScreen)
                            tScreen.SetProperty("FldOrder", i);
                    }
                }
            }
        };
        TheScreenManager.prototype.UpdateScreenStatus = function (mh, pIsDown) {
            for (var ts in this.MyNMIScreens) {
                if (this.MyNMIScreens[ts].MyHostNode === mh || this.MyNMIScreens[ts].GetProperty("IsDashboard") === true) {
                    if (ts === cde.GuidToString(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen))
                        continue;
                    this.MyNMIScreens[ts].SetProperty("IsOwnerDown:" + mh, pIsDown);
                }
            }
        };
        TheScreenManager.prototype.GetScreenIndex = function () {
            return this.ScreenOrder++;
        };
        TheScreenManager.prototype.GetScreenList = function () {
            var tLst = "";
            for (var tIdx in this.MyNMIScreens) {
                var tS = this.MyNMIScreens[tIdx];
                if (!tS || !tS.GetProperty("Description") || tIdx === "CDELOGINSCREEN" || (tS.MyHostNode !== cde.MyBaseAssets.MyCommStatus.FirstNodeID))
                    continue;
                tLst += ";" + cdeNMI.StripHTML(tS.GetProperty("Description")) + ":" + tIdx;
            }
            return tLst;
        };
        TheScreenManager.prototype.IsScreenInView = function (pCurrentView, pID) {
            if (!pCurrentView)
                return true;
            for (var i = 0; i < pCurrentView.Screens.length; i++) {
                if (pCurrentView.Screens[i].ID === pID) {
                    var tScreen = this.GetScreenByID(pCurrentView.Screens[i].ID);
                    if (tScreen) {
                        tScreen.SetProperty("IsPinned", pCurrentView.Screens[i].IsPinned);
                        this.ShowHideScreen(tScreen, pCurrentView.Screens[i].IsVisible);
                        tScreen.SetProperty("FldOrder", pCurrentView.Screens[i].FldOrder);
                    }
                    return pCurrentView.Screens[i].IsVisible;
                }
            }
            return false;
        };
        TheScreenManager.prototype.CreateHTMLScreen = function (pScreenID, pHTML) {
            var tScreen = cdeNMI.MyScreenManager.GetScreenByID(pScreenID);
            if (tScreen) {
                tScreen.CreateHTMLView(pHTML);
                tScreen.SetInitialized(true);
            }
            return tScreen;
        };
        TheScreenManager.prototype.CreateScriptScreen = function (pScreenID, pScript) {
            var tScreen = this.GetScreenByID(pScreenID);
            if (tScreen) {
                tScreen.CreateScriptInView(pScript);
                tScreen.SetInitialized(true);
            }
            return tScreen;
        };
        TheScreenManager.prototype.CreateIFrameScreen = function (pScreenID, pURL) {
            var tScreen = this.GetScreenByID(pScreenID);
            if (tScreen) {
                tScreen.SetProperty("Source", pURL);
                tScreen.SetInitialized(true);
            }
            return tScreen;
        };
        TheScreenManager.prototype.CreateDataViewScreen = function (tModel, pMSG, tTableName, pExtraInfo, pScreenID, bForceInitData, pRowMID) {
            var tModelId = cde.GuidToString(tModel.cdeMID);
            if (pMSG && (typeof (pMSG.PLS) === "object" || (pMSG.PLS !== "" && pMSG.PLS !== "[]"))) {
                var tParts = pMSG.PLS.split(":-MODELUPDATE-:");
                var pMSGPLS = tParts[0];
                if (!tModel.MyStorageMirror[tTableName] || cde.CBool(bForceInitData) === true) // 
                    tModel.MyStorageMirror[tTableName] = (typeof (pMSGPLS) === "object" ? pMSGPLS : JSON.parse(pMSGPLS));
                else {
                    var tTable = (typeof (pMSGPLS) === "object" ? pMSGPLS : JSON.parse(pMSGPLS));
                    for (var c = 0; c < tTable.length; c++) {
                        var tLen = tModel.MyStorageMirror[tTableName].length;
                        var tFoundOne = false;
                        for (var tc = 0; tc < tLen; tc++) {
                            if (tModel.MyStorageMirror[tTableName][tc].cdeMID === tTable[c].cdeMID) {
                                tModel.MyStorageMirror[tTableName][tc] = tTable[c];
                                tFoundOne = true;
                                break;
                            }
                        }
                        if (!tFoundOne)
                            tModel.MyStorageMirror[tTableName][tLen] = tTable[c];
                    }
                }
                if (tParts.length > 1 && tModel.MyStorageMeta && (tModel.MyStorageMeta[tTableName] || cde.CBool(bForceInitData) === true)) {
                    var ttModel = JSON.parse(tParts[1]);
                    tModel.MyStorageMeta[tTableName] = ttModel;
                }
                if (cdeNMI.MyEngine)
                    cdeNMI.MyEngine.FireLazyLoaded(tModelId, tTableName, tModel.MyStorageMirror[tTableName]);
                if (pScreenID === "noview")
                    return null;
            }
            var tFormInfo = (tModel && tModel.MyStorageMeta && tModel.MyStorageMeta[tTableName]) ? tModel.MyStorageMeta[tTableName] : null;
            var pTarget = null;
            if (pScreenID) {
                pTarget = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.BaseControl);
                pTarget.MyScreenID = cde.GuidToString(pScreenID);
                var tTargetElem = document.getElementById('Content_' + pTarget.MyScreenID);
                if (!tTargetElem)
                    tTargetElem = document.getElementById(pTarget.MyScreenID);
                pTarget.SetElement(tTargetElem);
            }
            var tBaseControl = null;
            var tScreen = cdeNMI.MyScreenManager && pScreenID ? cdeNMI.MyScreenManager.GetScreenByID(pScreenID) : null;
            if (tFormInfo) {
                var tTRF = cdeNMI.TheTRF.FromScreenForm(tModel, tTableName);
                if (tFormInfo.IsAlwaysEmpty === true)
                    tTRF.RowNo = -1;
                var tRef = cde.GuidToString(cdeNMI.ThePB.GetValueFromBagByName(tFormInfo.PropertyBag, "TableReference"));
                if (!pRowMID && tScreen && tScreen.GetProperty("TTSCookie")) {
                    pRowMID = tScreen.GetProperty("TTSCookie");
                }
                if (pRowMID) {
                    tTRF.RowID = pRowMID;
                    tTRF.RowNo = -1;
                    if (tRef)
                        tTableName = tRef;
                    if (!tModel.MyStorageMirror[tTableName]) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show("Template in use but has no Table Reference");
                    }
                    else {
                        var tLen = tModel.MyStorageMirror[tTableName].length;
                        for (var tc = 0; tc < tLen; tc++) {
                            if (tModel.MyStorageMirror[tTableName][tc].cdeMID === tTRF.RowID) {
                                tTRF.RowNo = tc;
                                break;
                            }
                        }
                    }
                }
                tBaseControl = cdeNMI.MyTCF.CreateNMIControl(tTRF.FldInfo.Type).Create(pTarget, { ScreenID: cde.GuidToString(tModel.MyDashboard.cdeMID), TRF: tTRF, PreInitBag: ["ExtraInfo=" + pExtraInfo, (tRef ? "TableReference=" + tRef : "")], PostInitBag: tFormInfo.PropertyBag });
                if (tBaseControl && cdeNMI.MyTCF && pTarget) {
                    var tableTE = cdeNMI.MyTCF.GetRegisteredControl(pTarget.MyScreenID, "TE");
                    if (tableTE) {
                        tBaseControl.SetTE(tableTE);
                    }
                }
                if (tScreen) {
                    tBaseControl.OnLoaded();
                    if (tBaseControl && tBaseControl.MyFieldInfo)
                        cdeNMI.ThePB.SetPropertiesFromBag(tScreen, tBaseControl.MyFieldInfo.PropertyBag, null, false, false);
                    tScreen.SetInitialized(true);
                    if (tScreen.MySavePin)
                        tScreen.MySavePin.SetProperty("Visibility", true);
                    if (tScreen.MyRefreshPin && (!tRef || tRef.length === 0))
                        tScreen.MyRefreshPin.SetProperty("Visibility", true);
                    if (tBaseControl)
                        tScreen.MyNMIControl = tBaseControl;
                }
            }
            else {
                if (tScreen) {
                    var tToFetch = tTableName + ":CMyForm:" + tTableName + ":" + cde.GuidToString(tScreen.GetProperty("DashID")) + ":true:false";
                    if (cdeNMI.MyEngine) {
                        //cdeNMI.MyEngine.AddDataToFetch(tToFetch); //TODO: this was working before...some ID must be wrong
                        //cdeNMI.MyEngine.CheckDataToFetch(tTableName);
                    }
                    else {
                        this.FireEvent(true, "FetchData", tToFetch);
                    }
                    return null;
                }
            }
            if (pScreenID)
                cdeNMI.MyTCF.RegisterControl("TABLES", pTarget.MyScreenID, tBaseControl);
            else
                cdeNMI.MyTCF.RegisterControl("TABLES", tTableName, tBaseControl);
            return tBaseControl;
        };
        TheScreenManager.prototype.CreateLiveScreen = function (pModel) {
            var tModelId = cde.GuidToString(pModel.cdeMID);
            if (!cdeNMI.MyNMIModels[tModelId] || pModel.ForceReload)
                cdeNMI.MyNMIModels[tModelId] = pModel;
            else {
                if (!cdeNMI.MyNMIModels[tModelId].MyStorageMirror)
                    cdeNMI.MyNMIModels[tModelId].MyStorageMirror = [];
            }
            if (pModel && pModel.MyStorageInfo) {
                if (!cdeNMI.MyNMIModels[tModelId].MyStorageMeta)
                    cdeNMI.MyNMIModels[tModelId].MyStorageMeta = [];
                for (var i = 0; i < pModel.MyStorageInfo.length; i++) { //TODO: Check if there is better Way!
                    cdeNMI.MyNMIModels[tModelId].MyStorageMeta[tModelId] = pModel.MyStorageInfo[i];
                }
            }
            var pTarget = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.BaseControl);
            pTarget.MyScreenID = tModelId;
            var pTargetElem = document.getElementById('Content_' + cde.GuidToString(tModelId));
            if (!pTargetElem) {
                //cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheNMIService:OnHandleMessage", "Target Element for Live Screen not found " + tModelId);
            }
            else {
                var tTRF = cdeNMI.TheTRF.FromScreenForm(pModel, tModelId);
                pTarget.SetElement(pTargetElem);
                var tBaseControl = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.FormView).Create(pTarget, { ScreenID: tModelId, TRF: tTRF, PreInitBag: ["ILF=true"] });
                cdeNMI.MyTCF.RegisterControl("TABLES", tModelId, tBaseControl);
                var tScreen = cdeNMI.MyScreenManager && tModelId ? cdeNMI.MyScreenManager.GetScreenByID(tModelId) : null;
                if (tScreen) {
                    tScreen.SetInitialized(true);
                    if (tScreen.MySavePin)
                        tScreen.MySavePin.SetProperty("Visibility", true);
                    if (tScreen.MyRefreshPin)
                        tScreen.MyRefreshPin.SetProperty("Visibility", true);
                    if (tBaseControl)
                        tScreen.MyNMIControl = tBaseControl;
                }
                return tBaseControl;
            }
            return null;
        };
        TheScreenManager.prototype.CreateDashboard = function (tModel, pInScreenGuid) {
            var tModelId = cde.GuidToString(tModel.cdeMID);
            var IsModelReady = false;
            if (tModel.MyDashboard) {
                tModelId = cde.GuidToString(tModel.MyDashboard.cdeMID);
                if (!cdeNMI.MyNMIModels[tModelId] || tModel.ForceReload)
                    cdeNMI.MyNMIModels[tModelId] = tModel;
                else {
                    if (cdeNMI.MyNMIModels[tModelId] && !cdeNMI.MyNMIModels[tModelId].MyDashboard)
                        cdeNMI.MyNMIModels[tModelId].MyDashboard = tModel.MyDashboard;
                    if (!cdeNMI.MyNMIModels[tModelId].MyStorageMirror)
                        cdeNMI.MyNMIModels[tModelId].MyStorageMirror = [];
                }
                IsModelReady = true;
                cde.MyBaseAssets.MyServiceHostInfo.WasPortalRequested = true;
            }
            if (!cdeNMI.MyNMIModels[tModelId] || (IsModelReady && tModel.ForceReload)) {
                cdeNMI.MyNMIModels[tModelId] = tModel;
            }
            else {
                if (tModel && tModel.MyDashPanels && tModel.MyDashPanels.length > 0) {
                    var tExiting = {};
                    var j = void 0;
                    for (j = 0; j < cdeNMI.MyNMIModels[tModelId].MyDashPanels.length; j++) {
                        if (cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeN === tModel.cdeN) {
                            tExiting[cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeMID] = false;
                        }
                    }
                    for (var i = 0; i < tModel.MyDashPanels.length; i++) {
                        var tFoundOne = false;
                        for (j = 0; j < cdeNMI.MyNMIModels[tModelId].MyDashPanels.length; j++) {
                            if (tModel.MyDashPanels[i].cdeMID === cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeMID) {
                                cdeNMI.MyNMIModels[tModelId].MyDashPanels[j] = tModel.MyDashPanels[i];
                                tFoundOne = true;
                                tExiting[cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeMID] = true;
                                break;
                            }
                        }
                        if (!tFoundOne) {
                            cdeNMI.MyNMIModels[tModelId].MyDashPanels.push(tModel.MyDashPanels[i]);
                            tExiting[tModel.MyDashPanels[i].cdeMID] = true;
                        }
                    }
                    for (j = cdeNMI.MyNMIModels[tModelId].MyDashPanels.length - 1; j >= 0; j--) {
                        if (cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeN === tModel.cdeN && (!tExiting[cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeMID] || tExiting[cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeMID] === false)) {
                            if (cdeNMI.MyScreenManager)
                                cdeNMI.MyScreenManager.DeleteScreenByID(cdeNMI.MyNMIModels[tModelId].MyDashPanels[j].cdeMID, false);
                            cdeNMI.MyNMIModels[tModelId].MyDashPanels.splice(j, 1);
                        }
                    }
                }
            }
            if (tModel && tModel.MyStorageInfo) {
                if (!cdeNMI.MyNMIModels[tModelId].MyStorageMeta)
                    cdeNMI.MyNMIModels[tModelId].MyStorageMeta = [];
                for (var i = 0; i < tModel.MyStorageInfo.length; i++) { //TODO: Check if there is better Way!
                    cdeNMI.MyNMIModels[tModelId].MyStorageMeta[cde.GuidToString(tModel.MyStorageInfo[i].AssociatedClassName)] = tModel.MyStorageInfo[i];
                }
            }
            if (IsModelReady) {
                var tDash = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Dashboard, true);
                if (tDash)
                    tDash.Create(cdeNMI.MyScreenManager, { ScreenID: tModelId, PreInitBag: [pInScreenGuid] });
                return tDash;
            }
            return null;
        };
        return TheScreenManager;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.TheScreenManager = TheScreenManager;
    var TheScreenManagerClassic = /** @class */ (function (_super) {
        __extends(TheScreenManagerClassic, _super);
        function TheScreenManagerClassic() {
            var _this = _super.call(this, null) || this;
            _this.MyHeaderTitle = null;
            _this.MyThemeSwitch = null;
            _this.mLogoButton = null;
            _this.mHeaderTileSize = 0;
            _this.MyBaseType = cdeNMI.cdeControlType.ScreenManager;
            return _this;
        }
        TheScreenManagerClassic.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyHeader = document.getElementById("MyHeader");
            if (!this.MyHeader) {
                this.MyHeader = document.createElement("div");
                this.MyHeader.className = "cdeHeader";
                this.MyHeader.id = "MyHeader";
                this.GetElement().parentNode.insertBefore(this.MyHeader, this.GetElement().nextSibling);
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 5) {
                var tHeaderBuffer = document.createElement("div");
                tHeaderBuffer.className = "cdeBottomSpacer";
                var tInBuff = document.createElement("div");
                tHeaderBuffer.style.height = "100px";
                tHeaderBuffer.style.width = "10px";
                tHeaderBuffer.appendChild(tInBuff);
                this.GetElement().parentNode.insertBefore(tHeaderBuffer, this.GetElement().nextSibling);
            }
            this.mDivHeaderButtons = document.getElementById("HeaderButtonContent");
            if (!this.mDivHeaderButtons) {
                this.mDivHeaderButtons = document.createElement("div");
                this.mDivHeaderButtons.id = "HeaderButtonContent";
                this.MyHeader.appendChild(this.mDivHeaderButtons);
            }
            var tTitle = cde.MyBaseAssets.MyServiceHostInfo.ApplicationTitle;
            this.mDivHeaderTitle = document.getElementById("cdeHeaderTitle");
            if (!this.mDivHeaderTitle) {
                this.mDivHeaderTitle = document.createElement("div");
                this.mDivHeaderTitle.className = "cdeMyHeaderTitle";
                this.mDivHeaderTitle.id = "cdeHeaderTitle";
                this.MyHeader.appendChild(this.mDivHeaderTitle);
            }
            else {
                tTitle = this.mDivHeaderTitle.innerHTML;
            }
            //this.MyHeaderTitle = ctrlSmartLabel.Create(null, null, null, this.cdeHeaderTitleTD.innerHTML, "span", false, "cdeMyHeaderTitle");
            this.MyHeaderTitle = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(null, { PreInitBag: ["Element=span"], PostInitBag: ["iValue=" + tTitle, "ClassName=cdeMyHeaderTitle"] });
            this.mDivHeaderTitle.innerHTML = "";
            this.mDivHeaderTitle.appendChild(this.MyHeaderTitle.GetElement());
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1 && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 5) {
                var tPortal = document.getElementById("MyNMIPortal");
                tPortal.style.marginTop = "78px";
            }
            this.RegisterEvents();
            return true;
        };
        TheScreenManagerClassic.prototype.SetApplicationBar = function () {
            var _this = this;
            if (this.mDivHeadButtonContent)
                return;
            this.mDivHeadButtonContent = document.getElementById("HeaderButtonContent");
            if (!this.mDivHeadButtonContent) //No Applicatin Bar if HeaderButtonContent is missing
                return;
            this.MyMainBackButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa' style='font-size:40px'>&#xf359;</span>", "ClassName=MyHeaderButton"] });
            this.MyMainBackButton.SetProperty("OnClick", function (sender, e, tPs) {
                _this.NavigateBack(false);
            });
            this.MyMainBackButton.SetProperty("TabIndex", 5);
            this.MyMainBackButton.SetProperty("Disabled", true);
            this.MyMainBackButton.SetProperty("Visibility", this.IsBrowserFullscreen || cde.MyBaseAssets.MyServiceHostInfo.WebPlatform > 2 || cde.MyBaseAssets.MyServiceHostInfo.IsAppHosted === true);
            this.MyThemeSwitch = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa' style='font-size:40px'>&#xf185;</span>", "ClassName=cdeVertCenter"] });
            this.MyThemeSwitch.SetProperty("OnClick", function () { return cdeNMI.ToggleTheme(); });
            var tileButHeaderBtnTheme2 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa' style='font-size:40px'>&#xf0c7;</span>", "ClassName=cdeVertCenter"] });
            tileButHeaderBtnTheme2.SetProperty("OnClick", function (sender, e, tPs) {
                if (e.button === 2) {
                    if (_this.CurrentScreen) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show(cde.MyBaseAssets.MyCommStatus.MyServiceUrl + "/nmi?CDEDL=" + _this.CurrentScreen.MyScreenID + ";" + _this.CurrentScreen.GetProperty("DashID"), true);
                    }
                    else {
                        if (_this.StartView && _this.StartView.FriendlyName === "MyHome") {
                            var tScene = _this.StartView;
                            tScene.Screens = new Array();
                            for (var i in _this.MyNMIScreens) {
                                if (_this.MyNMIScreens.hasOwnProperty(i)) {
                                    var tS = new cdeNMI.TheScreenTrans();
                                    tS.ID = _this.MyNMIScreens[i].MyScreenID;
                                    tS.DashID = _this.MyNMIScreens[i].GetProperty("DashID");
                                    tS.IsVisible = _this.MyNMIScreens[i].GetProperty("Visibility");
                                    tS.IsPinned = _this.MyNMIScreens[i].GetProperty("IsPinned");
                                    tS.FldOrder = _this.MyNMIScreens[i].GetProperty("FldOrder");
                                    if (tS.IsVisible || tS.IsPinned)
                                        tScene.Screens.push(tS);
                                }
                            }
                            var tStr = JSON.stringify(tScene);
                            if (cdeNMI.MyEngine) {
                                cdeNMI.MyEngine.PublishToNMI("NMI_SAVE_HOMESCENE", tStr); //TODO: Add User Node ID
                                cdeNMI.ShowToastMessage("My Home Scene updated!");
                            }
                        }
                    }
                    return;
                }
                _this.ShowCreateViewPopup();
            });
            var tileButHeaderBtnTheme3 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa' style='font-size:40px'>&#xf1fc;</span>", "ClassName=cdeVertCenter"] });
            tileButHeaderBtnTheme3.SetProperty("OnClick", function (sender, e, tPs) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                _this.ShowHideDrawOverlay();
            });
            var tileButHeaderBtnTheme4 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa' style='font-size:40px'>&#xf021;</span>", "ClassName=cdeVertCenter"] });
            tileButHeaderBtnTheme4.SetProperty("OnClick", function (sender, e, tPs) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                var bForce = false;
                if (e.button === 2)
                    bForce = true;
                if (_this.CurrentScreen && _this.CurrentScreen !== _this.GetScreenByID(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen)) {
                    if (_this.CurrentScreen.MyRefreshButton) {
                        _this.CurrentScreen.MyRefreshButton.DoFireClick(null);
                        return;
                    }
                    else {
                        if (cdeNMI.MyEngine) {
                            var tFetch = 'NMI_GET_DATA:' + _this.CurrentScreen.MyScreenID + ':' + _this.CurrentScreen.GetProperty("ControlClass") + ':' + _this.CurrentScreen.GetProperty("DashID") + ':true:' + bForce;
                            cdeNMI.MyEngine.PublishToNMI(tFetch, '', _this.CurrentScreen.MyFieldInfo ? _this.CurrentScreen.MyFieldInfo.cdeN : null);
                        }
                    }
                    return;
                }
                if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen === "")
                    cdeNMI.MyNMIModels[cde.GuidToString(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen)] = null;
                if (cdeNMI.MyToast)
                    cdeNMI.MyToast.ShowToastMessage("Portal Refresh sent!", "Touch the home icon to see the changes", 10000);
                if (cdeNMI.MyEngine)
                    cdeNMI.MyEngine.RequestReloadModel(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                _this.RequestPortalScreen(cde.MyBaseAssets.MyServiceHostInfo.StartScreen ? true : bForce);
            });
            var InnerControlArray = new Array();
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform < 2)
                InnerControlArray[0] = this.MyThemeSwitch;
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 0) {
                InnerControlArray[1] = tileButHeaderBtnTheme2;
                InnerControlArray[2] = tileButHeaderBtnTheme3;
                InnerControlArray[3] = tileButHeaderBtnTheme4;
            }
            this.mLogoButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.LogoButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1"] });
            this.mLogoButton.SetProperty("OnClick", function (t, e, pP) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                if (e.button === 2)
                    _this.ClearAndGoHome();
                else
                    _this.GotoStationHome(false);
            });
            var tReveal = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.RevealButton).Create(null);
            tReveal.SetProperty("Image", this.mLogoButton);
            tReveal.SetProperty("TabIndex", 6);
            tReveal.SetProperty("ControlArray", InnerControlArray);
            if (this.mDivHeadButtonContent) {
                this.mDivHeadButtonContent.appendChild(tReveal.GetElement());
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform > 1 && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 4) {
                if (this.mDivHeadButtonContent) {
                    this.mDivHeadButtonContent.appendChild(this.MyThemeSwitch.GetElement());
                    this.mDivHeadButtonContent.appendChild(tileButHeaderBtnTheme4.GetElement());
                }
            }
            if (this.mDivHeadButtonContent) {
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1 || cde.MyBaseAssets.MyServiceHostInfo.IsAppHosted === true) {
                    if (cde.MyBaseAssets.MyServiceHostInfo.IsAppHosted)
                        this.MyMainBackButton.SetProperty("Visibility", true);
                    this.mDivHeadButtonContent.insertBefore(this.MyMainBackButton.GetElement(), this.mDivHeadButtonContent.children[0]);
                    this.RegisterEvent("OnBrowserFullscreen", function (sender, para) {
                        if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform < 2)
                            _this.MyMainBackButton.SetProperty("Visibility", para);
                    });
                }
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 2)
                    this.SetHoloLens();
            }
            cdeNMI.ApplyTheme();
        };
        TheScreenManagerClassic.prototype.SetStatusMsg = function (pStatusMsg, pState) {
            if (this.mLogoButton)
                this.mLogoButton.SetProperty("LogoState", pState);
            _super.prototype.SetStatusMsg.call(this, pStatusMsg, pState);
        };
        TheScreenManagerClassic.prototype.CreateLoginButtonOnly = function () {
            _super.prototype.CreateLoginButtonOnly.call(this);
        };
        TheScreenManagerClassic.prototype.ResizeEventHandler = function () {
            _super.prototype.ResizeEventHandler.call(this);
            if (this.MyHeaderTitle) {
                if (this.mHeaderTileSize === 0)
                    this.mHeaderTileSize = this.MyHeaderTitle.GetElement().parentElement.offsetWidth + cdeNMI.GetSizeFromTile(5);
                if (window.outerWidth < this.mHeaderTileSize)
                    this.MyHeaderTitle.SetProperty("Visibility", false);
                else
                    this.MyHeaderTitle.SetProperty("Visibility", true);
            }
        };
        TheScreenManagerClassic.prototype.RenderHeader = function (bIsVisible) {
            return;
        };
        TheScreenManagerClassic.prototype.ShowHeader = function (bShow) {
            if (!cde.CBool(bShow)) {
                if (this.MyHeader)
                    this.MyHeader.style.display = 'none';
            }
            else {
                if (this.MyHeader && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 2)
                    this.MyHeader.style.display = '';
            }
        };
        TheScreenManagerClassic.prototype.SwitchTheme = function (bToDark) {
            if (this.MyThemeSwitch) {
                if (bToDark)
                    this.MyThemeSwitch.SetProperty("Title", "<span class='fa' style='font-size:40px'>&#xf185;</span>");
                else
                    this.MyThemeSwitch.SetProperty("Title", "<span class='fa' style='font-size:40px'>&#xf186;</span>");
            }
        };
        TheScreenManagerClassic.prototype.SetHoloLens = function () {
            _super.prototype.SetHoloLens.call(this);
            (document.getElementById('MyHeader')).style.display = "none";
            return "";
        };
        return TheScreenManagerClassic;
    }(cdeNMI.TheScreenManager));
    cdeNMI.TheScreenManagerClassic = TheScreenManagerClassic;
    var TheScreenManagerModern = /** @class */ (function (_super) {
        __extends(TheScreenManagerModern, _super);
        function TheScreenManagerModern() {
            var _this = _super.call(this, null) || this;
            _this.MyHeaderTitle = null;
            _this.MyThemeSwitch = null;
            _this.MyLogoButton = null;
            _this.mHeaderTileSize = 0;
            _this.mSideBarState = 0;
            _this.MyBaseType = cdeNMI.cdeControlType.ScreenManager;
            return _this;
        }
        TheScreenManagerModern.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyHeader = document.getElementById("MyHeader");
            if (!this.MyHeader) {
                this.MyHeader = document.createElement("div");
                this.MyHeader.className = "cdeHeader";
                this.MyHeader.id = "MyHeader";
                this.GetElement().parentNode.insertBefore(this.MyHeader, this.GetElement().nextSibling);
            }
            this.mDivHeaderButtons = document.getElementById("HeaderButtonContent");
            if (!this.mDivHeaderButtons) {
                this.mDivHeaderButtons = document.createElement("div");
                this.mDivHeaderButtons.id = "HeaderButtonContent";
                this.MyHeader.appendChild(this.mDivHeaderButtons);
            }
            this.mDivSideBar = document.getElementById("cdeSideBar");
            if (!this.mDivSideBar) {
                this.mDivSideBar = document.createElement("div");
                this.mDivSideBar.id = "cdeSideBar";
                this.mDivSideBar.className = "cdeSideBar";
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 5) {
                    this.mDivSideBar.style.marginBottom = "48px";
                }
                else
                    this.mDivSideBar.style.marginTop = "48px";
                this.MyHeader.parentNode.insertBefore(this.mDivSideBar, this.MyHeader.nextSibling);
            }
            this.mDivHeaderTitle = document.getElementById("cdeHeaderTitle");
            var tTitle = cde.MyBaseAssets.MyServiceHostInfo.ApplicationTitle;
            if (!this.mDivHeaderTitle) {
                this.mDivHeaderTitle = document.createElement("div");
                this.mDivHeaderTitle.className = "cdeMyHeaderTitleModern";
                this.mDivHeaderTitle.id = "cdeHeaderTitle";
                this.MyHeader.appendChild(this.mDivHeaderTitle);
            }
            else {
                tTitle = this.mDivHeaderTitle.innerHTML;
            }
            //this.MyHeaderTitle = ctrlSmartLabel.Create(null, null, null, this.cdeHeaderTitleTD.innerHTML, "span", false, "cdeMyHeaderTitle");
            this.MyHeaderTitle = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(null, { PreInitBag: ["Element=span"], PostInitBag: ["iValue=" + tTitle, "ClassName=cdeMyHeaderTitleModern"] });
            this.mDivHeaderTitle.innerHTML = "";
            this.mDivHeaderTitle.appendChild(this.MyHeaderTitle.GetElement());
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1) {
                var tPortal = document.getElementById("MyNMIPortal");
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 5)
                    tPortal.style.marginTop = "50px";
            }
            this.RegisterEvents();
            return true;
        };
        TheScreenManagerModern.prototype.SetApplicationBar = function () {
            var _this = this;
            if (this.mDivHeadButtonContent)
                return;
            this.mDivHeadButtonContent = document.getElementById("HeaderButtonContent");
            if (!this.mDivHeadButtonContent) //No Applicatin Bar if HeaderButtonContent is missing
                return;
            this.MyMainBackButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf359;</span>", "ClassName=MyHeaderButton", "PixelHeight=48"] });
            this.MyMainBackButton.SetProperty("OnClick", function (sender, e, tPs) {
                _this.NavigateBack(false);
            });
            this.MyMainBackButton.SetProperty("TabIndex", 5);
            this.MyMainBackButton.SetProperty("Disabled", true);
            this.MyMainBackButton.SetProperty("Visibility", false);
            var tIconGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(null, { PreInitBag: ["ControlTW=4", "ControlTH=1", "TileFactorY=2"] });
            tIconGroup.SetProperty("ClassName", "cdeSideTiles");
            this.mDivSideBar.appendChild(tIconGroup.GetElement());
            var tHomeButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf015;</span>", "ClassName=cdeVertCenter"] });
            tHomeButton.SetProperty("OnClick", function (sender, e, tPs) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                if (e.button === 2)
                    _this.ClearAndGoHome();
                else {
                    _this.GotoStationHome(false);
                }
                _this.ToggleSideBar(2);
            });
            this.MyThemeSwitch = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf185;</span>", "ClassName=cdeVertCenter"] });
            this.MyThemeSwitch.SetProperty("OnClick", function () { return cdeNMI.ToggleTheme(); });
            var tileButHeaderBtnTheme2 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf0c7;</span>", "ClassName=cdeVertCenter"] });
            tileButHeaderBtnTheme2.SetProperty("OnClick", function (sender, e, tPs) {
                if (e.button === 2) {
                    if (_this.CurrentScreen) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show(cde.MyBaseAssets.MyCommStatus.MyServiceUrl + "/nmi?CDEDL=" + _this.CurrentScreen.MyScreenID + ";" + _this.CurrentScreen.GetProperty("DashID"), true);
                    }
                    else {
                        if (_this.StartView && _this.StartView.FriendlyName === "MyHome") {
                            var tScene = _this.StartView;
                            tScene.Screens = new Array();
                            for (var i in _this.MyNMIScreens) {
                                if (_this.MyNMIScreens.hasOwnProperty(i)) {
                                    var tS = new cdeNMI.TheScreenTrans();
                                    tS.ID = _this.MyNMIScreens[i].MyScreenID;
                                    tS.DashID = _this.MyNMIScreens[i].GetProperty("DashID");
                                    tS.IsVisible = _this.MyNMIScreens[i].GetProperty("Visibility");
                                    tS.IsPinned = _this.MyNMIScreens[i].GetProperty("IsPinned");
                                    tS.FldOrder = _this.MyNMIScreens[i].GetProperty("FldOrder");
                                    if (tS.IsVisible || tS.IsPinned)
                                        tScene.Screens.push(tS);
                                }
                            }
                            var tStr = JSON.stringify(tScene);
                            if (cdeNMI.MyEngine) {
                                cdeNMI.MyEngine.PublishToNMI("NMI_SAVE_HOMESCENE", tStr); //TODO: add User Node ID
                                cdeNMI.ShowToastMessage("My Home Scene updated!");
                            }
                        }
                    }
                    return;
                }
                _this.ShowCreateViewPopup();
                _this.ToggleSideBar(2);
            });
            var tileButHeaderBtnTheme3 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf1fc;</span>", "ClassName=cdeVertCenter"] });
            tileButHeaderBtnTheme3.SetProperty("OnClick", function (sender, e, tPs) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                _this.ToggleSideBar(2);
                _this.ShowHideDrawOverlay();
            });
            var tileButHeaderBtnTheme4 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf021;</span>", "ClassName=cdeVertCenter"] });
            tileButHeaderBtnTheme4.SetProperty("OnClick", function (sender, e, tPs) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                _this.ToggleSideBar(2);
                var bForce = false;
                if (e.button === 2)
                    bForce = true;
                if (_this.CurrentScreen && _this.CurrentScreen !== _this.GetScreenByID(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen)) {
                    if (_this.CurrentScreen.MyRefreshButton) {
                        _this.CurrentScreen.MyRefreshButton.DoFireClick(null);
                        return;
                    }
                    else {
                        if (cdeNMI.MyEngine) {
                            var tFetch = 'NMI_GET_DATA:' + _this.CurrentScreen.MyScreenID + ':' + _this.CurrentScreen.GetProperty("ControlClass") + ':' + _this.CurrentScreen.GetProperty("DashID") + ':true:' + bForce;
                            cdeNMI.MyEngine.PublishToNMI(tFetch, '', _this.CurrentScreen.MyFieldInfo ? _this.CurrentScreen.MyFieldInfo.cdeN : null);
                        }
                    }
                    return;
                }
                if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen === "")
                    cdeNMI.MyNMIModels[cde.GuidToString(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen)] = null;
                if (cdeNMI.MyToast)
                    cdeNMI.MyToast.ShowToastMessage("Portal Refresh sent!", "Touch the home icon to see the changes", 10000);
                if (cdeNMI.MyEngine)
                    cdeNMI.MyEngine.RequestReloadModel(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                _this.RequestPortalScreen(cde.MyBaseAssets.MyServiceHostInfo.StartScreen ? true : bForce);
            });
            if (cde.MyBaseAssets.MyServiceHostInfo.RedPill) {
                var tSTL = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px; color:red;'>&#xf0c7;</span>", "ClassName=cdeVertCenter"] });
                tSTL.SetProperty("OnClick", function (sender, e, tPs) {
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Hide(false);
                    _this.ToggleSideBar(2);
                    cdeNMI.TL.SaveResources();
                });
            }
            this.MyLogoButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.LogoButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["ClassName=MyHeaderButton", "PixelHeight=48", "PixelWidth=48", "FontSize=48"] });
            this.MyLogoButton.SetProperty("OnClick", function (sender, e, tPs) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Hide(false);
                if (_this.MyDrawOverlay)
                    _this.ShowHideDrawOverlay();
                if (e.button === 2)
                    _this.ClearAndGoHome();
                else {
                    _this.ToggleSideBar(-1);
                }
            });
            if (this.mDivHeadButtonContent) {
                this.mDivHeadButtonContent.appendChild(this.MyLogoButton.GetElement());
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1 || cde.MyBaseAssets.MyServiceHostInfo.IsAppHosted) {
                    if (cde.MyBaseAssets.MyServiceHostInfo.IsAppHosted)
                        this.MyMainBackButton.SetProperty("Visibility", true);
                    this.mDivHeadButtonContent.insertBefore(this.MyMainBackButton.GetElement(), this.mDivHeadButtonContent.children[0]);
                    this.RegisterEvent("OnBrowserFullscreen", function (sender, para) {
                        _this.MyMainBackButton.SetProperty("Visibility", para);
                    });
                }
                if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 2)
                    this.SetHoloLens();
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.HideHeader) {
                this.MyHeader.style.display = "none";
                var tPortal = document.getElementById("MyNMIPortal");
                tPortal.style.marginTop = "0px";
            }
            //this.CreateLoginButtonOnly();
            this.mDivScreenList = document.createElement("div");
            this.mDivScreenList.className = "cdeScreenList";
            this.mDivScreenList.id = "cdeScreenList";
            this.mDivSideBar.appendChild(this.mDivScreenList);
            cdeNMI.ApplyTheme();
        };
        TheScreenManagerModern.prototype.SetStatusMsg = function (pStatusMsg, pState) {
            if (this.MyLogoButton) {
                if (pState === 1)
                    this.MyLogoButton.SetProperty("Reset", 1);
                else
                    this.MyLogoButton.SetProperty("LogoState", pState);
            }
            _super.prototype.SetStatusMsg.call(this, pStatusMsg, pState);
        };
        TheScreenManagerModern.prototype.CreateScreenList = function () {
            var _this = this;
            if (!this.mDivScreenList)
                return;
            this.mDivScreenList.innerHTML = "";
            var tAllScreens = cdeNMI.SortNamedArray(this.MyNMIScreens, "LastShow", false, true);
            for (var idx in tAllScreens) {
                var tScreen = this.GetScreenByID(idx);
                if (!tScreen || !tScreen.GetInitialized() || (tScreen.MyFieldInfo && cde.CBool(tScreen.MyFieldInfo["HideFromSideBar"]) === true) || cde.CBool(tScreen.GetProperty("HideFromSideBar")) === true)
                    continue;
                var tTitle = "";
                tTitle = tScreen.GetProperty("ScreenTitle");
                if (!tTitle)
                    tTitle = tScreen.GetProperty("Title");
                if (!tTitle)
                    tTitle = tScreen.GetProperty("Caption");
                if (tTitle && tTitle.endsWith("-HIDE"))
                    continue;
                var tIcon = "<span class='fa fa-2x' style='vertical-align:middle;'>&#xf03e;</span>";
                if (tScreen.GetProperty("SideBarTitle")) {
                    tTitle = tScreen.GetProperty("SideBarTitle");
                }
                if (!tTitle)
                    continue;
                var nTitle = cdeNMI.StripHTML(tTitle);
                if (nTitle !== tTitle) {
                    if (tTitle.indexOf("'fa") >= 0 || tTitle.indexOf("\"fa") >= 0) {
                        if (tTitle.indexOf("fa fa") > 0 && tTitle.length > 32) {
                            var tP = tTitle.indexOf("</i>");
                            if (tP >= 0) {
                                tIcon = tTitle.substr(0, tP + 4).replace("fa-5x", "fa-2x");
                                tTitle = cdeNMI.StripHTML(tTitle.substr(tP + 4));
                            }
                        }
                        else {
                            tTitle = nTitle;
                        }
                    }
                    else
                        tTitle = nTitle;
                }
                if (tScreen.GetProperty("SideBarIconFA")) {
                    tIcon = "<span class='fa fa-2x' style='vertical-align:middle;'>" + tScreen.GetProperty("SideBarIconFA") + "</span>";
                }
                if (nTitle.startsWith("Loading..."))
                    continue;
                if (nTitle === "")
                    tTitle = "No Title - due to html strip";
                var tIconGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(null, { PreInitBag: ["ControlTH=1", "TileFactorY=2"], PostInitBag: ["TileWidth=4"] });
                this.mDivScreenList.appendChild(tIconGroup.GetElement());
                var tFormImg = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tIconGroup, { PreInitBag: ["ControlTH=1", "TileFactorY=2"], PostInitBag: ["TileWidth=4", "Title=" + tIcon + "&nbsp;&nbsp;" + tTitle, "ClassName=cdeScreenListButton"] });
                tFormImg.SetProperty("Cookie", idx);
                tFormImg.SetProperty("OnClick", function (sender, e, tPs) {
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Hide(false);
                    _this.ToggleSideBar(2);
                    var tIDX = sender.GetProperty("Cookie");
                    _this.TransitToScreen(tIDX);
                });
            }
        };
        TheScreenManagerModern.prototype.ToggleSideBar = function (pSetState) {
            if (pSetState >= 0)
                this.mSideBarState = pSetState;
            switch (this.mSideBarState) {
                case 0:
                    this.mDivSideBar.style.width = (cdeNMI.GetSizeFromTile(1) / 2) + "px";
                    this.mSideBarState = 1;
                    this.mDivSideBar.classList.remove("cde-animate-left");
                    this.mDivScreenList.style.bottom = ((cdeNMI.GetSizeFromTile(1) / 2) * 6) + "px";
                    this.CreateScreenList();
                    break;
                case 1:
                    this.mDivSideBar.style.width = cdeNMI.GetSizeFromTile(4) + "px";
                    if (!this.mDivSideBar.classList.contains("cde-animate-left"))
                        this.mDivSideBar.classList.add("cde-animate-left");
                    this.mSideBarState = 2;
                    this.mDivScreenList.style.bottom = ((cdeNMI.GetSizeFromTile(1) / 2) * 2) + "px";
                    this.CreateScreenList();
                    break;
                case 2:
                    this.mDivSideBar.style.width = "0px";
                    this.mDivSideBar.classList.remove("cde-animate-left");
                    this.mSideBarState = 0;
                    break;
            }
        };
        TheScreenManagerModern.prototype.CreateLoginButtonOnly = function () {
            var _this = this;
            var tileButHeaderBtnLogin;
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 0) {
                tileButHeaderBtnLogin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=2", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa' style='font-size:24px'>&#xf2bd;</span>", "ClassName=MyHeaderButton", "PixelHeight=48"] });
                tileButHeaderBtnLogin.SetProperty("OnClick", function (pSender, evt) {
                    if (evt.button === 2 && cde.MyBaseAssets.MyServiceHostInfo.WasPortalRequested === true) {
                        _this.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                    }
                    else
                        cdeNMI.ResetBrowserToPortal();
                });
            }
            else {
                tileButHeaderBtnLogin = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.UserMenu).Create(null, { PreInitBag: ["TileFactorY=2"] });
            }
            tileButHeaderBtnLogin.SetProperty("TabIndex", 15);
            var divHeadButtonContentRight = document.getElementById("HeaderButtonContentRight");
            if (!divHeadButtonContentRight) {
                divHeadButtonContentRight = document.createElement("div");
                divHeadButtonContentRight.className = "cdeHeaderButtonContentRight";
                divHeadButtonContentRight.id = "HeaderButtonContentRight";
                var tMyHeader = document.getElementById("MyHeader");
                if (!tMyHeader) {
                    tMyHeader = document.createElement("div");
                    tMyHeader.className = "cdeLogoffTopRight";
                    tMyHeader.id = "MyLogoffButton";
                    this.GetElement().parentNode.insertBefore(tMyHeader, this.GetElement().nextSibling);
                }
                tMyHeader.appendChild(divHeadButtonContentRight);
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1) {
                var tClock = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorY=2"], PostInitBag: ["Title=" + cdeNMI.UpdateClock(2), "ClassName=cdeClock", "PixelHeight=48"] });
                tClock.SetProperty("Disabled", true);
                divHeadButtonContentRight.appendChild(tClock.GetElement());
                cdeNMI.StartClock(tClock, 2);
            }
            divHeadButtonContentRight.appendChild(tileButHeaderBtnLogin.GetElement());
        };
        TheScreenManagerModern.prototype.ResizeEventHandler = function () {
            _super.prototype.ResizeEventHandler.call(this);
            if (this.MyHeaderTitle) {
                if (this.mHeaderTileSize === 0)
                    this.mHeaderTileSize = this.MyHeaderTitle.GetElement().parentElement.offsetWidth + cdeNMI.GetSizeFromTile(5);
                if (window.outerWidth < this.mHeaderTileSize)
                    this.MyHeaderTitle.SetProperty("Visibility", false);
                else
                    this.MyHeaderTitle.SetProperty("Visibility", true);
            }
        };
        TheScreenManagerModern.prototype.RenderHeader = function (bIsVisible) {
            return;
        };
        TheScreenManagerModern.prototype.ShowHeader = function (bShow) {
            if (!cde.CBool(bShow)) {
                if (this.MyHeader)
                    this.MyHeader.style.display = 'none';
            }
            else {
                if (this.MyHeader && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 2)
                    this.MyHeader.style.display = '';
            }
        };
        TheScreenManagerModern.prototype.SwitchTheme = function (bToDark) {
            if (this.MyThemeSwitch) {
                if (bToDark)
                    this.MyThemeSwitch.SetProperty("Title", "<span class='fa' style='font-size:23px'>&#xf185;</span>");
                else
                    this.MyThemeSwitch.SetProperty("Title", "<span class='fa' style='font-size:23px'>&#xf186;</span>");
            }
        };
        TheScreenManagerModern.prototype.SetHoloLens = function () {
            _super.prototype.SetHoloLens.call(this);
            (document.getElementById('MyHeader')).style.display = "none";
            return "";
        };
        TheScreenManagerModern.prototype.TransitToScreen = function (pTargetScreen, MustExist, DontTryLoad, pCookie, pOwnerTable) {
            if (MustExist === void 0) { MustExist = false; }
            if (DontTryLoad === void 0) { DontTryLoad = false; }
            this.ToggleSideBar(2);
            _super.prototype.TransitToScreen.call(this, pTargetScreen, MustExist, DontTryLoad, pCookie, pOwnerTable);
        };
        return TheScreenManagerModern;
    }(cdeNMI.TheScreenManager));
    cdeNMI.TheScreenManagerModern = TheScreenManagerModern;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (suffix) {
        return this.indexOf(suffix) !== -1;
    };
}
if (!String.prototype.format) {
    String.prototype.format = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var formatted = this;
        for (var i = 0; i < params.length; i++) {
            var regexp = new RegExp('\\{' + i + '\\}', 'gi');
            formatted = formatted.replace(regexp, params[i]);
        }
        return formatted;
    };
}
var cdeNMI;
(function (cdeNMI) {
    function StopPointerEvents(evt) {
        if (!evt)
            evt = window.event;
        if (!evt)
            return;
        evt.cancelBubble = true;
        if (evt.stopPropagation)
            evt.stopPropagation();
        if (evt.preventDefault)
            evt.preventDefault();
    }
    cdeNMI.StopPointerEvents = StopPointerEvents;
    function SetZIndex(pEle, pIDX) {
        if (pEle) {
            pEle.style.position = "relative";
            pEle.style.zIndex = pIDX.toString();
        }
    }
    cdeNMI.SetZIndex = SetZIndex;
    function cdeEscapeHtml(source) {
        return String(source).replace(/[&<>"']/g, function (s) { return cdeNMI.TheEscapeMap[s]; });
    }
    cdeNMI.cdeEscapeHtml = cdeEscapeHtml;
    function GetControlWidth(pControl) {
        var tTileX = pControl.GetSetting("TileWidth");
        if (!tTileX)
            tTileX = 4;
        if (cde.CBool(pControl.GetSetting("NoTE")) === true)
            tTileX -= 2;
        if (tTileX < 0)
            tTileX = 1;
        return tTileX;
    }
    cdeNMI.GetControlWidth = GetControlWidth;
    /// MultiTouch Check
    function IsTouchDevice() {
        var el = document.createElement('div');
        el.setAttribute('ongesturestart', 'return;');
        if (typeof el.ontouchmove === "object") {
            return true;
        }
        else {
            return false;
        }
    }
    cdeNMI.IsTouchDevice = IsTouchDevice;
    function CleanState() {
        if (cde.MyBaseAssets.MyServiceHostInfo.PortalPage !== "")
            cdeNMI.ResetBrowserToPortal();
        else
            window.location.reload();
    }
    cdeNMI.CleanState = CleanState;
    function ResetKeyCorder() {
        cdeNMI.Key13Event = null;
        cdeNMI.Key27Event = null;
        cdeNMI.IsInEdit = false;
        cdeNMI.DisableKey36Event = false;
    }
    cdeNMI.ResetKeyCorder = ResetKeyCorder;
    //////// Animations //////////////////////////////
    function cdeBlendInTiles(subClass) {
        return; //TODO: Tiles Coming IN animation
    }
    cdeNMI.cdeBlendInTiles = cdeBlendInTiles;
    function RequestSync() {
        if (cde.MyContentEngine)
            cde.MyContentEngine.PublishToService('CDE_INIT_SYNC', '');
        if (cdeNMI.MyEngine)
            cdeNMI.MyEngine.FireEvent(true, "NMI_TOAST", 'Sync request sent to Relay');
    }
    cdeNMI.RequestSync = RequestSync;
    function ShowToastMessage(pTopic, pText, pTime) {
        if (cdeNMI.MyToast)
            cdeNMI.MyToast.ShowToastMessage(pTopic, pText, pTime);
    }
    cdeNMI.ShowToastMessage = ShowToastMessage;
    function cdeDoRequestUpdate() {
        if (cde.MyContentEngine)
            cde.MyContentEngine.PublishToFirstNode('CDE_REQ_UPDATE', '');
        if (cdeNMI.MyPopUp)
            cdeNMI.MyPopUp.Show('Relay is restarting in several seconds. Click ok to logout', true, null, 1, cdeNMI.CleanState);
    }
    function RequestUpdate() {
        if (cdeNMI.MyPopUp)
            cdeNMI.MyPopUp.Show('Are you sure you want to install this update? Your relay will restart and you need to login again.', false, null, 1, cdeDoRequestUpdate);
    }
    cdeNMI.RequestUpdate = RequestUpdate;
    function UpdateClock(pFactor) {
        if (pFactor === void 0) { pFactor = 1; }
        if (pFactor < 1)
            pFactor = 1;
        return moment().format("[<span style='font-size:" + (32 / pFactor) + "px; font-weight: bold;'>]HH:mm[</span></BR><span style='font-size:" + (24 / pFactor) + "px'>]YYYY-MM-DD");
    }
    cdeNMI.UpdateClock = UpdateClock;
    ;
    function FormatDate(pDate, pFormat) {
        return moment(pDate).format(pFormat);
    }
    cdeNMI.FormatDate = FormatDate;
    function FormatDateNow(pFormat) {
        return moment(Date.now()).format(pFormat);
    }
    cdeNMI.FormatDateNow = FormatDateNow;
    function StartClock(pControl, pFactor) {
        if (pFactor === void 0) { pFactor = 1; }
        if (!pControl)
            return;
        setInterval(function () {
            pControl.SetProperty("iValue", UpdateClock(pFactor));
        }, 60000);
    }
    cdeNMI.StartClock = StartClock;
    function GetLocation(href) {
        var l = document.createElement("a");
        l.href = href;
        return l;
    }
    cdeNMI.GetLocation = GetLocation;
    ;
    function RequestScopeID() {
        //var tEdit: ctrlEditBox = ctrlEditBox.Create(null, null, new TheTRF("SecID", 1, new TheFieldInfo(cdeControlType.SingleEnded, -1, "SecID:", 2, "SCOPEREQ")), "", false, "cdeInput cdeInputCenter");
        var tEdit = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Password).Create(null, { TRF: new cdeNMI.TheTRF("SecID", 1, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleEnded, -1, "SecID:", 2, "SCOPEREQ")), PostInitBag: ["InnerClassName=cdeInput cdeInputCenter"] });
        if (cdeNMI.MyPopUp) {
            var tPopup = cdeNMI.MyPopUp.Show('Are you sure you want to request a new Security ID?</br>All agents and nodes connected to this relay will have to update their corresponding IDs as well. If this is a secondary Relay, enter the ID of your primary relay here, otherwise leave this field blank', false, tEdit, 1, function (obj) {
                var pC = obj.GetProperty("tEdit");
                var tID = "";
                if (pC)
                    tID = pC.GetProperty("Value");
                if (cde.MyContentEngine)
                    cde.MyContentEngine.PublishToFirstNode('CDE_REQ_SCOPEID', cde.MyContentEngine.RSAEncrypt(tID));
            });
            tPopup.SetProperty("tEdit", tEdit);
        }
    }
    cdeNMI.RequestScopeID = RequestScopeID;
    function TogglePortalFull(pShowFull) {
        var t = document.getElementById('MyNMIPortal');
        if (t) {
            if (pShowFull)
                t.style.width = "100%";
            else
                t.style.width = null;
        }
    }
    cdeNMI.TogglePortalFull = TogglePortalFull;
    ///Used by Convenience Apps
    function NUITagAction(pTag, pCookie) {
        var tControl = cdeNMI.MyNMINUITags[pTag];
        if (pTag === "go home") {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.GotoStationHome(false);
        }
        else if (pTag === "go back") {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.NavigateBack(false);
        }
        else if (tControl) {
            tControl.OnNUITag(pTag, pCookie);
        }
    }
    cdeNMI.NUITagAction = NUITagAction;
    ///Used by Convenience Apps
    function GetAllNUITags() {
        var tRes = "go home;go back";
        for (var i in cdeNMI.MyNMINUITags) {
            if (Object.prototype.hasOwnProperty.call(cdeNMI.MyNMINUITags, i)) {
                if (tRes.length > 0)
                    tRes += ";";
                tRes += i;
            }
        }
        return tRes;
    }
    cdeNMI.GetAllNUITags = GetAllNUITags;
    function GetCurrentScreen() {
        if (cdeNMI.MyScreenManager) {
            return cdeNMI.MyScreenManager.GetCurrentScreen();
        }
        return "";
    }
    cdeNMI.GetCurrentScreen = GetCurrentScreen;
    ///Used by Convenience Apps
    function ApplyTheme() {
        var schemes;
        var i;
        var t;
        if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme) {
            schemes = document.getElementsByTagName("link");
            //schemes = $('[cde=colorScheme]');
            for (i = 0; i < schemes.length; i++) {
                if (!schemes[i].hasAttribute("lite"))
                    continue;
                t = schemes[i].attributes["lite"];
                if (t) {
                    var tN = cde.MyBaseAssets.MyCommStatus.InitialNPA;
                    schemes[i].setAttribute("href", t.nodeValue + (!tN ? "" : "?SID=" + tN.substr(4, tN.length - (4 + (tN.indexOf(".ashx") > 0 ? 5 : 0)))));
                }
            }
            if (cdeNMI.MyScreenManager) {
                cdeNMI.MyScreenManager.SwitchTheme(false);
            }
        }
        else {
            //schemes = $('[cde=colorScheme]');
            schemes = document.getElementsByTagName("link");
            for (i = 0; i < schemes.length; i++) {
                if (!schemes[i].hasAttribute("dark"))
                    continue;
                t = schemes[i].attributes["dark"];
                if (t) {
                    var tN = cde.MyBaseAssets.MyCommStatus.InitialNPA;
                    schemes[i].setAttribute("href", t.nodeValue + (!tN ? "" : "?SID=" + tN.substr(4, tN.length - (4 + (tN.indexOf(".ashx") > 0 ? 5 : 0)))));
                }
            }
            if (cdeNMI.MyScreenManager) {
                cdeNMI.MyScreenManager.SwitchTheme(true);
            }
        }
        cde.MyBaseAssets.FireEvent(true, "ThemeSwitched", cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme);
    }
    cdeNMI.ApplyTheme = ApplyTheme;
    function ToggleTheme() {
        cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme = !cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme;
        ApplyTheme();
    }
    cdeNMI.ToggleTheme = ToggleTheme;
    function AddCSSB4Header(pCSSFile, pCSSFileLite) {
        var tFileCSS = cde.FixupPath(pCSSFile).toLowerCase();
        if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme && pCSSFileLite)
            tFileCSS = cde.FixupPath(pCSSFileLite).toLowerCase();
        var links = document.getElementsByTagName("link");
        if (links.length > 0) {
            for (var i = 0; i < links.length; i++) {
                if (links[i].getAttribute("href").toLowerCase() === tFileCSS)
                    return;
            }
        }
        var fileref = document.createElement("link");
        fileref.setAttribute("rel", "stylesheet");
        fileref.setAttribute("type", "text/css");
        fileref.setAttribute("cde", "colorScheme");
        fileref.setAttribute("media", "screen");
        fileref.setAttribute("dark", cde.FixupPath(pCSSFile));
        if (pCSSFileLite)
            fileref.setAttribute("lite", cde.FixupPath(pCSSFileLite));
        fileref.setAttribute("cde", "colorScheme");
        var tN = cde.MyBaseAssets.MyCommStatus.InitialNPA;
        fileref.setAttribute("href", tFileCSS + (!tN ? "" : "?SID=" + tN.substr(4, tN.length - (4 + (tN.indexOf(".ashx") > 0 ? 5 : 0)))));
        var tHead = document.getElementsByTagName("head")[0];
        tHead.insertBefore(fileref, tHead.childNodes[0]);
    }
    cdeNMI.AddCSSB4Header = AddCSSB4Header;
    function InsertCSS(pCSSName) {
        var headID = document.getElementsByTagName("head")[0];
        var cssNode = document.createElement('link');
        cssNode.type = 'text/css';
        cssNode.rel = 'stylesheet';
        cssNode.href = pCSSName + '.css';
        cssNode.media = 'screen';
        headID.appendChild(cssNode);
    }
    cdeNMI.InsertCSS = InsertCSS;
    function ThingLookup(tDefaults) {
        var retStr = cdeNMI.TheFlashCache.GetCache(tDefaults);
        if (retStr)
            return retStr;
        retStr = "";
        var MyTableName = cde.GuidToString('B510837F-3B75-4CF2-A900-D36C19113A13');
        var tParas = tDefaults.split(':');
        if (tParas.length > 2) {
            var tMyScreenInfo = cdeNMI.MyNMIModels[cde.GuidToString('FAFA22FF-96AC-42CF-B1DB-7C073053FC39')]; //Possible has to come from Paras
            if (!tMyScreenInfo || !tMyScreenInfo.MyStorageMirror[MyTableName])
                return "";
            for (var row = 0; row < tMyScreenInfo.MyStorageMirror[MyTableName].length; row++) {
                var tRow = tMyScreenInfo.MyStorageMirror[MyTableName][row];
                var tSearch = cdeNMI.GetFldContentByName(tRow, "MyPropertyBag." + tParas[0] + ".Value", false);
                if (!tSearch || tSearch.length === 0)
                    continue;
                if (cde.GuidToString(tSearch) !== cde.GuidToString(tParas[1]))
                    continue;
                var tName = cdeNMI.GetFldContentByName(tRow, "MyPropertyBag." + tParas[2] + ".Value", false);
                if (tName && tName !== "")
                    retStr = tName;
                cdeNMI.TheFlashCache.AddCache(tDefaults, retStr, 3000);
            }
        }
        return retStr;
    }
    cdeNMI.ThingLookup = ThingLookup;
    function cdeParseHTML(pTargetControl, pTRF, pHTML) {
        if (pTargetControl === null)
            return;
        if (pTargetControl.HasFacePlate === true)
            return;
        pTargetControl.HasFacePlate = true;
        if (cdeNMI.MyEngine && pTRF && pTRF.ModelID && pTRF.TableName) {
            var tWait = new cdeNMI.TheFaceWait();
            tWait.TRF = pTRF;
            tWait.TargetControl = pTargetControl;
            tWait.HTML = pHTML;
            cdeNMI.MyEngine.LoadTableLazy(pTRF.ModelID, pTRF.TableName, cdeNMI.DoParseHTML, tWait);
        }
        else {
            pTargetControl.GetContainerElement().innerHTML = pHTML;
        }
    }
    cdeNMI.cdeParseHTML = cdeParseHTML;
    function GetStringSegment(pInStr, pStart, pEnd) {
        if (!pInStr || !pStart || !pEnd)
            return null;
        var pos = pInStr.indexOf(pStart);
        if (pos < 0)
            return null;
        var posEnd = pInStr.indexOf(pEnd, pos + pStart.length);
        if (posEnd < 0)
            return null;
        var Outer = pInStr.substr(pos, (posEnd - pos) + pEnd.length);
        if (Outer.length < pStart.length + pEnd.length + 1)
            return null;
        return Outer.substr(pStart.length, Outer.length - (pStart.length + pEnd.length));
    }
    cdeNMI.GetStringSegment = GetStringSegment;
    function ReturnStringSegment(pHTML, pStart, pEnd) {
        if (!pHTML || !pStart || !pEnd)
            return null;
        var tSeg = new cde.TheSegment();
        var pos = pHTML.indexOf(pStart);
        if (pos < 0)
            return null;
        var posEnd = pHTML.indexOf(pEnd, pos + pStart.length);
        if (posEnd < 0)
            return null;
        tSeg.Outer = pHTML.substr(pos, (posEnd - pos) + pEnd.length);
        if (tSeg.Outer.length < pStart.length + pEnd.length + 1)
            return null;
        tSeg.Inner = tSeg.Outer.substr(pStart.length, tSeg.Outer.length - (pStart.length + pEnd.length));
        return tSeg;
    }
    cdeNMI.ReturnStringSegment = ReturnStringSegment;
    function CreateTCB(pTRF, pName, pType) {
        if (pType === void 0) { pType = cdeNMI.cdeControlType.SingleEnded; }
        var tTCB = new cdeNMI.TheControlBlock();
        tTCB.TargetID = "CNMIC" + (cdeNMI.MyNMISettings.IDCounter++);
        tTCB.MyControl = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel); // new ctrlSmartLabel();  
        var tFldContent = "";
        var tFldInfo = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SmartLabel, 0, null);
        tFldInfo.DataItem = "MyPropertyBag." + pName + ".Value";
        if (pTRF && pTRF.FldInfo) {
            tFldInfo.cdeO = pTRF.FldInfo.cdeO;
            tFldInfo.FormID = cde.GuidToString(pTRF.TableName);
            tFldInfo.cdeN = pTRF.FldInfo.cdeN;
            tFldInfo.Type = pType;
            tFldInfo["Element"] = "span";
            var tMyScreenInfo = cdeNMI.MyNMIModels[pTRF.ModelID];
            if (tMyScreenInfo && tMyScreenInfo.MyStorageMirror[pTRF.TableName]) {
                tFldContent = cdeNMI.GetFldContent(tMyScreenInfo.MyStorageMirror[pTRF.TableName][pTRF.RowNo], tFldInfo, false, false);
            }
        }
        var tTRF = new cdeNMI.TheTRF(pTRF ? pTRF.TableName : "", pTRF ? pTRF.RowNo : 0, tFldInfo);
        tTRF.ModelID = pTRF ? pTRF.ModelID : null;
        tTCB.MyControl.InitControl(null, tTRF);
        tTCB.MyControl.SetProperty("iValue", tFldContent);
        if (!cdeNMI.MyTCBs[tTRF.TableName + "_" + pTRF.RowNo])
            cdeNMI.MyTCBs[tTRF.TableName + "_" + pTRF.RowNo] = [];
        cdeNMI.MyTCBs[tTRF.TableName + "_" + pTRF.RowNo].push(tTCB);
        cdeNMI.ThePB.SetRawProperty(tTCB.MyControl, "OnThingEvent", tTRF.TableName + ";" + pName);
        cdeNMI.MyEngine.RegisterEvent("RecordUpdated_" + tTRF.TableName + "_" + pTRF.RowNo, function (pSI, pModelGUID, tTabName, tRowID, pDirtyMask) {
            if (pModelGUID && pModelGUID !== "") {
                var tMod = cdeNMI.MyNMIModels[pModelGUID];
                for (var tIdx in cdeNMI.MyTCBs[tTRF.TableName + "_" + pTRF.RowNo]) {
                    var tTCB_1 = cdeNMI.MyTCBs[tTRF.TableName + "_" + pTRF.RowNo][tIdx];
                    if (tTCB_1) {
                        if (!tMod.MyStorageMirror[tTabName][tRowID].hasOwnProperty('SecToken')) {
                            var tCont = cdeNMI.GetFldContent(tMod.MyStorageMirror[tTabName][tRowID], tTCB_1.MyControl.MyFieldInfo, false, false);
                            if (tTCB_1.MyControl.GetProperty("Value") !== tCont)
                                tTCB_1.MyControl.SetProperty("iValue", tCont);
                        }
                    }
                }
            }
        });
        return tTCB;
    }
    cdeNMI.CreateTCB = CreateTCB;
    function DoParseHTML(pTable, pFacePlate) {
        if (!pTable)
            return;
        var tSeg;
        var tTCB;
        while (true) {
            tSeg = cdeNMI.ReturnStringSegment(pFacePlate.HTML, "<%P:", "%>");
            if (tSeg === null)
                break;
            tTCB = new cdeNMI.TheControlBlock();
            tTCB.TargetID = "CNMIC" + (cdeNMI.MyNMISettings.IDCounter++);
            pFacePlate.TargetControl.SetProperty(tSeg.Inner + "_TCB", tTCB);
            pFacePlate.HTML = pFacePlate.HTML.replace(tSeg.Outer, "<span ID=" + tTCB.TargetID + "></span>");
        }
        while (true) {
            tSeg = cdeNMI.ReturnStringSegment(pFacePlate.HTML, "<%C21:", "%>");
            if (tSeg === null)
                break;
            tTCB = CreateTCB(pFacePlate.TRF, tSeg.Inner, cdeNMI.cdeControlType.DateTime);
            pFacePlate.TargetControl.MySubControls.push(tTCB);
            pFacePlate.HTML = pFacePlate.HTML.replace(tSeg.Outer, "<span ID=" + tTCB.TargetID + "></span>");
        }
        while (true) {
            tSeg = cdeNMI.ReturnStringSegment(pFacePlate.HTML, "<%C20:", "%>");
            if (tSeg === null)
                break;
            tTCB = CreateTCB(pFacePlate.TRF, tSeg.Inner);
            pFacePlate.TargetControl.MySubControls.push(tTCB);
            pFacePlate.HTML = pFacePlate.HTML.replace(tSeg.Outer, "<span ID=" + tTCB.TargetID + "></span>");
        }
        while (true) {
            tSeg = cdeNMI.ReturnStringSegment(pFacePlate.HTML, "<%I:", "%>");
            if (tSeg === null)
                break;
            tTCB = CreateTCB(pFacePlate.TRF, tSeg.Inner);
            pFacePlate.TargetControl.MySubControls.push(tTCB);
            pFacePlate.HTML = pFacePlate.HTML.replace(tSeg.Outer, tTCB.MyControl.GetProperty("Value") + '" ID="' + tTCB.TargetID + '_TGT');
            tTCB.MyControl.SetProperty("Visibility", false);
            tTCB.MyControl.SetProperty("MyTCB", tTCB);
            tTCB.OnIValueChanged = function (sender, pEvt, pVal) {
                var ttcb = sender.GetProperty("MyTCB");
                if (pVal && document.getElementById(ttcb.TargetID + "_TGT"))
                    document.getElementById(ttcb.TargetID + "_TGT").src = cde.FixupPath(pVal);
            };
            //    "if (params[2] && document.getElementById('" + tTCB.TargetID + "_TGT')) document.getElementById('" + tTCB.TargetID + "_TGT').src=cde.FixupPath(params[2])";  //TODO: replace with real function
            pFacePlate.HTML += "<span ID=" + tTCB.TargetID + "></span>";
        }
        while (true) {
            tSeg = cdeNMI.ReturnStringSegment(pFacePlate.HTML, "<%V:", "%>");
            if (tSeg === null)
                break;
            tTCB = CreateTCB(pFacePlate.TRF, tSeg.Inner);
            pFacePlate.TargetControl.MySubControls.push(tTCB);
            pFacePlate.HTML = pFacePlate.HTML.replace(tSeg.Outer, tTCB.MyControl.GetProperty("Value") + '" ID="' + tTCB.TargetID + '_TGT');
            tTCB.MyControl.SetProperty("Visibility", false);
            tTCB.MyControl.SetProperty("MyTCB", tTCB);
            tTCB.OnIValueChanged = function (sender, pEvt, pVal) {
                var ttcb = sender.GetProperty("MyTCB");
                if (pVal && document.getElementById(ttcb.TargetID + "_TGT"))
                    document.getElementById(ttcb.TargetID + "_TGT").value = pVal;
            };
            //tTCB.OnIValueChanged = "if (params[2] && document.getElementById('" + tTCB.TargetID + "_TGT')) document.getElementById('" + tTCB.TargetID + "_TGT').value=params[2]";
            pFacePlate.HTML += "<span ID=" + tTCB.TargetID + "></span>";
        }
        while (true) {
            tSeg = cdeNMI.ReturnStringSegment(pFacePlate.HTML, 'cdeTAG="<%S:', "%>");
            if (tSeg === null)
                break;
            tTCB = CreateTCB(pFacePlate.TRF, tSeg.Inner);
            pFacePlate.TargetControl.MySubControls.push(tTCB);
            pFacePlate.HTML = pFacePlate.HTML.replace(tSeg.Outer, "style='" + tTCB.MyControl.GetProperty("Value") + ";' ID='" + tTCB.TargetID + "_TGT'");
            tTCB.MyControl.SetProperty("Visibility", false);
            tTCB.MyControl.SetProperty("MyTCB", tTCB);
            tTCB.OnIValueChanged = function (sender, pEvt, pVal) {
                var ttcb = sender.GetProperty("MyTCB");
                if (pVal && document.getElementById(ttcb.TargetID + "_TGT"))
                    document.getElementById(ttcb.TargetID + "_TGT").style.cssText = pVal;
            };
            //tTCB.OnIValueChanged = "if (params[2] && document.getElementById('" + tTCB.TargetID + "_TGT')) document.getElementById('" + tTCB.TargetID + "_TGT').style.cssText=params[2]";
            pFacePlate.HTML += "<span ID=" + tTCB.TargetID + "></span>";
        }
        pFacePlate.HTML = cdeNMI.GenerateFinalString(pFacePlate.HTML, false, pFacePlate.TRF);
        pFacePlate.TargetControl.GetContainerElement().innerHTML = pFacePlate.HTML;
        for (var i = 0; i < pFacePlate.TargetControl.MySubControls.length; i++) {
            var tELE = document.getElementById(pFacePlate.TargetControl.MySubControls[i].TargetID);
            if (tELE) {
                var tP = tELE.parentElement;
                tP.replaceChild(pFacePlate.TargetControl.MySubControls[i].MyControl.GetElement(), tELE);
                if (pFacePlate.TargetControl.MySubControls[i].OnIValueChanged)
                    pFacePlate.TargetControl.MySubControls[i].MyControl.SetProperty("OniValueChanged", pFacePlate.TargetControl.MySubControls[i].OnIValueChanged);
            }
        }
    }
    cdeNMI.DoParseHTML = DoParseHTML;
    function GenerateFinalString(pInStr, pData, pTRF, pKeepMacro) {
        if (!pInStr)
            return null;
        if (typeof pInStr !== "string")
            pInStr = pInStr.toString();
        var outStr = pInStr;
        if (outStr.indexOf('<%UN%>') >= 0) {
            if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.MyBaseAssets.MyCommStatus.UserPref.CurrentUserName)
                outStr = outStr.replace('<%UN%>', cde.MyBaseAssets.MyCommStatus.UserPref.CurrentUserName);
            else
                outStr = outStr.replace('<%UN%>', '');
        }
        if (outStr.indexOf('<%NOW%>') >= 0) {
            outStr = outStr.replace('<%NOW%>', moment(Date.now()).format("YYYY-MM-DD HH:mm:ss"));
        }
        if (pTRF && !pData) {
            var tScreenInfo = cdeNMI.MyNMIModels[pTRF.ModelID];
            if (tScreenInfo && pTRF && tScreenInfo.MyStorageMirror && tScreenInfo.MyStorageMirror[pTRF.TableName])
                pData = tScreenInfo.MyStorageMirror[pTRF.TableName][pTRF.RowNo];
        }
        //let HasFound = false;
        if (pData && pData !== true) {
            if (outStr.indexOf('<%NN%>') >= 0) {
                try {
                    outStr = outStr.replace('<%NN%>', pData.cdeN && cdeNMI.MyEngine ? cdeNMI.MyEngine.GetKnownNodeName(pData.cdeN) : '');
                }
                catch (_a) {
                    outStr = outStr.replace('<%NN%>', '');
                }
            }
            for (var index in pData) {
                if (Object.prototype.hasOwnProperty.call(pData, index)) {
                    if (index === "MyPropertyBag" && outStr.indexOf('%') >= 0) {
                        var myPropertyBag = pData["MyPropertyBag"];
                        for (var tBagItem in myPropertyBag) {
                            if (Object.prototype.hasOwnProperty.call(myPropertyBag, tBagItem)) {
                                if (outStr.indexOf('%MyPropertyBag.' + tBagItem + '.Value%') >= 0) {
                                    outStr = outStr.replace('%MyPropertyBag.' + tBagItem + '.Value%', myPropertyBag[tBagItem]["Value"]);
                                }
                                else if (outStr.indexOf('<%' + tBagItem + '%>') >= 0) {
                                    outStr = outStr.replace('<%' + tBagItem + '%>', myPropertyBag[tBagItem]["Value"]);
                                }
                                else if (outStr.indexOf('%' + tBagItem + '%') >= 0) {
                                    outStr = outStr
                                        .replace('%' + tBagItem + '%', myPropertyBag[tBagItem]["Value"]);
                                }
                            }
                        }
                    }
                    var repl = void 0;
                    var tInStr = void 0;
                    if (outStr.indexOf('<%' + index + '%>') >= 0) {
                        repl = "";
                        if (pData[index]) {
                            if (typeof pData[index] !== "string")
                                repl = pData[index].toString();
                            else
                                repl = pData[index];
                        }
                        tInStr = "";
                        do {
                            tInStr = outStr;
                            outStr = outStr.replace('<%' + index + '%>', GenerateFinalString(repl, pData, pTRF));
                        } while (tInStr !== outStr);
                        //HasFound = true;
                    }
                    else if (pData[index] &&
                        pData[index].MyFieldInfo &&
                        pData[index].MyFieldInfo.FldOrder &&
                        outStr.indexOf('<%' + pData[index].MyFieldInfo.FldOrder + ".") >= 0) {
                        var tFldO = pData[index].MyFieldInfo.FldOrder.toString();
                        var tPos = outStr.indexOf('<%' + tFldO + ".") + tFldO.length + 3;
                        var tPosEnd = outStr.indexOf("%>", tPos);
                        var tPropName = outStr.substring(tPos, tPosEnd);
                        var tVal = pData[index].GetProperty(tPropName);
                        if (tVal) {
                            outStr = tVal.toString();
                            //HasFound = true;
                        }
                    }
                    else if (outStr.indexOf('%' + index + '%') >= 0) {
                        repl = "";
                        if (pData[index]) {
                            if (typeof pData[index] !== "string")
                                repl = pData[index].toString();
                            else
                                repl = pData[index];
                        }
                        tInStr = "";
                        do {
                            tInStr = outStr;
                            outStr = outStr.replace('%' + index + '%', GenerateFinalString(repl, pData, pTRF));
                        } while (tInStr !== outStr);
                        // HasFound = true;
                    }
                }
            }
        }
        if (pTRF && pTRF.FldInfo) {
            var tT = 1;
            var gfsoutStr = void 0;
            while (tT === 1) {
                gfsoutStr = outStr;
                if (gfsoutStr.indexOf("%") < 0)
                    break; // 3 Recursions allowed then out...
                var tFound = cdeNMI.ReturnStringSegment(gfsoutStr, "%", "%");
                if (tFound) {
                    var tFl = pTRF.FldInfo[tFound.Inner];
                    if (tFl)
                        gfsoutStr = gfsoutStr.replace(tFound.Outer, tFl);
                }
                if (gfsoutStr !== outStr)
                    outStr = gfsoutStr;
                else
                    tT = 0;
            }
        }
        if (!pKeepMacro) {
            while (outStr.indexOf("<%") >= 0) {
                if (outStr.indexOf("%>") > 0) {
                    var tPre = outStr.substr(0, outStr.indexOf("<%"));
                    outStr = tPre + outStr.substr(outStr.indexOf("%>") + 2);
                }
                else
                    break;
            }
        }
        return outStr;
    }
    cdeNMI.GenerateFinalString = GenerateFinalString;
    function IconFAShim(pInstr) {
        if (pInstr.indexOf("&#x") < 0)
            return pInstr;
        var tOut = pInstr.replace("&#xf20e;", "&#xf61f;");
        tOut = tOut.replace("&#xf05D;", "&#xf058;");
        tOut = tOut.replace("&#xf0f6;", "&#xf46d;");
        return tOut;
    }
    cdeNMI.IconFAShim = IconFAShim;
    function IconShim(pInstr) {
        if (pInstr.indexOf("<$Loading$>") >= 0)
            pInstr = pInstr.replace("<$Loading$>", "Loading... <i class='fa fa-spinner fa-pulse'></i>");
        if (pInstr.indexOf("<$IsIso$>") >= 0)
            pInstr = pInstr.replace("<$IsIso$>", "<i class='fa fa-3x' style='color:green'>&#xf045;</i>");
        if (pInstr.indexOf("<$IsoNot$>") >= 0)
            pInstr = pInstr.replace("<$IsoNot$>", "<i class='fa fa-3x'>&#xf096;</i>");
        if (pInstr.indexOf("<$IsEnabled$>") >= 0)
            pInstr = pInstr.replace("<$IsEnabled$>", "<i class='fa fa-3x' style='color:green'>&#xf05D;</i>");
        if (pInstr.indexOf("<$IsDisabled$>") >= 0)
            pInstr = pInstr.replace("<$IsDisabled$>", "<i class='fa fa-3x' style='color:red'>&#xf05E;</i>");
        if (pInstr.indexOf("<$IsUnloaded>") >= 0)
            pInstr = pInstr.replace("<$IsUnloaded>", "<i class='fa fa-4x' style='color:green'>&#xf04B;</i>");
        if (pInstr.indexOf("<$IsLoaded$>") >= 0)
            pInstr = pInstr.replace("<$IsLoaded$>", "<i class='fa fa-4x' style='color:red'>&#xf04D;</i>");
        if (pInstr.indexOf("<$NoBreak$>") >= 0)
            pInstr = pInstr.replace("<$NoBreak$>", "&nbsp;");
        return pInstr;
    }
    cdeNMI.IconShim = IconShim;
    function AddFieldComment(pTarget, pFieldInfo) {
        if (!pFieldInfo)
            return null;
        var tHelpText = pFieldInfo["HelpText"];
        var dHelp = null;
        if (tHelpText && tHelpText !== "") {
            dHelp = document.createElement("div");
            dHelp.className = "cdeFormEntryComment";
            dHelp.innerHTML = tHelpText;
            pTarget.appendChild(dHelp);
        }
        return dHelp;
    }
    cdeNMI.AddFieldComment = AddFieldComment;
    function UpdFldContent(pRowData, pFormField, pNewValue, pOldValues) {
        if (!pRowData || !pFormField || !pFormField.DataItem)
            return false;
        var tDataItem = pFormField.DataItem.split('.');
        var tFldName = tDataItem[1];
        if (tDataItem.length > 3) {
            for (var i = 2; i < tDataItem.length - 1; i++) {
                tFldName += "." + tDataItem[i];
            }
        }
        var tFldContent = pRowData[tDataItem[0]];
        var tHasNewValue = false;
        if (tDataItem.length > 1) {
            for (var u = 1; u < tDataItem.length - 1; u++) {
                if (tFldContent === undefined) {
                    break;
                }
                else {
                    tFldContent = tFldContent[tDataItem[u]];
                }
            }
            if (!tFldContent) {
                if (tDataItem[0] === "MyPropertyBag" && !cde.IsNotSet(pNewValue)) {
                    if (!pRowData[tDataItem[0]])
                        pRowData[tDataItem[0]] = {};
                    pRowData[tDataItem[0]][tFldName] = new cde.cdeP();
                    pRowData[tDataItem[0]][tFldName].Name = tFldName;
                    pRowData[tDataItem[0]][tFldName].Value = pNewValue;
                    tHasNewValue = true;
                }
            }
            else {
                if ((pFormField && cde.CBool(pFormField["ForceSet"])) || (tFldContent[tDataItem[tDataItem.length - 1]] !== pNewValue && (!pOldValues || pOldValues[tDataItem[tDataItem.length - 1]] !== pNewValue))) {
                    if (pOldValues && !pOldValues[tDataItem[tDataItem.length - 1]])
                        pOldValues[tDataItem[tDataItem.length - 1]] = tFldContent[tDataItem[tDataItem.length - 1]];
                    tFldContent[tDataItem[tDataItem.length - 1]] = pNewValue;
                    tHasNewValue = true;
                }
            }
        }
        else {
            if (pRowData.hasOwnProperty('SecToken') || (tFldContent !== pNewValue && (!pOldValues || pOldValues[tDataItem[0]] !== pNewValue))) {
                if (pOldValues && !pOldValues[tDataItem[0]])
                    pOldValues[tDataItem[0]] = tFldContent;
                if (pRowData.hasOwnProperty('SecToken') && (pFormField.Flags & 1) !== 0) {
                    if (pRowData.SecToken === "")
                        pRowData.SecToken = "CDE!";
                    pRowData.SecToken += ";:;" + pFormField.FldOrder + "=" + pNewValue;
                    pRowData[tDataItem[0]] = null;
                }
                else {
                    pRowData[tDataItem[0]] = pNewValue;
                }
                tHasNewValue = true;
            }
        }
        return tHasNewValue;
    }
    cdeNMI.UpdFldContent = UpdFldContent;
    function SortArrayByProperty(pInArray, property, IsNumeric, pSortDescending) {
        if (!pInArray)
            return [];
        var tArray = pInArray.slice(0);
        return tArray.sort(function (a, b) {
            var c;
            var d;
            if (property.indexOf('.') > 0) {
                c = cdeNMI.GetFldContentByName(a, property, false);
                d = cdeNMI.GetFldContentByName(b, property, false);
            }
            else {
                c = IsNumeric ? parseFloat(a[property]) : a[property].toString();
                d = IsNumeric ? parseFloat(b[property]) : b[property].toString();
            }
            if (c === d)
                return 0;
            return pSortDescending ? d > c ? 1 : -1 : d < c ? 1 : -1;
        });
    }
    cdeNMI.SortArrayByProperty = SortArrayByProperty;
    function GetFldContent(pTableRow, pFormField, pIsGenerated, pIsDeepRow) {
        if (!pFormField || !pFormField.DataItem || !pFormField.DataItem || !pTableRow)
            return null;
        var tFldName = pFormField.DataItem.split('.');
        var tFldContent;
        if (pIsDeepRow && tFldName.length > 1) {
            var tFldRealName = tFldName[1]; //TODO: VALIDATE
            if (tFldName.length > 3) {
                for (var i = 2; i < tFldName.length - 1; i++) {
                    tFldRealName += "." + tFldName[i];
                }
            }
            tFldContent = pTableRow[tFldRealName];
        }
        else {
            if (tFldName[0] === "cdeN") {
                if (cdeNMI.MyEngine && !cdeNMI.MyEngine.IsNodeDown(pTableRow.cdeN)) {
                    tFldContent = cdeNMI.MyEngine.GetKnownNodeName(pTableRow.cdeN);
                }
                if (!tFldContent)
                    tFldContent = pTableRow.cdeN;
                return tFldContent;
            }
            else
                tFldContent = pTableRow[tFldName[0]];
            if (tFldName.length > 1) {
                for (var u = 1; u < tFldName.length; u++) {
                    if (tFldContent === undefined) {
                        tFldContent = "";
                        break;
                    }
                    else {
                        tFldContent = tFldContent[tFldName[u]];
                        if (pIsGenerated && tFldContent !== undefined && tFldContent.length > 5 && tFldContent.substring(0, 5) === "/Date") {
                            pFormField.Type = 21;
                            pFormField["FldWidth"] = 5;
                        }
                    }
                }
            }
        }
        return tFldContent;
    }
    cdeNMI.GetFldContent = GetFldContent;
    function GetFldContentByName(pTableRow, pFormField, pIsDeepRow) {
        if (!pFormField)
            return null;
        var tFldContent = null;
        try {
            var tFldName = pFormField.split('.');
            if (pIsDeepRow) {
                var tFldRealName = tFldName[1]; //TODO: VALIDATE
                if (tFldName.length > 3) {
                    for (var i = 2; i < tFldName.length - 1; i++) {
                        tFldRealName += "." + tFldName[i];
                    }
                }
                tFldContent = pTableRow[tFldRealName];
            }
            else {
                tFldContent = pTableRow[tFldName[0]];
                if (tFldName.length > 1) {
                    for (var u = 1; u < tFldName.length; u++) {
                        if (tFldContent === undefined) {
                            tFldContent = "";
                            break;
                        }
                        else {
                            tFldContent = tFldContent[tFldName[u]];
                        }
                    }
                }
            }
        }
        catch (ee) {
            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "nmiUtils:GetFldContentByName:error", ee);
        }
        return tFldContent;
    }
    cdeNMI.GetFldContentByName = GetFldContentByName;
    function RemoveCookies() {
        var res = document.cookie;
        var multiple = res.split(";");
        for (var i = 0; i < multiple.length; i++) {
            var key = multiple[i].split("=");
            document.cookie = key[0] + " =; expires = Thu, 01 Jan 1970 00:00:00 UTC";
        }
    }
    cdeNMI.RemoveCookies = RemoveCookies;
    var TheMaterialTouch = /** @class */ (function () {
        function TheMaterialTouch(customOptions) {
            this.options_default = {
                classes: {
                    rippleContainer: 'md-ripple-wrapper',
                    ripple: 'md-ripple-effect'
                },
                transition: {
                    delay: 0,
                    duration: 300
                },
                opacity: 0.3,
                size: 100,
                center: false
            };
            this.options = null;
            this.data = { transition: false };
            this.mItem = null;
            var optionsDefault = this.options_default;
            this.options = (customOptions ? this.MergeObject(optionsDefault, customOptions) : optionsDefault);
        }
        TheMaterialTouch.prototype.MergeObject = function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            var self = this, arraynew = {};
            for (var ai in arguments) {
                if (arguments.hasOwnProperty(ai)) {
                    var array = arguments[ai];
                    for (var index in array) {
                        if (array.hasOwnProperty(index)) {
                            var value;
                            if (array.hasOwnProperty(index)) {
                                if (typeof array[index] === 'object' && arraynew[index] && typeof arraynew[index] === 'object')
                                    value = self.MergeObject(arraynew[index], array[index]);
                                else
                                    value = array[index];
                                arraynew[index] = value;
                            }
                        }
                    }
                }
            }
            return arraynew;
        };
        TheMaterialTouch.prototype.ShowWave = function (item, e) {
            var _this = this;
            this.mItem = item;
            var clickX = e.x;
            var clickY = e.y;
            var width = item.offsetWidth;
            var height = item.offsetHeight;
            var size = this.options.size;
            var rippleWrapper = null;
            if (item.querySelector !== undefined)
                rippleWrapper = item.querySelector('.' + this.options.classes.rippleContainer);
            if (!rippleWrapper) {
                rippleWrapper = document.createElement('div');
                rippleWrapper.setAttribute('class', this.options.classes.rippleContainer);
                item.appendChild(rippleWrapper);
            }
            var ripple = document.createElement('div');
            ripple.setAttribute('class', this.options.classes.ripple);
            ripple.style.opacity = this.options.opacity;
            ripple.style.top = clickY + 'px';
            ripple.style.left = clickX + 'px';
            ripple.style.width = "0";
            ripple.style.height = "0";
            rippleWrapper.appendChild(ripple);
            var newX = (clickX - (size / 2)), newY = (clickY - (size / 2));
            if (this.options.center) {
                newX = (width / 2) - (size / 2);
                newY = (height / 2) - (size / 2);
            }
            this.DoRender(ripple, {
                top: newY + 'px',
                left: newX + 'px',
                width: size + 'px',
                height: size + 'px'
            });
            setTimeout(function () {
                _this.EndWave(_this.mItem);
            }, 100);
        };
        ;
        TheMaterialTouch.prototype.EndWave = function (item) {
            var _this = this;
            var rippleWrapper = item.querySelector('.' + this.options.classes.rippleContainer);
            var ripples;
            if (rippleWrapper && rippleWrapper.children) {
                ripples = rippleWrapper.children;
                [].forEach.call(ripples, function (ripple) {
                    _this.DoRender(ripple, { opacity: 0 });
                    setTimeout(function () {
                        if (ripple.parentElement)
                            ripple.parentElement.removeChild(ripple);
                    }, _this.options.transition.duration);
                });
            }
        };
        ;
        TheMaterialTouch.prototype.EasyMeOut = function (pTime, pVal1, pVal2, pDura) {
            return pVal2 * (-Math.pow(2, -10 * pTime / pDura) + 1) + pVal1;
        };
        TheMaterialTouch.prototype.DoRender = function (obj, properties, duration) {
            var _this = this;
            var propertiesObject = {};
            var timeStart = new Date().getTime();
            if (!duration && duration !== 0)
                duration = this.options.transition.duration;
            for (var prop in properties) {
                if (properties.hasOwnProperty(prop)) {
                    propertiesObject[prop] = obj.style[prop];
                }
            }
            this.data.transition = true;
            var animate = setInterval(function () {
                var timePassed = new Date().getTime() - timeStart;
                if (timePassed >= duration)
                    timePassed = duration;
                // Run property update per property
                var propValue;
                var prop;
                for (prop in properties) {
                    if (properties.hasOwnProperty(prop)) {
                        propValue = properties[prop];
                        var defaultValue = propertiesObject[prop], newValue = null, defaultSuffix = null, negative = 0;
                        if (typeof defaultValue === 'string')
                            defaultSuffix = defaultValue.replace(/^\-?[0-9\.]+(.*)$/, '$1');
                        defaultValue = parseFloat(defaultValue);
                        propValue = parseFloat(propValue);
                        // Make the smallest value into 0 and remove the difference from both values, save it in "negative"
                        if (propValue < 0 || defaultValue < 0) {
                            negative = (propValue < defaultValue ? propValue : defaultValue);
                            defaultValue = defaultValue - negative;
                            propValue = propValue - negative;
                        }
                        else {
                            negative = (propValue < defaultValue ? propValue : defaultValue);
                            defaultValue = defaultValue - negative;
                            propValue = propValue - negative;
                        }
                        if (defaultValue > propValue) {
                            newValue = defaultValue - _this.EasyMeOut(timePassed, propValue, defaultValue, duration);
                            if (newValue < propValue)
                                newValue = propValue;
                        }
                        else if (defaultValue !== propValue) {
                            newValue = _this.EasyMeOut(timePassed, defaultValue, propValue, duration);
                            if (newValue > propValue)
                                newValue = propValue;
                        }
                        else {
                            newValue = propValue;
                        }
                        // Remember "negative"? Add it back
                        if (negative !== 0)
                            newValue = newValue + negative;
                        newValue = newValue + '';
                        newValue = newValue.replace(/([0-9]+(\.[0-9]{0,3})?).*/, "$1");
                        newValue = parseFloat(newValue);
                        if (defaultSuffix) {
                            newValue = newValue + defaultSuffix;
                        }
                        obj.style[prop] = newValue;
                    }
                }
                if (timePassed >= duration) {
                    clearInterval(animate);
                    // Make sure all properties are set to the correct final value
                    for (prop in properties) {
                        if (properties.hasOwnProperty(prop)) {
                            propValue = properties[prop];
                            var propSuffix = null;
                            if (typeof propValue === 'string')
                                propSuffix = propValue.replace(/^\-?[0-9\.]+(.*)$/, '$1');
                            propValue = parseFloat(propValue);
                            obj.style[prop] = (propSuffix ? propValue + propSuffix : propValue);
                            // Set transition to false
                            _this.data.transition = false;
                        }
                    }
                }
            }, 24);
        };
        ;
        return TheMaterialTouch;
    }());
    cdeNMI.TheMaterialTouch = TheMaterialTouch;
    function cdeJsonDate2JSDate(jsonDate) {
        if (jsonDate instanceof Date)
            return jsonDate;
        jsonDate = cde.CStr(jsonDate);
        if (jsonDate.substr(0, 2) === "\/") {
            var offset = new Date().getTimezoneOffset() * 60000;
            var parts = /\/Date\((-?\d+)([+-]\d{2})?(\d{2})?.*/.exec(jsonDate);
            if (parts[2] === undefined)
                parts[2] = "0";
            if (parts[3] === undefined)
                parts[3] = "0";
            return new Date(+parts[1] + offset + parseInt(parts[2]) * 3600000 + parseInt(parts[3]) * 60000);
        }
        else {
            if (jsonDate.substr(0, 1) === "/")
                return new Date(parseInt(jsonDate.substr(6)));
            else
                return new Date(jsonDate);
        }
    }
    cdeNMI.cdeJsonDate2JSDate = cdeJsonDate2JSDate;
    ;
    function DoesArrayContain(pArray, pCont) {
        for (var i = 0; i < pArray.length; i++) {
            if (pArray[i] === pCont)
                return true;
        }
        return false;
    }
    cdeNMI.DoesArrayContain = DoesArrayContain;
    function SortArray(pInArray, property, IsNumeric, pSortDescending) {
        if (!pInArray)
            return [];
        var tArray = pInArray.slice(0);
        return tArray.sort(function (a, b) {
            if (!a[property])
                a[property] = "";
            if (!b[property])
                b[property] = "";
            var c = IsNumeric ? parseFloat(a[property]) : a[property].toString();
            var d = IsNumeric ? parseFloat(b[property]) : b[property].toString();
            if (c === d)
                return 0;
            return pSortDescending ? d > c ? 1 : -1 : d < c ? 1 : -1;
        });
    }
    cdeNMI.SortArray = SortArray;
    function SortNamedArray(pInArray, property, IsNumeric, pSortDescending) {
        var tuples = [];
        var pOutArray = new Array();
        try {
            for (var key in pInArray)
                tuples.push([key, pInArray[key]]);
            tuples.sort(function (a, b) {
                var aa = a[1].GetProperty(property);
                if (!aa)
                    aa = "";
                var bb = b[1].GetProperty(property);
                if (!bb)
                    bb = "";
                var c = IsNumeric ? parseFloat(aa) : aa.toString();
                var d = IsNumeric ? parseFloat(bb) : bb.toString();
                if (c === d)
                    return 0;
                return pSortDescending ? d > c ? 1 : -1 : d < c ? 1 : -1;
            });
            for (var i = 0; i < tuples.length; i++) {
                var tkey = tuples[i][0];
                var tvalue = tuples[i][1];
                pOutArray[tkey] = tvalue;
            }
        }
        catch (ee) {
            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "nmiUtils:SortNamedArray:error:" + ee, ee.stack);
            return pInArray;
        }
        return pOutArray;
    }
    cdeNMI.SortNamedArray = SortNamedArray;
    function ResizeIframe(pEleName) {
        if (document.getElementById(pEleName)) {
            var height = document.documentElement.clientHeight;
            var wid = document.documentElement.clientWidth - 5;
            height -= (document.getElementById(pEleName).parentElement.offsetTop + 10);
            document.getElementById(pEleName).style.height = height + "px";
            document.getElementById(pEleName).style.width = wid + "px";
        }
    }
    cdeNMI.ResizeIframe = ResizeIframe;
    ;
    function cdeSleep(ms) {
        var dt = new Date();
        dt.setTime(dt.getTime() + ms);
        while (new Date().getTime() < dt.getTime())
            ;
    }
    cdeNMI.cdeSleep = cdeSleep;
    function StripHTML(inStr) {
        var div = document.createElement("div");
        div.innerHTML = inStr;
        return div.textContent || div.innerText || "";
    }
    cdeNMI.StripHTML = StripHTML;
    function cdeRunAsync(MyFunc, pTimeDelay) {
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        if (!pTimeDelay || pTimeDelay === 0)
            MyFunc(params);
        else {
            setTimeout(MyFunc, pTimeDelay, params);
        }
    }
    cdeNMI.cdeRunAsync = cdeRunAsync;
    function DateToMini(inDate) {
        var month = inDate.getMonth() + 1;
        var day = inDate.getDate();
        var year = inDate.getFullYear();
        var hours = inDate.getHours();
        var minutes = inDate.getMinutes();
        var seconds = inDate.getSeconds();
        var ampm = "AM";
        if (hours > 11) {
            ampm = "PM";
        }
        return month + day + year + "_" + hours + "_" + minutes + "_" + seconds + "_" + ampm;
    }
    cdeNMI.DateToMini = DateToMini;
    function DateToString(inDate) {
        return cde.DateToString(inDate);
    }
    cdeNMI.DateToString = DateToString;
    function CalculateTransform(offsetX, offsetY) {
        var tileMid = 75;
        var tX;
        var tY;
        var tDegBase = 30;
        var tDeg;
        if ((offsetX < tileMid) && (offsetY < tileMid)) {
            tX = (offsetX - tileMid) / tileMid;
            tY = -(offsetY - tileMid) / tileMid;
            tDeg = Math.max((tDegBase * tX), (tDegBase * tY));
        }
        else if ((offsetX > tileMid) && (offsetY < tileMid)) {
            tX = -(offsetX - tileMid) / tileMid;
            tY = (offsetY - tileMid) / tileMid;
            tDeg = Math.max((tDegBase * tX), (tDegBase * tY));
        }
        else if ((offsetX < tileMid) && (offsetY > tileMid)) {
            tX = -(offsetX - tileMid) / tileMid;
            tY = (offsetY - tileMid) / tileMid;
            tDeg = -Math.max((tDegBase * tX), (tDegBase * tY));
        }
        else {
            tX = (offsetX - tileMid) / tileMid;
            tY = -(offsetY - tileMid) / tileMid;
            tDeg = -Math.max((tDegBase * tX), (tDegBase * tY));
        }
        return "rotate3d(" + tY + "," + tX + ", 0," + tDeg + "deg)";
    }
    cdeNMI.CalculateTransform = CalculateTransform;
    function Check4ValidPassword(pwd) {
        if (!pwd || pwd.length === 0)
            return true;
        if (pwd.length < 8)
            return false;
        return true;
    }
    cdeNMI.Check4ValidPassword = Check4ValidPassword;
    function Check4ValidEmail(email) {
        if (!email || email.length === 0)
            return true;
        var filter = new RegExp("[a-z0-9!#$%\&\'*+\x2F=?^_`{|}~-]+(?:\\.[a-z0-9!#$%\&\'*+\x2F=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
        if (!email || !filter.test(email.toLowerCase()) || email.substring(0, 1) === '.' || email.substring(email.length - 1, 1) === '.')
            return false;
        return true;
    }
    cdeNMI.Check4ValidEmail = Check4ValidEmail;
    function IsSamePassword(pPass1, pPass2, AllowMotLock) {
        if ((!pPass1 || pPass1.length === 0) && (!pPass2 || pPass2.length === 0))
            return true;
        if ((!pPass1 && pPass2) || (pPass1 && !pPass2))
            return false;
        if (AllowMotLock && pPass1.indexOf(';') > 0) {
            if (!pPass2)
                return false;
            var MotLockParts = pPass1.split(';');
            var MotL2 = pPass2.split(';');
            var IsMotLock = true;
            var i = void 0;
            for (i = 0; i < MotLockParts.length; i++) {
                if (MotLockParts[i].length === 0) {
                    IsMotLock = false;
                    break;
                }
            }
            if (IsMotLock) {
                for (i = 0; i < MotLockParts.length; i++) {
                    if (MotL2[i].length === 0)
                        return false;
                    var Arr1 = MotLockParts[i].split('');
                    var Arr2 = MotL2[i].split('');
                    if (Arr1.length !== Arr2.length)
                        return false;
                    Arr1.sort();
                    Arr2.sort();
                    for (var j = 0; j < Arr1.length; j++) {
                        if (Arr1[j] !== Arr2[j])
                            return false;
                    }
                }
                return true;
            }
        }
        if (pPass1 === pPass2)
            return true;
        return false;
    }
    cdeNMI.IsSamePassword = IsSamePassword;
    function CColorToHex(color) {
        if (color.substr(0, 1) === '#') {
            return color;
        }
        var digits = /(.*?)rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(color);
        var red = parseInt(digits[2]);
        var green = parseInt(digits[3]);
        var blue = parseInt(digits[4]);
        var rgb = blue | (green << 8) | (red << 16);
        return digits[1] + '#' + rgb.toString(16);
    }
    cdeNMI.CColorToHex = CColorToHex;
    ;
    function HasPlaceholderSupport() {
        var input = document.createElement('input');
        return ('placeholder' in input);
    }
    cdeNMI.HasPlaceholderSupport = HasPlaceholderSupport;
    function cdeMinMax(pValue, sourceMax, sourceMin, targetMax, targetMin) {
        pValue = (pValue - sourceMin) * (targetMax - targetMin) / (sourceMax - sourceMin) + targetMin;
        return pValue;
    }
    cdeNMI.cdeMinMax = cdeMinMax;
    function LoadJsCssFile(filename, filetype) {
        if (filetype === "js") {
            var fileref = document.createElement('script');
            fileref.setAttribute("type", "text/javascript");
            fileref.setAttribute("src", filename);
            document.getElementsByTagName("head")[0].appendChild(fileref);
        }
        else if (filetype === "css") {
            var cssfileref = document.createElement("link");
            cssfileref.setAttribute("rel", "stylesheet");
            cssfileref.setAttribute("type", "text/css");
            cssfileref.setAttribute("href", filename);
            document.getElementsByTagName("head")[0].appendChild(cssfileref);
        }
    }
    cdeNMI.LoadJsCssFile = LoadJsCssFile;
    function SortArrayEx(pInArray, property, IsNumeric, pSortDescending) {
        if (!pInArray)
            return [];
        var tArray = pInArray.slice(0);
        return tArray.sort(function (a, b) {
            var c;
            var d;
            var ac;
            var bc;
            if (!IsNumeric) {
                var tProps = property.split(',');
                for (var i = 0; i < tProps.length; i++) {
                    ac = a[tProps[i]];
                    if (!ac)
                        ac = "";
                    bc = b[tProps[i]];
                    if (!bc)
                        bc = "";
                    if (c && c.length > 0)
                        c += ".";
                    c += ac.toString();
                    if (d && d.length > 0)
                        d += ".";
                    d += bc.toString();
                }
            }
            else {
                ac = a[property];
                if (!ac)
                    ac = "";
                bc = b[property];
                if (!bc)
                    bc = "";
                c = IsNumeric ? parseFloat(ac) : ac.toString();
                d = IsNumeric ? parseFloat(bc) : bc.toString();
            }
            if (c === d)
                return 0;
            return pSortDescending ? d > c ? 1 : -1 : d < c ? 1 : -1;
        });
    }
    cdeNMI.SortArrayEx = SortArrayEx;
    var BASE64_MARKER = ';base64,';
    function convertBase64ToBinary(dataURI) {
        var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
        var base64 = dataURI.substring(base64Index);
        var raw = window.atob(base64);
        var rawLength = raw.length;
        var array = new Uint8Array(new ArrayBuffer(rawLength));
        for (var i = 0; i < rawLength; i++) {
            array[i] = raw.charCodeAt(i);
        }
        return array;
    }
    cdeNMI.convertBase64ToBinary = convertBase64ToBinary;
    // Converts from degrees to radians.
    function toRadians(degrees) {
        return degrees * Math.PI / 180;
    }
    cdeNMI.toRadians = toRadians;
    ;
    // Converts from radians to degrees.
    function toDegrees(radians) {
        return radians * 180 / Math.PI;
    }
    cdeNMI.toDegrees = toDegrees;
    ;
    function ValidateIPaddress(inputText) {
        if (!inputText || inputText.length === 0)
            return true;
        var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        if (inputText.match(ipformat)) {
            return true;
        }
        return false;
    }
    cdeNMI.ValidateIPaddress = ValidateIPaddress;
    function ResetBrowserToPortal() {
        if (cde.MyCommChannel)
            cde.MyCommChannel.Logout();
        window.location.href = cde.MyBaseAssets.MyServiceHostInfo.PortalPage;
    }
    cdeNMI.ResetBrowserToPortal = ResetBrowserToPortal;
    function Vector2Distance(a, b) {
        return Math.sqrt(Math.pow(a.x - b.x, 2.0) + Math.pow(a.y - b.y, 2.0));
    }
    cdeNMI.Vector2Distance = Vector2Distance;
    function Vector2GetAngle(c, f) {
        return (180.0 * (1.0 + (Math.atan2(c.y - f.y, c.x - f.x) / Math.PI)));
    }
    cdeNMI.Vector2GetAngle = Vector2GetAngle;
    function GetSizeFromTile(pTile, pDelta) {
        pTile = Math.floor(pTile);
        if (!pTile || pTile === 0)
            return 0;
        return (cde.MyBaseAssets.MyServiceHostInfo.TileSize * pTile);
    }
    cdeNMI.GetSizeFromTile = GetSizeFromTile;
    function NotifyHost(pText) {
        if (window.external) {
            try {
                var tWin = window;
                if (tWin.external.notify)
                    tWin.external.notify(pText);
            }
            catch (e) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Show("Error: " + e, true);
            }
        }
    }
    cdeNMI.NotifyHost = NotifyHost;
    function GetControlFromPoint(x, y) {
        var element;
        var elements = [];
        var tResControl = null;
        var oldVisibility = [];
        while (true) {
            element = document.elementFromPoint(x, y);
            if (!element || element === document.documentElement) {
                break;
            }
            if (element.getAttribute("cdemid") && !tResControl) {
                var myNmiControl = cdeNMI.MyTCF.GetRegisteredControlGroup(element.getAttribute("cdemid")); // this.MyNMIControls[tOWN];
                for (var tInfo in myNmiControl) {
                    if (myNmiControl.hasOwnProperty(tInfo)) {
                        tResControl = myNmiControl[tInfo];
                        break;
                    }
                }
            }
            elements.push(element);
            oldVisibility.push(element.style.visibility);
            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)
        }
        for (var k = 0; k < elements.length; k++) {
            elements[k].style.visibility = oldVisibility[k];
        }
        return tResControl;
    }
    cdeNMI.GetControlFromPoint = GetControlFromPoint;
    function GetAllElementsFromPoint(x, y) {
        var element;
        var elements = [];
        var oldVisibility = [];
        while (true) {
            element = document.elementFromPoint(x, y);
            if (!element || element === document.documentElement) {
                break;
            }
            elements.push(element);
            oldVisibility.push(element.style.visibility);
            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)
        }
        for (var k = 0; k < elements.length; k++) {
            elements[k].style.visibility = oldVisibility[k];
        }
        elements.reverse();
        return elements;
    }
    cdeNMI.GetAllElementsFromPoint = GetAllElementsFromPoint;
    function focusNextElement(goBack) {
        var focussableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"])';
        var focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements), function (element) {
            return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;
        });
        var index = focussable.indexOf(document.activeElement);
        if (index > -1) {
            if (goBack === true) {
                var nextElement = focussable[index - 1] || focussable[0];
                nextElement.focus();
            }
            else {
                var nextElement = focussable[index + 1] || focussable[0];
                nextElement.focus();
            }
        }
        else {
            focussable[0].focus();
        }
    }
    cdeNMI.focusNextElement = focusNextElement;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    //////////////////////////////////////////////////////////////////////////////
    /// The NMI Base Service Engine
    //////////////////////////////////////////////////////////////////////////////
    var TheNMIServiceBase = /** @class */ (function (_super) {
        __extends(TheNMIServiceBase, _super);
        function TheNMIServiceBase() {
            var _this = _super.call(this) || this;
            _this.MyBaseEngine = null;
            _this.IsConnectedAndReady = false;
            _this.MyNMIIncomingEvents = []; //Not needed in Local...can we drop this????
            _this.MetaRequested = [];
            _this.DataToFetch = new Array();
            _this.DataFetching = new Array(); //Should be emtpied if Fetch was successful
            _this.MyLazyTableCallbacks = [];
            _this.MyBaseEngine = cde.StartNewEngine(cdeNMI.eTheNMIEngine);
            cde.MyBaseAssets.RegisterEvent("OnStringEvent", function (sender, tJS, TargetControl, Parameter, PropertyName, params) { _this.OnStringEvent(tJS, TargetControl, Parameter, PropertyName, params); });
            return _this;
        }
        TheNMIServiceBase.prototype.GetBaseEngine = function () {
            return this.MyBaseEngine;
        };
        TheNMIServiceBase.prototype.RegisterIncomingMsg = function (pCtrl, pID, pEng) {
            if (!pCtrl)
                return;
            if (!pEng)
                pEng = cdeNMI.eTheNMIEngine;
            var tEngs = pEng.split(";");
            for (var i = 0; i < tEngs.length; i++) {
                if (!this.MyNMIIncomingEvents[tEngs[i]])
                    this.MyNMIIncomingEvents[tEngs[i]] = [];
                this.MyNMIIncomingEvents[tEngs[i]][pID] = pCtrl;
            }
        };
        TheNMIServiceBase.prototype.RequestEngineStatus = function () {
            this.FireEvent(true, "CDE_SETSTATUSMSG", "BaseEngine is ready", 1);
        };
        TheNMIServiceBase.prototype.OnStringEvent = function (tJS, TargetControl, Parameter, PropertyName, params) {
            if (tJS.startsWith("jsAction:")) {
                var pDashType = tJS.split(':');
                if (pDashType.length < 2)
                    return;
                switch (pDashType[1]) {
                    case "PTS":
                        {
                            if (pDashType.length < 4)
                                return;
                            var tPLS = "";
                            if (pDashType.length > 4)
                                tPLS = pDashType[4];
                            if (cde.MyCommChannel)
                                cde.MyCommChannel.SendQueued("", pDashType[2], pDashType[2], pDashType[3], tPLS, 0, 5, 3, "");
                            if (pDashType.length > 5)
                                cdeNMI.ShowToastMessage(pDashType[5]);
                        }
                        return;
                    case "GS":
                        if (pDashType.length < 3)
                            return;
                        if (cdeNMI.MyEngine)
                            cdeNMI.MyEngine.GetScene(pDashType[2]);
                        return;
                    case "POP":
                        if (pDashType.length < 3)
                            return;
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show(pDashType[2], true);
                        return;
                    case "TOAST":
                        if (pDashType.length < 3)
                            return;
                        if (cdeNMI.MyToast)
                            cdeNMI.MyToast.ShowToastMessage(pDashType[2]);
                        return;
                    case "TTS":
                        if (pDashType.length < 3)
                            return;
                        if (cdeNMI.MyScreenManager)
                            cdeNMI.MyScreenManager.TransitToScreen(pDashType[2], true);
                        return;
                    case "CFU":
                        if (cdeNMI.MyEngine)
                            cdeNMI.MyEngine.CheckForUpdates();
                        return;
                    default:
                        tJS = pDashType[1];
                        break;
                }
            }
            if (tJS.startsWith("TTS:")) {
                if (cdeNMI.MyScreenManager) {
                    var tScrParts = tJS.split(':');
                    if (tScrParts[1] === "CLOSE") {
                        var tLast = cdeNMI.MyScreenManager.GetCurrentScreen();
                        if (tLast) {
                            var tOld = tLast.GetProperty("OldScreen");
                            if (tOld)
                                cdeNMI.MyScreenManager.TransitToScreen(tOld);
                        }
                    }
                    else {
                        cdeNMI.MyScreenManager.TransitToScreen(cde.GuidToString(tScrParts[1]), true, false, tScrParts.length > 2 ? tScrParts[2] : null);
                    }
                }
                return;
            }
            else if (tJS.startsWith("GRP:")) {
                cdeNMI.MyTCF.ToggleGroup(TargetControl.MyFormID, tJS.substr(4));
                return;
            }
            else if (tJS.startsWith("PTOT:")) {
                if (!cde.MyCommChannel)
                    return;
                var tPa = tJS.substr(5).split(';:;');
                if (tPa.length < 6)
                    return;
                if (tPa[0].length === 0 || PropertyName === tPa[0]) {
                    var tID = TargetControl.GetProperty('MID');
                    if (!tID)
                        tID = TargetControl.GetProperty('ID');
                    cde.MyCommChannel.SendQueued(tPa[1], tPa[2], tPa[2], tPa[3] + ':' + tID + ':' + tPa[4], Parameter + ':' + tPa[4] + ':' + (TargetControl.MyTRF && TargetControl.MyTRF.RowID ? TargetControl.MyTRF.RowID : 0), 8, 5, 3, TargetControl.MyTRF ? TargetControl.MyTRF.GetNodeID() : tPa[5]);
                }
                return;
            }
            else if (tJS.startsWith("PTOR:")) {
                if (!cde.MyCommChannel)
                    return;
                var tPa = tJS.substr(5).split(';:;');
                if (tPa.length < 6)
                    return;
                if (tPa[0].length === 0 || PropertyName === tPa[0]) {
                    var tID = TargetControl.GetProperty('MID');
                    if (!tID)
                        tID = TargetControl.GetProperty('ID');
                    cde.MyCommChannel.SendQueued(TargetControl.MyTRF ? TargetControl.MyTRF.GetMID() : tPa[1], tPa[2], tPa[2], tPa[3] + ':' + tID + ':' + tPa[4], Parameter, // + ':' + tPa[4] + ':' + (TargetControl.MyTRF && TargetControl.MyTRF.RowID ? TargetControl.MyTRF.RowID : 0),
                    8, 5, 3, TargetControl.MyTRF ? TargetControl.MyTRF.GetNodeID() : tPa[5]);
                }
                return;
            }
            else if (tJS.startsWith("SEV:")) {
                var tProp = tJS.substr(4);
                var ti = "";
                if (tProp === "Value")
                    ti = "i";
                if (PropertyName === tProp)
                    TargetControl.SetProperty(ti + "Value", Parameter);
                return;
            }
            else if (tJS.startsWith("if (PropertyName==")) {
                if (tJS.indexOf("PublishToOwner") < 0) {
                    var tProp = cdeNMI.GetStringSegment(tJS, "'", "'");
                    var ti = "";
                    if (tProp === "Value")
                        ti = "i";
                    if (PropertyName === tProp)
                        TargetControl.SetProperty(ti + "Value", Parameter);
                    return;
                }
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.DebugLevel > 0)
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "FireEvent:EVAL", "UPDATE Plugin! eval() will be dropped in the future! Code: " + tJS);
            eval(tJS);
        };
        //////////////////////////////////////////////////////////////////////////////
        /// NMI Data Fetcher
        //////////////////////////////////////////////////////////////////////////////
        TheNMIServiceBase.prototype.AddDataToFetch = function (pToFetch) {
            if (!this.HasDataToFetch(pToFetch))
                this.DataToFetch.push(pToFetch);
        };
        TheNMIServiceBase.prototype.HasDataToFetch = function (pToFetch) {
            return cdeNMI.DoesArrayContain(this.DataToFetch, pToFetch);
        };
        TheNMIServiceBase.prototype.CheckDataToFetch = function (pScreenID) {
            if (!pScreenID)
                return;
            pScreenID = cde.GuidToString(pScreenID);
            var tScreen = cdeNMI.MyScreenManager ? cdeNMI.MyScreenManager.GetScreenByID(pScreenID) : null;
            var HasFound = (tScreen && tScreen.GetInitialized());
            if (!HasFound) {
                if (this.DataToFetch.length > 0) {
                    for (var i = 0; i < this.DataToFetch.length; i++) {
                        var tParts = this.DataToFetch[i].split(':');
                        if (cdeNMI.DoesArrayContain(this.DataFetching, cde.GuidToString(tParts[0])))
                            continue;
                        if (cde.GuidToString(tParts[0]) === pScreenID) {
                            if (!cdeNMI.MyTCF.IsControlNameKnown(tParts[1])) {
                                if (!cde.MyBaseAssets.MyEngines[tParts[1]])
                                    cde.StartNewEngine(tParts[1]);
                            }
                            this.PublishToNodeGET_NMI_DATA(this.DataToFetch[i]);
                            this.DataFetching.push(pScreenID);
                            this.DataToFetch.splice(i, 1);
                            HasFound = true;
                            break;
                        }
                    }
                }
            }
            if (!HasFound) {
                if (this.DataFetching.length > 0) {
                    for (var i = 0; i < this.DataFetching.length; i++) {
                        if (this.DataFetching[i] === pScreenID) {
                            HasFound = true;
                            break;
                        }
                    }
                }
                if (!HasFound) {
                    var tNF = pScreenID + ':auto:' + pScreenID;
                    this.DataToFetch.push(tNF);
                    this.CheckDataToFetch(pScreenID);
                }
            }
        };
        TheNMIServiceBase.prototype.PublishToNodeGET_NMI_DATA = function (pRes) {
        };
        //////////////////////////////////////////////////////////////////////////////
        /// NMI Lazy Table Loader
        //////////////////////////////////////////////////////////////////////////////
        TheNMIServiceBase.prototype.FireLazyLoaded = function (pScreenID, pTableName, pMirror) {
            if (!pScreenID || !pTableName || !this.MyLazyTableCallbacks[pScreenID + ',' + pTableName])
                return;
            for (var mh = 0; mh < this.MyLazyTableCallbacks[pScreenID + ',' + pTableName].length; mh++) {
                if (this.MyLazyTableCallbacks[pScreenID + ',' + pTableName][mh].CallBack) {
                    this.MyLazyTableCallbacks[pScreenID + ',' + pTableName][mh].CallBack(pMirror, this.MyLazyTableCallbacks[pScreenID + ',' + pTableName][mh].Cookie);
                }
            }
        };
        TheNMIServiceBase.prototype.UnregisterLazyLoader = function (pScreenID, pTableName, pCallback) {
            if (!this.MyLazyTableCallbacks[pScreenID + ',' + pTableName])
                return;
            for (var mh = 0; mh < this.MyLazyTableCallbacks[pScreenID + ',' + pTableName].length; mh++) {
                if (this.MyLazyTableCallbacks[pScreenID + ',' + pTableName][mh].CallBack === pCallback) {
                    this.MyLazyTableCallbacks[pScreenID + ',' + pTableName].splice(mh, 1);
                    return;
                }
            }
        };
        TheNMIServiceBase.prototype.LoadTableLazy = function (pScreenID, pTableName, pCallback, cookie) {
            if (!pCallback || !pScreenID || !pTableName)
                return;
            if (cdeNMI.MyNMIModels[pScreenID] && cdeNMI.MyNMIModels[pScreenID].MyStorageMirror[pTableName]) {
                pCallback(cdeNMI.MyNMIModels[pScreenID].MyStorageMirror[pTableName], cookie);
            }
            else
                pCallback(null, cookie);
            if (!this.MyLazyTableCallbacks[pScreenID + ',' + pTableName]) {
                this.MyLazyTableCallbacks[pScreenID + ',' + pTableName] = [];
            }
            this.MyLazyTableCallbacks[pScreenID + ',' + pTableName].push({ ScreenID: pScreenID, TableName: pTableName, CallBack: pCallback, Cookie: cookie });
        };
        //////////////////////////////////////////////////////////////////////////////
        /// NMI Global Scripts Management
        //////////////////////////////////////////////////////////////////////////////
        TheNMIServiceBase.prototype.cdeGetScript = function (pScriptName, pCallBack, cookie, pTimeout) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
        };
        TheNMIServiceBase.prototype.cdeGetStyle = function (pResource, pCallBack, cookie, pTimeout) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
        };
        TheNMIServiceBase.prototype.cdeGetResource = function (pResource, pCallBack, cookie, pTimeout) {
            if (cookie === void 0) { cookie = null; }
        };
        TheNMIServiceBase.prototype.cdeGetImage = function (pResource, pCallBack, cookie, pTimeout) {
            if (cookie === void 0) { cookie = null; }
        };
        TheNMIServiceBase.prototype.PublishToNMI = function (pCommand, pPayload, pTargetNode) {
        };
        TheNMIServiceBase.prototype.CheckForUpdates = function () {
        };
        TheNMIServiceBase.prototype.GetScreenMeta = function (pGuid, pForceLoad) {
            return false;
        };
        TheNMIServiceBase.prototype.GetScene = function (sceneID) {
        };
        TheNMIServiceBase.prototype.IsNodeDown = function (pNodeID) {
            return false;
        };
        TheNMIServiceBase.prototype.GetKnownNodeName = function (pNodeID) {
            return "";
        };
        TheNMIServiceBase.prototype.RegisterKnownNode = function (pNodeID, pNodeName) {
        };
        TheNMIServiceBase.prototype.RequestReloadModel = function (pModelID) {
            this.MetaRequested[cde.GuidToString(pModelID)] = false;
        };
        TheNMIServiceBase.prototype.ValidateUID = function (pUID) {
            if (!cdeNMI.Check4ValidEmail(pUID))
                return "eMail invalid! Please enter a valid eMail address";
            return null;
        };
        TheNMIServiceBase.prototype.Login = function (pTarget, pUID, pPWD, pPlatform) {
            if (!cde.MyCommChannel)
                return;
            if (pTarget) {
                if (cde.MyCommChannel.SetTargetRelay(pTarget))
                    cde.MyCommChannel.StartCommunication();
                else
                    return;
            }
            if (pPlatform) {
                cde.MyBaseAssets.MyServiceHostInfo.WebPlatform = pPlatform;
                this.FireEvent(false, "CDE_SETPLATFORM", pPlatform);
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.IsUsingUserMapper && !cde.MyBaseAssets.MyServiceHostInfo.EnablePinLogin) {
                cde.MyCommChannel.Login({ QPWD: pPWD, QUID: pUID, QToken: null });
            }
            else {
                cde.MyCommChannel.Login({ QPWD: pUID, QUID: null, QToken: null });
            }
        };
        TheNMIServiceBase.prototype.SelectMesh = function (pTargetMesh) {
            cde.MyCommChannel.SelectMesh(pTargetMesh);
        };
        TheNMIServiceBase.prototype.BaseOnHandleMessage = function (pProcessMessage) {
            var pMSG = pProcessMessage.Message;
            if (!pMSG)
                return true;
            if (pProcessMessage.Topic === "NMI_ERROR") {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Show(pMSG.PLS, true, null, 1, function () { document.location.reload(true); });
                return true;
            }
            if (pProcessMessage.Topic === "NMI_INFO") {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Show(pMSG.PLS, true);
                return true;
            }
            if (pProcessMessage.Topic === "NMI_TOAST" || pMSG.TXT.endsWith(":ERR")) {
                if (cdeNMI.MyToast)
                    cdeNMI.MyToast.ShowToastMessage(pMSG.TXT, pMSG.PLS);
                return true;
            }
            if (pProcessMessage.Topic === "NMI_ALERT") {
                var tCmd_1 = pMSG.TXT.split(':;:');
                if (cdeNMI.MyToast)
                    cdeNMI.MyToast.ShowToastMessage("ALERT", pMSG.PLS, tCmd_1.length > 1 ? cde.CInt(tCmd_1[1]) : 0);
                return true;
            }
            var tCmd = pMSG.TXT.split(':');
            var tModel;
            switch (tCmd[0]) {
                case "NMI_ERROR":
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Show(pMSG.PLS, true, null, 1);
                    return true;
                case "NMI_INFO":
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Show(pMSG.PLS, true);
                    return true;
                case "NMI_TOAST":
                    if (cdeNMI.MyToast)
                        cdeNMI.MyToast.ShowToastMessage(pMSG.PLS);
                    return true;
                case "NMI_ALERT":
                    if (cdeNMI.MyToast)
                        cdeNMI.MyToast.ShowToastMessage("Alert!", pMSG.PLS, tCmd.length > 1 ? cde.CInt(tCmd[1]) : 15000);
                    return true;
                case "NMI_AUDIO":
                    {
                        var audio = new Audio(cde.MyBaseAssets.MyCommStatus.MyServiceUrl + "/" + pMSG.PLS);
                        audio.play();
                    }
                    return true;
                case "NMI_TALK":
                    {
                        var tP = tCmd;
                        cdeSpeech.talk(pMSG.PLS, tP.length > 1 ? tP[1] : "en", tP.length > 2 ? cde.CInt(tP[2]) : 0);
                    }
                    return true;
                case "NMI_RESET":
                    if (tCmd.length > 1) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show(pMSG.PLS, true);
                    }
                    else {
                        window.location.reload(true);
                    }
                    return true;
                case "NMI_REFRESH_META":
                    if (cdeNMI.MyScreenManager) {
                        if (cdeNMI.MyEngine)
                            cdeNMI.MyEngine.RequestReloadModel(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                        cdeNMI.MyScreenManager.RequestPortalScreen(true);
                    }
                    return true;
                case "NMI_GS":
                    if (cdeNMI.MyEngine)
                        cdeNMI.MyEngine.GetScene(pMSG.PLS);
                    return true;
                case "NMI_TTS":
                    if (cdeNMI.MyScreenManager)
                        cdeNMI.MyScreenManager.TransitToScreen(pMSG.PLS, true);
                    return true;
                case "NMI_LIVESCREENMETA":
                    if (pMSG.PLS) {
                        tModel = JSON.parse(pMSG.PLS);
                        if (!tModel)
                            break;
                        if (cdeNMI.MyScreenManager)
                            cdeNMI.MyScreenManager.CreateLiveScreen(tModel);
                    }
                    break;
                case "NMI_REQ_DASH":
                    if (pMSG.PLS) {
                        this.PublishToNodeGET_NMI_DATA(pMSG.PLS);
                    }
                    return true;
                case "NMI_NODEPONG":
                    return true;
                case "NMI_SCREENMETA":
                    if (pMSG.PLS) {
                        if (typeof pMSG.PLS === 'string')
                            tModel = JSON.parse(pMSG.PLS);
                        else
                            tModel = pMSG.PLS;
                        if (!tModel)
                            break;
                        this.RegisterKnownNode(tModel.cdeN, tModel.NodeName);
                        if (cdeNMI.MyScreenManager) {
                            cdeNMI.MyScreenManager.CreateDashboard(tModel, (tCmd.length > 1 ? "ScreenGuid=" + tCmd[1] : null));
                        }
                    }
                    break;
                case "NMI_CUSTOM_SCRIPT":
                    if (pMSG.PLS && tCmd.length > 1 && cdeNMI.MyScreenManager) {
                        cdeNMI.MyScreenManager.CreateScriptScreen(tCmd[1], pMSG.PLS);
                    }
                    break;
                case "NMI_ENGINEJS":
                    if (pMSG.PLS && tCmd.length > 1) {
                        cdeNMI.RegisterEvent("EngineReady", function (a) {
                            if (a === tCmd[1])
                                cdeNMI.MyTCF.FireLazyCreate(a);
                        });
                        if (!cde.MyBaseAssets.MyEngines[tCmd[1]]) {
                            cde.CreateScriptInRoot(tCmd[1], pMSG.PLS);
                            cde.StartNewEngine(tCmd[1]);
                            try {
                                cde.cdeEval(tCmd[1] + ".StartEngine()");
                            }
                            catch (error) {
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "NMIServiceBase:HandleEvent", "NMI_ENGINEJS:" + error + "<br>" + error.stack);
                            }
                        }
                    }
                    break;
                case "NMI_CUSTOM_HTML":
                    if (pMSG.PLS && tCmd.length > 1 && cdeNMI.MyScreenManager) {
                        cdeNMI.MyScreenManager.CreateHTMLScreen(tCmd[1], pMSG.PLS);
                    }
                    break;
                case "NMI_CUSTOM_CSS":
                    if (pMSG.PLS) {
                        var tCSS = pMSG.PLS.split(';');
                        cde.AddCSSToHeader(tCSS[0], tCSS.length > 1 ? tCSS[1] : null);
                    }
                    break;
                case "NMI_UPD_DATA_RET":
                    {
                        if (tCmd.length < 2 || tCmd[2] === "ERR")
                            if (cdeNMI.MyPopUp)
                                cdeNMI.MyPopUp.Show('There was an error processing your request: ' + pMSG.PLS, true);
                            else {
                                var tModelMid = "";
                                if (tCmd.length > 2 && tCmd[2] !== "")
                                    tModelMid = cde.GuidToString(tCmd[2]);
                                else
                                    tModelMid = cde.GuidToString(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                                tModel = cdeNMI.MyNMIModels[tModelMid];
                                if (!tModel)
                                    return true;
                                if (!tModel.MyStorageMirror)
                                    tModel.MyStorageMirror = [];
                                var tTableGuid = cde.GuidToString(tCmd[1]);
                                var tRecord = JSON.parse(pMSG.PLS);
                                if (tModel.MyStorageMirror[tTableGuid] && tModel.MyStorageMirror[tTableGuid].length > 0) {
                                    for (var tRowNo = 0; tRowNo < tModel.MyStorageMirror[tTableGuid].length; tRowNo++) {
                                        if (tModel.MyStorageMeta[tTableGuid].IsAlwaysEmpty || tModel.MyStorageMirror[tTableGuid][tRowNo].cdeMID === tRecord.cdeMID) {
                                            tModel.MyStorageMirror[tTableGuid][tRowNo] = tRecord;
                                            this.FireEvent(false, "RecordUpdated_" + tTableGuid + "_" + tRowNo, tModelMid, tTableGuid, tRowNo);
                                            break;
                                        }
                                    }
                                }
                                else {
                                    if (tModel.MyStorageMirror[tTableGuid])
                                        tModel.MyStorageMirror[tTableGuid][0] = tRecord;
                                }
                            }
                    }
                    break;
                case "NMI_SET_SCENE":
                    if (cdeNMI.MyScreenManager) {
                        cdeNMI.MyScreenManager.SetView(JSON.parse(pMSG.PLS), true);
                    }
                    break;
                case "NMI_SET_DATA":
                    if (tCmd.length < 2 || tCmd[2] === "ERR") {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show('There was an error processing your request: ' + pMSG.PLS, true);
                    }
                    else {
                        if (tCmd.length > 2 && tCmd[2] !== "") {
                            tModel = cdeNMI.MyNMIModels[cde.GuidToString(tCmd[2])];
                            if (!tModel) {
                                //TODO: Decide what to do: either request Model or quit!
                                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheNMIService:OnHandleMessage", "Model not found for " + tCmd[2]);
                                return true;
                            }
                            if (!tModel.MyStorageMirror)
                                tModel.MyStorageMirror = [];
                        }
                        else
                            tModel = cdeNMI.MyNMIModels[cde.GuidToString(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen)];
                        if (tModel) {
                            var tTableName = cde.GuidToString(tCmd[1]);
                            if (cdeNMI.MyScreenManager)
                                cdeNMI.MyScreenManager.CreateDataViewScreen(tModel, pMSG, tTableName, pMSG.TXT, tCmd.length > 3 ? tCmd[3] : null, (tCmd.length > 6 && tCmd[6] === 'true') || (tCmd.length === 5 && tCmd[4] === 'true'));
                        }
                    }
                    break;
                case "NMI_SCOPID":
                    cde.MyBaseAssets.MyServiceHostInfo.DoesRequireConfiguration = false;
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Show('Your new Security ID is: ' + pMSG.PLS + '</br>Please write it down in a secure place.</br>You will need this ID for any secondary relays or agents that want to talk to this relay', true, null, 0, this.sinkScopeIDSet);
                    return true;
                default:
                    this.FireEvent(true, tCmd[0], pMSG);
                    break;
            }
            return false;
        };
        TheNMIServiceBase.prototype.sinkScopeIDSet = function () {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
        };
        ///BackCompat Requirements
        TheNMIServiceBase.cdeGetScript = function (pName, pCallback, pCookie) {
            cdeNMI.MyEngine.cdeGetScript(pName, pCallback, pCookie);
        };
        TheNMIServiceBase.cdeGetStyle = function (pResource, pCallBack, cookie) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
            cdeNMI.MyEngine.cdeGetStyle(pResource, pCallBack, cookie);
        };
        TheNMIServiceBase.MyNMISettings = cdeNMI.MyNMISettings;
        return TheNMIServiceBase;
    }(cde.TheThing));
    cdeNMI.TheNMIServiceBase = TheNMIServiceBase;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    //////////////////////////////////////////////////////////////////////////////
    /// The NMI Base Service Engine
    //////////////////////////////////////////////////////////////////////////////
    var TheNMIServiceLocal = /** @class */ (function (_super) {
        __extends(TheNMIServiceLocal, _super);
        function TheNMIServiceLocal() {
            return _super.call(this) || this;
        }
        TheNMIServiceLocal.StartEngine = function () {
            cdeNMI.MyEngine = new TheNMIServiceLocal();
            cdeNMI.MyEngine.IsConnectedAndReady = true;
            cdeNMI.MyEngine.GetBaseEngine().EngineState.IsInitialized = true;
            cdeNMI.MyEngine.GetBaseEngine().FireEngineIsReady(true);
        };
        TheNMIServiceLocal.prototype.ValidateUID = function (pUID) {
            if (pUID && pUID.length > 2)
                return null;
            return "Wrong Username!";
        };
        TheNMIServiceLocal.prototype.Login = function (pTarget, pUID, pPWD, pPlatform) {
            if (pUID === "nmi") {
                cde.MyBaseAssets.MyCommStatus.UserPref = new cde.TheUserPreferences(); //We could set some values here 
                this.FireEvent(true, "CDE_LOGIN_EVENT", true);
            }
            else
                this.FireEvent(true, "CDE_LOGIN_EVENT", false, "Login failed! unknown credentials");
        };
        TheNMIServiceLocal.prototype.RequestEngineStatus = function () {
            this.FireEvent(true, "CDE_SETSTATUSMSG", "Local-Engine Provider ready", 1);
        };
        //////////////////////////////////////////////////////////////////////////////
        /// NMI Global Scripts Management
        //////////////////////////////////////////////////////////////////////////////
        TheNMIServiceLocal.prototype.cdeGetScript = function (pScriptName, pCallBack, cookie, pTimeout) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pScriptName)
                return;
            fetch("/ClientBin/Scripts/" + pScriptName).then(function (d) {
                if (d.ok) {
                    d.text().then(function (txt) {
                        var s = document.createElement('script');
                        var prior = document.getElementsByTagName('script')[0];
                        s.type = "text/javascript";
                        s.text = txt.replace(String.fromCharCode(65279), '');
                        prior.parentNode.insertBefore(s, prior);
                        pCallBack(cookie, txt);
                    });
                }
            });
        };
        TheNMIServiceLocal.prototype.cdeGetStyle = function (pResource, pCallBack, cookie, pTimeout) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pResource)
                return;
            fetch("/ClientBin/CSS/" + pResource).then(function (d) {
                if (d.ok) {
                    d.text().then(function (txt) {
                        var css = document.createElement('style');
                        css.type = 'text/css';
                        if (css.styleSheet)
                            css.styleSheet.cssText = txt.replace(String.fromCharCode(65279), '');
                        else
                            css.appendChild(document.createTextNode(txt.replace(String.fromCharCode(65279), '')));
                        document.getElementsByTagName("head")[0].appendChild(css);
                        pCallBack(cookie, txt);
                    });
                }
            });
        };
        TheNMIServiceLocal.prototype.PublishToNodeGET_NMI_DATA = function (pRes) {
            var _this = this;
            var tParts = pRes.split(':');
            fetch("/ClientBin/JSON/" + tParts[0] + ".JSON").then(function (d) {
                if (d.ok) {
                    d.json().then(function (tJSon) {
                        _this.OnHandleMessage(tJSon);
                    });
                }
            });
        };
        TheNMIServiceLocal.prototype.cdeGetResource = function (pResource, pCallBack, cookie, pTimeout) {
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pResource)
                return;
            fetch("/ClientBin/" + pResource).then(function (d) {
                if (d.ok) {
                    d.text().then(function (txt) {
                        pCallBack(cookie, txt);
                    });
                }
                else {
                    pCallBack(cookie, "ERR:" + d.statusText);
                }
            });
        };
        TheNMIServiceLocal.prototype.cdeGetImage = function (pResource, pCallBack, cookie, pTimeout) {
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pResource)
                return;
            fetch("/ClientBin/" + pResource).then(function (d) {
                if (d.ok) {
                    d.text().then(function (txt) {
                        pCallBack(cookie, txt);
                    });
                }
                else {
                    pCallBack(cookie, "ERR:" + d.statusText);
                }
            });
        };
        TheNMIServiceLocal.prototype.GetScreenMeta = function (pGuid, pForceLoad) {
            this.PublishToNodeGET_NMI_DATA(pGuid);
            return false;
        };
        TheNMIServiceLocal.prototype.OnHandleMessage = function (pProcessMessage) {
            var pMSG = pProcessMessage.Message;
            if (!pMSG)
                return;
            if (_super.prototype.BaseOnHandleMessage.call(this, pProcessMessage))
                return;
            if (cdeNMI.MyScreenManager) {
                cdeNMI.MyScreenManager.ShowView();
            }
        };
        return TheNMIServiceLocal;
    }(cdeNMI.TheNMIServiceBase));
    cdeNMI.TheNMIServiceLocal = TheNMIServiceLocal;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    //////////////////////////////////////////////////////////////////////////////
    /// The NMI Base Service Engine
    //////////////////////////////////////////////////////////////////////////////
    var TheNMIService = /** @class */ (function (_super) {
        __extends(TheNMIService, _super);
        function TheNMIService() {
            var _this = _super.call(this) || this;
            _this.mLastStatus = "NMI-Engine is starting...";
            _this.mLastState = 0;
            _this.AreEnginesRequested = false;
            _this.MyKnownNodes = new Array();
            _this.MyPingTimer = null;
            _this.MyGlobalResources = [];
            _this.MyBaseEngine.RegisterEvent("IncomingMessage", function (pSender, pProcessMessage) { _this.OnHandleMessage(pProcessMessage); });
            return _this;
        }
        TheNMIService.StartEngine = function () {
            var tEngine = new TheNMIService();
            cdeNMI.MyEngine = tEngine;
            tEngine.MyPingTimer = setInterval(function () {
                if (Object.keys(tEngine.MyKnownNodes).length === 0)
                    return;
                var tNow = (new Date()).getTime();
                for (var mh in tEngine.MyKnownNodes) {
                    //if (tNow - tEngine.MyKnownNodes[mh].LastPing > 30000)
                    cdeNMI.MyEngine.PublishToNMI("NMI_NODEPING", "", mh);
                    if (tEngine.MyKnownNodes[mh].IsDown !== true && tNow - tEngine.MyKnownNodes[mh].LastPing > 60000) {
                        tEngine.MyKnownNodes[mh].IsDown = true;
                        cdeNMI.MyScreenManager.UpdateScreenStatus(mh, true);
                    }
                }
            }, 10000);
            window.addEventListener("message", function (e) {
                try {
                    if (!e.data)
                        return;
                    //let res = e.data;
                    var cred = e.data.split(';:;');
                    switch (cred[0]) { //TODO: V4.109: Security Review: can we control this by the Relay? Reflect all to Relay?
                        case "APPLOG":
                            if (cred.length > 2) {
                                cdeNMI.MyEngine.Login(cred[1], cred[2]);
                                //res = "Done";
                            }
                            break;
                    }
                    if (e.data.startsWith("OK:"))
                        return;
                    //const tText: string = cde.CStr(e.data);
                    //const tOrig: string = cde.CStr(e.origin);
                    //e.source.postMessage("OK:" + tText, tOrig); //TODO: 4.109: Why does this not work??
                }
                catch (_a) {
                    // ignored
                }
            }, false);
            if (cde.MyCommChannel) {
                cde.MyCommChannel.RegisterEvent("CDE_SETSTATUSMSG", function (s, m, st) { tEngine.sinkStatus(m, st); });
                cde.MyCommChannel.RegisterEvent("CDE_LOGIN_EVENT", function (s, l, r, p) { tEngine.sinkLogin(l, r, p); });
                cde.MyCommChannel.RegisterEvent("CDE_INCOMING_MSG", function (s, p) { tEngine.FireIncoming(p); });
                cde.MyCommChannel.RegisterEvent("CDE_SELECT_MESH", function (s, p) { tEngine.RequestSelectMesh(p); });
                cde.MyBaseAssets.MyEngines[cdeNMI.eTheNMIEngine].SendInitialize();
            }
            else {
                tEngine.GetBaseEngine().FireEngineIsReady(true);
            }
        };
        TheNMIService.prototype.sinkStatus = function (pStatus, pLevel) {
            this.mLastStatus = pStatus;
            this.mLastState = pLevel;
            this.FireEvent(true, "CDE_SETSTATUSMSG", pStatus, pLevel);
        };
        TheNMIService.prototype.sinkLogin = function (bIsLoggedIn, pReason, pUserPref) {
            this.FireEvent(true, "CDE_LOGIN_EVENT", bIsLoggedIn, pReason, pUserPref);
        };
        TheNMIService.prototype.RequestEngineStatus = function () {
            this.FireEvent(true, "CDE_SETSTATUSMSG", this.mLastStatus, this.mLastState);
        };
        TheNMIService.prototype.RequestSelectMesh = function (pMeshes) {
            this.FireEvent(true, "CDE_SELECT_MESH", pMeshes);
        };
        TheNMIService.prototype.AddToGlobalScripts = function (pRes) {
            if (!pRes)
                return;
            this.MyGlobalResources.push(pRes);
            if (pRes.Timeout && pRes.Timeout > 0) {
                pRes.TimeoutHandler = setTimeout(function () {
                    pRes.Resource = "TIMEOUT";
                    TheNMIService.FireCallbacks(pRes);
                }, pRes.Timeout);
            }
        };
        TheNMIService.prototype.PublishToNodeGET_NMI_DATA = function (pRes) {
            this.PublishToNMI('NMI_GET_DATA:' + pRes);
        };
        //////////////////////////////////////////////////////////////////////////////
        /// NMI Global Scripts Management
        //////////////////////////////////////////////////////////////////////////////
        TheNMIService.prototype.PublishToNMI = function (pCommand, pPayload, pTargetNode, bNodeIsOwner) {
            if (pTargetNode) {
                if (bNodeIsOwner === true)
                    this.GetBaseEngine().PublishToOwner(pTargetNode, pCommand, pPayload);
                else
                    this.GetBaseEngine().PublishToNode(pTargetNode, pCommand, pPayload);
            }
            else
                this.GetBaseEngine().PublishToService(pCommand, pPayload);
        };
        TheNMIService.prototype.cdeGetScript = function (pScriptName, pCallBack, cookie, pTimeout) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pScriptName)
                return;
            for (var mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pScriptName) {
                    if (this.MyGlobalResources[mh].IsCreated === true && pCallBack)
                        pCallBack(this.MyGlobalResources[mh].Cookie, this.MyGlobalResources[mh].Resource);
                    return;
                }
            }
            if (pCallBack) {
                var t_4 = { ResourceName: pScriptName, CallBacks: [], Cookie: cookie, IsCreated: false, Resource: null, Timeout: pTimeout };
                t_4.CallBacks.push(pCallBack);
                this.AddToGlobalScripts(t_4);
            }
            this.GetBaseEngine().PublishToService("NMI_GET_GLOBAL_SCRIPT", pScriptName);
        };
        TheNMIService.prototype.CreateGlobalScript = function (pScriptName, pScript) {
            var mh = 0;
            for (mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pScriptName) {
                    if (this.MyGlobalResources[mh].IsCreated === true)
                        return false;
                    else {
                        this.MyGlobalResources[mh].IsCreated = true;
                        break;
                    }
                }
            }
            try {
                var s = document.createElement('script');
                var prior = document.getElementsByTagName('script')[0];
                s.type = "text/javascript";
                s.text = pScript.replace(String.fromCharCode(65279), '');
                prior.parentNode.insertBefore(s, prior);
                TheNMIService.FireCallbacks(this.MyGlobalResources[mh]);
            }
            catch (e) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:CreateGlobalScripts", "Script Execution (" + pScriptName + ") failed with " + e + ":" + e.stack);
            }
        };
        TheNMIService.FireCallbacks = function (pNMIRes) {
            if (!pNMIRes)
                return;
            if (pNMIRes.TimeoutHandler && pNMIRes.TimeoutHandler > 0)
                clearTimeout(pNMIRes.TimeoutHandler);
            for (var mh = 0; mh < pNMIRes.CallBacks.length; mh++) {
                if (pNMIRes.CallBacks[mh]) {
                    pNMIRes.CallBacks[mh](pNMIRes.Cookie, pNMIRes.Resource);
                }
            }
        };
        TheNMIService.prototype.cdeGetStyle = function (pResource, pCallBack, cookie, pTimeout) {
            if (pCallBack === void 0) { pCallBack = null; }
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pResource)
                return;
            for (var mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pResource) {
                    if (this.MyGlobalResources[mh].IsCreated === true && pCallBack)
                        pCallBack(this.MyGlobalResources[mh].Cookie, this.MyGlobalResources[mh].Resource);
                    return;
                }
            }
            if (pCallBack) {
                var t_5 = { ResourceName: pResource, CallBacks: [], Cookie: cookie, IsCreated: false, Resource: null, Timeout: pTimeout };
                t_5.CallBacks.push(pCallBack);
                this.AddToGlobalScripts(t_5);
            }
            this.GetBaseEngine().PublishToService("NMI_GET_GLOBAL_STYLE", pResource);
        };
        TheNMIService.prototype.CreateInlineCSS = function (pResName, pResource) {
            var mh = 0;
            for (mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pResName) {
                    if (this.MyGlobalResources[mh].IsCreated === true)
                        return false;
                    else {
                        this.MyGlobalResources[mh].IsCreated = true;
                        break;
                    }
                }
            }
            try {
                var css = document.createElement('style');
                css.type = 'text/css';
                if (css.styleSheet)
                    css.styleSheet.cssText = pResource.replace(String.fromCharCode(65279), '');
                else
                    css.appendChild(document.createTextNode(pResource.replace(String.fromCharCode(65279), '')));
                document.getElementsByTagName("head")[0].appendChild(css);
                TheNMIService.FireCallbacks(this.MyGlobalResources[mh]);
            }
            catch (e) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheNMIService:CreateInlineCSS", "Style Inlining (" + pResName + ") failed with " + e);
            }
        };
        TheNMIService.prototype.cdeGetImage = function (pResource, pCallBack, cookie, pTimeout) {
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pResource)
                return;
            for (var mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pResource) {
                    if (pCallBack) {
                        if (this.MyGlobalResources[mh].IsCreated === true)
                            pCallBack(this.MyGlobalResources[mh].Cookie, this.MyGlobalResources[mh].Resource);
                        else {
                            if (this.MyGlobalResources[mh].Cookie !== cookie)
                                this.MyGlobalResources[mh].CallBacks.push(pCallBack);
                        }
                    }
                    return;
                }
            }
            if (pCallBack) {
                var t_6 = { ResourceName: pResource, CallBacks: [], Cookie: cookie, IsCreated: false, Resource: null, Timeout: pTimeout };
                t_6.CallBacks.push(pCallBack);
                this.AddToGlobalScripts(t_6);
            }
            this.GetBaseEngine().PublishToService("NMI_GET_GLOBAL_IMAGE", pResource);
        };
        TheNMIService.prototype.cdeGetResource = function (pResName, pCallBack, cookie, pTimeout) {
            var _this = this;
            if (cookie === void 0) { cookie = null; }
            if (pTimeout === void 0) { pTimeout = 0; }
            if (!pResName)
                return;
            for (var mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pResName) {
                    var tTryAgain = false;
                    if (pCallBack) {
                        if (this.MyGlobalResources[mh].IsCreated === true)
                            pCallBack(this.MyGlobalResources[mh].Cookie, this.MyGlobalResources[mh].Resource);
                        else {
                            this.MyGlobalResources[mh].CallBacks.push(pCallBack);
                            if (this.MyGlobalResources[mh].Resource === "TIMEOUT") {
                                this.MyGlobalResources[mh].Resource = null;
                                tTryAgain = true;
                            }
                        }
                    }
                    if (!tTryAgain)
                        return;
                }
            }
            if (pCallBack) {
                var t_7 = { ResourceName: pResName, CallBacks: [], Cookie: cookie, IsCreated: false, Resource: null, Timeout: pTimeout };
                t_7.CallBacks.push(pCallBack);
                this.AddToGlobalScripts(t_7);
            }
            if (cde.MyCommChannel) {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsWebHosted === true || !cde.MyCommChannel.IsReady) {
                    cde.MyCommChannel.GetResourceString(pResName, function (pRes, pResData) {
                        _this.ReturnGlobalResource(pRes, pResData);
                    });
                }
                else {
                    this.GetBaseEngine().PublishToService("NMI_GET_GLOBAL_RESOURCE", pResName);
                }
            }
            else
                this.ReturnGlobalResource(pResName, null);
        };
        TheNMIService.prototype.ReturnGlobalResource = function (pResName, pResource) {
            var mh = 0;
            var bFound = false;
            for (mh = 0; mh < this.MyGlobalResources.length; mh++) {
                if (this.MyGlobalResources[mh].ResourceName === pResName) {
                    if (!this.MyGlobalResources[mh].IsCreated) {
                        if (pResource)
                            this.MyGlobalResources[mh].Resource = pResource.replace(String.fromCharCode(65279), '');
                        this.MyGlobalResources[mh].IsCreated = true;
                    }
                    bFound = true;
                    break;
                }
            }
            try {
                if (bFound)
                    TheNMIService.FireCallbacks(this.MyGlobalResources[mh]);
                else
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheNMIService:ReturnGlobalResource", "Resource sent but not found in request table (" + pResName + ")");
            }
            catch (e) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TheNMIService:ReturnGlobalResource", "Resource return (" + pResName + ") failed with " + e);
            }
        };
        TheNMIService.prototype.CheckForUpdates = function () {
            if (cdeNMI.MyToast)
                cdeNMI.MyToast.ShowToastMessage("Checking for update...", "Updates will be visible in the main portal. Touch the home icon to see if you have updates", 10000);
            this.PublishToNMI('NMI_CHECK4_UPDATE');
        };
        TheNMIService.prototype.GetScreenMeta = function (pGuid, pForceLoad) {
            if ((!cdeNMI.MyNMIModels[cde.GuidToString(pGuid)] && !this.MetaRequested[cde.GuidToString(pGuid)]) || pForceLoad) {
                if (pForceLoad) {
                    cdeNMI.MyNMIModels[cde.GuidToString(pGuid)] = null;
                }
                this.PublishToNMI('NMI_GET_SCREENMETA' + (pForceLoad ? 'F' : ''), pGuid); // Guid is Dashboard ID
                this.MetaRequested[cde.GuidToString(pGuid)] = true;
                return true;
            }
            return false;
        };
        TheNMIService.prototype.GetScene = function (sceneID) {
            this.PublishToNMI('NMI_GET_SCENE', sceneID);
        };
        TheNMIService.prototype.IsNodeDown = function (pNodeID) {
            return this.MyKnownNodes[pNodeID] && this.MyKnownNodes[pNodeID].IsDown === true;
        };
        TheNMIService.prototype.GetKnownNodeName = function (pNodeID) {
            if (this.MyKnownNodes[pNodeID])
                return this.MyKnownNodes[pNodeID].NodeName;
            return "";
        };
        TheNMIService.prototype.RegisterKnownNode = function (pNodeID, pNodeName) {
            var tNode = null;
            if (this.MyKnownNodes[pNodeID])
                tNode = this.MyKnownNodes[pNodeID];
            else
                tNode = new cdeNMI.TheNodeInfo();
            tNode.cdeN = pNodeID;
            if (tNode.IsDown === true) {
                tNode.IsDown = false;
                if (cdeNMI.MyScreenManager)
                    cdeNMI.MyScreenManager.UpdateScreenStatus(pNodeID, false);
            }
            tNode.IsDown = false;
            if (!tNode.NodeName)
                tNode.NodeName = pNodeName ? pNodeName : pNodeID;
            if (tNode.NodeName === pNodeID && pNodeName)
                tNode.NodeName = pNodeName;
            tNode.LastPing = (new Date()).getTime();
            this.MyKnownNodes[pNodeID] = tNode;
        };
        TheNMIService.prototype.FireIncoming = function (pProcessMessage) {
            if (!pProcessMessage || !pProcessMessage.Message)
                return;
            if (pProcessMessage.Message.ENG === cdeNMI.eTheNMIEngine) {
                if (!cdeNMI.MyTCF.FireControls(pProcessMessage))
                    this.FireEvent(true, "IncomingMessage", pProcessMessage);
                //return;
            }
            var myNmiIncomingEvent = this.MyNMIIncomingEvents[pProcessMessage.Message.ENG];
            for (var tInfo in myNmiIncomingEvent) {
                //if (myNmiIncomingEvent.hasOwnProperty(tInfo)) {
                var tControl = myNmiIncomingEvent[tInfo];
                if (tControl) {
                    tControl.FireEvent(false, "IncomingMessage", new cde.TheProcessMessage(pProcessMessage.Topic, pProcessMessage.Message));
                }
                //}
            }
        };
        // Message Handler for C-DEngine Messages
        TheNMIService.prototype.OnHandleMessage = function (pProcessMessage) {
            var pMSG = pProcessMessage.Message;
            if (!pMSG)
                return;
            if (!this.AreEnginesRequested && cde.MyBaseAssets.MyCommStatus.IsUserLoggedIn) {
                this.AreEnginesRequested = true;
                this.PublishToNMI("NMI_GET_ENGINEJS");
            }
            this.RegisterKnownNode(cde.TSM.GetOriginator(pMSG));
            if (_super.prototype.BaseOnHandleMessage.call(this, pProcessMessage)) {
                if (cdeNMI.MyScreenManager) {
                    cdeNMI.MyScreenManager.ShowView();
                }
                return;
            }
            var tCmd = pMSG.TXT.split(':');
            switch (tCmd[0]) {
                case "NMI_GLOBAL_IMAGE":
                    if (pMSG.PLS && tCmd.length > 1) {
                        this.ReturnGlobalResource(tCmd[1], pMSG.PLS);
                    }
                    break;
                case "NMI_GLOBAL_RESOURCE":
                    if (pMSG.PLS && tCmd.length > 1) {
                        this.ReturnGlobalResource(tCmd[1], pMSG.PLS);
                    }
                    break;
                case "NMI_GLOBAL_SCRIPT":
                    if (pMSG.PLS && tCmd.length > 1) {
                        this.CreateGlobalScript(tCmd[1], pMSG.PLS);
                    }
                    break;
                case "NMI_GLOBAL_STYLE":
                    if (pMSG.PLS && tCmd.length > 1) {
                        this.CreateInlineCSS(tCmd[1], pMSG.PLS);
                    }
                    break;
                default:
                    return;
            }
            if (cdeNMI.MyScreenManager) {
                cdeNMI.MyScreenManager.ShowView();
            }
        };
        TheNMIService.prototype.sinkScopeIDSet = function () {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
        };
        return TheNMIService;
    }(cdeNMI.TheNMIServiceBase));
    cdeNMI.TheNMIService = TheNMIService;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: Copyright (C) 2007-2012, Jacob O. Wobbrock, Andrew D. Wilson and Yang Li.
//
// SPDX-License-Identifier: BSD-3-Clause
//
//Author:
//      original code see below
//      ported to TypeScript and adopted by Chris Muench
//Language:
//      translated for NMI - verified
//      MyLogger events - must be translated in Log Receiver if required
//CSS Styles: none
//Dependencies:
//      cdeCore
//      cdeNMIModel
//      cdeNMIBaseControl
//Version History
//      4.109: Initial Drop
/**
* The $1 Unistroke Recognizer (JavaScript version)
*
*	Jacob O. Wobbrock, Ph.D.
* 	The Information School
*	University of Washington
*	Seattle, WA 98195-2840
*	wobbrock@uw.edu
*
*	Andrew D. Wilson, Ph.D.
*	Microsoft Research
*	One Microsoft Way
*	Redmond, WA 98052
*	awilson@microsoft.com
*
*	Yang Li, Ph.D.
*	Department of Computer Science and Engineering
* 	University of Washington
*	Seattle, WA 98195-2840
* 	yangli@cs.washington.edu
*
*
* The academic publication for the $1 recognizer, and what should be
* used to cite it, is:
*
*  Wobbrock, J.O., Wilson, A.D. and Li, Y. (2007). Gestures without
*	   libraries, toolkits or training: A $1 recognizer for user interface
*	   prototypes. Proceedings of the ACM Symposium on User Interface
*	   Software and Technology (UIST '07). Newport, Rhode Island (October
*	   7-10, 2007). New York: ACM Press, pp. 159-168.
*
* The Protractor enhancement was separately published by Yang Li and programmed
* here by Jacob O. Wobbrock:
*
*  Li, Y. (2010). Protractor: A fast and accurate gesture
*	  recognizer. Proceedings of the ACM Conference on Human
*	  Factors in Computing Systems (CHI '10). Atlanta, Georgia
*	  (April 10-15, 2010). New York: ACM Press, pp. 2169-2172.
*
* This software is distributed under the "New BSD License" agreement:
*
* Copyright (C) 2007-2012, Jacob O. Wobbrock, Andrew D. Wilson and Yang Li.
* All rights reserved. Last updated July 14, 2018.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*    * Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*    * Neither the names of the University of Washington nor Microsoft,
*      nor the names of its contributors may be used to endorse or promote
*      products derived from this software without specific prior written
*      permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Jacob O. Wobbrock OR Andrew D. Wilson
* OR Yang Li BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
var cdeNMI;
// SPDX-FileCopyrightText: Copyright (C) 2007-2012, Jacob O. Wobbrock, Andrew D. Wilson and Yang Li.
//
// SPDX-License-Identifier: BSD-3-Clause
//
//Author:
//      original code see below
//      ported to TypeScript and adopted by Chris Muench
//Language:
//      translated for NMI - verified
//      MyLogger events - must be translated in Log Receiver if required
//CSS Styles: none
//Dependencies:
//      cdeCore
//      cdeNMIModel
//      cdeNMIBaseControl
//Version History
//      4.109: Initial Drop
/**
* The $1 Unistroke Recognizer (JavaScript version)
*
*	Jacob O. Wobbrock, Ph.D.
* 	The Information School
*	University of Washington
*	Seattle, WA 98195-2840
*	wobbrock@uw.edu
*
*	Andrew D. Wilson, Ph.D.
*	Microsoft Research
*	One Microsoft Way
*	Redmond, WA 98052
*	awilson@microsoft.com
*
*	Yang Li, Ph.D.
*	Department of Computer Science and Engineering
* 	University of Washington
*	Seattle, WA 98195-2840
* 	yangli@cs.washington.edu
*
*
* The academic publication for the $1 recognizer, and what should be
* used to cite it, is:
*
*  Wobbrock, J.O., Wilson, A.D. and Li, Y. (2007). Gestures without
*	   libraries, toolkits or training: A $1 recognizer for user interface
*	   prototypes. Proceedings of the ACM Symposium on User Interface
*	   Software and Technology (UIST '07). Newport, Rhode Island (October
*	   7-10, 2007). New York: ACM Press, pp. 159-168.
*
* The Protractor enhancement was separately published by Yang Li and programmed
* here by Jacob O. Wobbrock:
*
*  Li, Y. (2010). Protractor: A fast and accurate gesture
*	  recognizer. Proceedings of the ACM Conference on Human
*	  Factors in Computing Systems (CHI '10). Atlanta, Georgia
*	  (April 10-15, 2010). New York: ACM Press, pp. 2169-2172.
*
* This software is distributed under the "New BSD License" agreement:
*
* Copyright (C) 2007-2012, Jacob O. Wobbrock, Andrew D. Wilson and Yang Li.
* All rights reserved. Last updated July 14, 2018.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*    * Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*    * Neither the names of the University of Washington nor Microsoft,
*      nor the names of its contributors may be used to endorse or promote
*      products derived from this software without specific prior written
*      permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Jacob O. Wobbrock OR Andrew D. Wilson
* OR Yang Li BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/
(function (cdeNMI) {
    //
    // Rectangle class
    //
    var TheRectangle = /** @class */ (function () {
        function TheRectangle(x, y, width, height) {
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
        }
        return TheRectangle;
    }());
    cdeNMI.TheRectangle = TheRectangle;
    //
    // Unistroke class: a unistroke template
    //
    var Unistroke = /** @class */ (function () {
        function Unistroke(pSR, name, points) {
            this.Name = name;
            this.Points = pSR.Resample(points, pSR.NumPoints);
            var radians = pSR.IndicativeAngle(this.Points);
            this.Points = pSR.RotateBy(this.Points, -radians);
            this.Points = pSR.ScaleTo(this.Points, pSR.SquareSize);
            this.Points = pSR.TranslateTo(this.Points, pSR.Origin);
            this.Vector = pSR.Vectorize(this.Points); // for Protractor
        }
        return Unistroke;
    }());
    cdeNMI.Unistroke = Unistroke;
    //
    // Result class
    //
    var TheRecognizerResult = /** @class */ (function () {
        function TheRecognizerResult(name, score, ms) {
            this.Name = name;
            this.Score = score;
            this.Time = ms;
        }
        return TheRecognizerResult;
    }());
    cdeNMI.TheRecognizerResult = TheRecognizerResult;
    //
    // DollarRecognizer class
    //
    var TheShapeRecognizer = /** @class */ (function (_super) {
        __extends(TheShapeRecognizer, _super);
        function TheShapeRecognizer() {
            var _this = _super.call(this) || this;
            _this.NumUnistrokes = 16;
            _this.NumPoints = 64;
            _this.SquareSize = 250.0;
            _this.Origin = new cdeNMI.TheDrawingPoint(0, 0);
            _this.Diagonal = Math.sqrt(_this.SquareSize * _this.SquareSize + _this.SquareSize * _this.SquareSize);
            _this.HalfDiagonal = 0.5 * _this.Diagonal;
            _this.AngleRange = _this.Deg2Rad(45.0);
            _this.AnglePrecision = _this.Deg2Rad(2.0);
            _this.Phi = 0.5 * (-1.0 + Math.sqrt(5.0)); // Golden Ratio
            _this.MyBaseType = cdeNMI.cdeControlType.ShapeRecognizer;
            //
            // one built-in unistroke per gesture type
            //
            _this.Unistrokes = new Array(_this.NumUnistrokes);
            _this.Unistrokes[0] = new Unistroke(_this, "triangle", [new cdeNMI.TheDrawingPoint(137, 139), new cdeNMI.TheDrawingPoint(135, 141), new cdeNMI.TheDrawingPoint(133, 144), new cdeNMI.TheDrawingPoint(132, 146), new cdeNMI.TheDrawingPoint(130, 149), new cdeNMI.TheDrawingPoint(128, 151), new cdeNMI.TheDrawingPoint(126, 155), new cdeNMI.TheDrawingPoint(123, 160), new cdeNMI.TheDrawingPoint(120, 166), new cdeNMI.TheDrawingPoint(116, 171), new cdeNMI.TheDrawingPoint(112, 177), new cdeNMI.TheDrawingPoint(107, 183), new cdeNMI.TheDrawingPoint(102, 188), new cdeNMI.TheDrawingPoint(100, 191), new cdeNMI.TheDrawingPoint(95, 195), new cdeNMI.TheDrawingPoint(90, 199), new cdeNMI.TheDrawingPoint(86, 203), new cdeNMI.TheDrawingPoint(82, 206), new cdeNMI.TheDrawingPoint(80, 209), new cdeNMI.TheDrawingPoint(75, 213), new cdeNMI.TheDrawingPoint(73, 213), new cdeNMI.TheDrawingPoint(70, 216), new cdeNMI.TheDrawingPoint(67, 219), new cdeNMI.TheDrawingPoint(64, 221), new cdeNMI.TheDrawingPoint(61, 223), new cdeNMI.TheDrawingPoint(60, 225), new cdeNMI.TheDrawingPoint(62, 226), new cdeNMI.TheDrawingPoint(65, 225), new cdeNMI.TheDrawingPoint(67, 226), new cdeNMI.TheDrawingPoint(74, 226), new cdeNMI.TheDrawingPoint(77, 227), new cdeNMI.TheDrawingPoint(85, 229), new cdeNMI.TheDrawingPoint(91, 230), new cdeNMI.TheDrawingPoint(99, 231), new cdeNMI.TheDrawingPoint(108, 232), new cdeNMI.TheDrawingPoint(116, 233), new cdeNMI.TheDrawingPoint(125, 233), new cdeNMI.TheDrawingPoint(134, 234), new cdeNMI.TheDrawingPoint(145, 233), new cdeNMI.TheDrawingPoint(153, 232), new cdeNMI.TheDrawingPoint(160, 233), new cdeNMI.TheDrawingPoint(170, 234), new cdeNMI.TheDrawingPoint(177, 235), new cdeNMI.TheDrawingPoint(179, 236), new cdeNMI.TheDrawingPoint(186, 237), new cdeNMI.TheDrawingPoint(193, 238), new cdeNMI.TheDrawingPoint(198, 239), new cdeNMI.TheDrawingPoint(200, 237), new cdeNMI.TheDrawingPoint(202, 239), new cdeNMI.TheDrawingPoint(204, 238), new cdeNMI.TheDrawingPoint(206, 234), new cdeNMI.TheDrawingPoint(205, 230), new cdeNMI.TheDrawingPoint(202, 222), new cdeNMI.TheDrawingPoint(197, 216), new cdeNMI.TheDrawingPoint(192, 207), new cdeNMI.TheDrawingPoint(186, 198), new cdeNMI.TheDrawingPoint(179, 189), new cdeNMI.TheDrawingPoint(174, 183), new cdeNMI.TheDrawingPoint(170, 178), new cdeNMI.TheDrawingPoint(164, 171), new cdeNMI.TheDrawingPoint(161, 168), new cdeNMI.TheDrawingPoint(154, 160), new cdeNMI.TheDrawingPoint(148, 155), new cdeNMI.TheDrawingPoint(143, 150), new cdeNMI.TheDrawingPoint(138, 148), new cdeNMI.TheDrawingPoint(136, 148)]);
            _this.Unistrokes[1] = new Unistroke(_this, "x", [new cdeNMI.TheDrawingPoint(87, 142), new cdeNMI.TheDrawingPoint(89, 145), new cdeNMI.TheDrawingPoint(91, 148), new cdeNMI.TheDrawingPoint(93, 151), new cdeNMI.TheDrawingPoint(96, 155), new cdeNMI.TheDrawingPoint(98, 157), new cdeNMI.TheDrawingPoint(100, 160), new cdeNMI.TheDrawingPoint(102, 162), new cdeNMI.TheDrawingPoint(106, 167), new cdeNMI.TheDrawingPoint(108, 169), new cdeNMI.TheDrawingPoint(110, 171), new cdeNMI.TheDrawingPoint(115, 177), new cdeNMI.TheDrawingPoint(119, 183), new cdeNMI.TheDrawingPoint(123, 189), new cdeNMI.TheDrawingPoint(127, 193), new cdeNMI.TheDrawingPoint(129, 196), new cdeNMI.TheDrawingPoint(133, 200), new cdeNMI.TheDrawingPoint(137, 206), new cdeNMI.TheDrawingPoint(140, 209), new cdeNMI.TheDrawingPoint(143, 212), new cdeNMI.TheDrawingPoint(146, 215), new cdeNMI.TheDrawingPoint(151, 220), new cdeNMI.TheDrawingPoint(153, 222), new cdeNMI.TheDrawingPoint(155, 223), new cdeNMI.TheDrawingPoint(157, 225), new cdeNMI.TheDrawingPoint(158, 223), new cdeNMI.TheDrawingPoint(157, 218), new cdeNMI.TheDrawingPoint(155, 211), new cdeNMI.TheDrawingPoint(154, 208), new cdeNMI.TheDrawingPoint(152, 200), new cdeNMI.TheDrawingPoint(150, 189), new cdeNMI.TheDrawingPoint(148, 179), new cdeNMI.TheDrawingPoint(147, 170), new cdeNMI.TheDrawingPoint(147, 158), new cdeNMI.TheDrawingPoint(147, 148), new cdeNMI.TheDrawingPoint(147, 141), new cdeNMI.TheDrawingPoint(147, 136), new cdeNMI.TheDrawingPoint(144, 135), new cdeNMI.TheDrawingPoint(142, 137), new cdeNMI.TheDrawingPoint(140, 139), new cdeNMI.TheDrawingPoint(135, 145), new cdeNMI.TheDrawingPoint(131, 152), new cdeNMI.TheDrawingPoint(124, 163), new cdeNMI.TheDrawingPoint(116, 177), new cdeNMI.TheDrawingPoint(108, 191), new cdeNMI.TheDrawingPoint(100, 206), new cdeNMI.TheDrawingPoint(94, 217), new cdeNMI.TheDrawingPoint(91, 222), new cdeNMI.TheDrawingPoint(89, 225), new cdeNMI.TheDrawingPoint(87, 226), new cdeNMI.TheDrawingPoint(87, 224)]);
            _this.Unistrokes[2] = new Unistroke(_this, "rectangle", [new cdeNMI.TheDrawingPoint(78, 149), new cdeNMI.TheDrawingPoint(78, 153), new cdeNMI.TheDrawingPoint(78, 157), new cdeNMI.TheDrawingPoint(78, 160), new cdeNMI.TheDrawingPoint(79, 162), new cdeNMI.TheDrawingPoint(79, 164), new cdeNMI.TheDrawingPoint(79, 167), new cdeNMI.TheDrawingPoint(79, 169), new cdeNMI.TheDrawingPoint(79, 173), new cdeNMI.TheDrawingPoint(79, 178), new cdeNMI.TheDrawingPoint(79, 183), new cdeNMI.TheDrawingPoint(80, 189), new cdeNMI.TheDrawingPoint(80, 193), new cdeNMI.TheDrawingPoint(80, 198), new cdeNMI.TheDrawingPoint(80, 202), new cdeNMI.TheDrawingPoint(81, 208), new cdeNMI.TheDrawingPoint(81, 210), new cdeNMI.TheDrawingPoint(81, 216), new cdeNMI.TheDrawingPoint(82, 222), new cdeNMI.TheDrawingPoint(82, 224), new cdeNMI.TheDrawingPoint(82, 227), new cdeNMI.TheDrawingPoint(83, 229), new cdeNMI.TheDrawingPoint(83, 231), new cdeNMI.TheDrawingPoint(85, 230), new cdeNMI.TheDrawingPoint(88, 232), new cdeNMI.TheDrawingPoint(90, 233), new cdeNMI.TheDrawingPoint(92, 232), new cdeNMI.TheDrawingPoint(94, 233), new cdeNMI.TheDrawingPoint(99, 232), new cdeNMI.TheDrawingPoint(102, 233), new cdeNMI.TheDrawingPoint(106, 233), new cdeNMI.TheDrawingPoint(109, 234), new cdeNMI.TheDrawingPoint(117, 235), new cdeNMI.TheDrawingPoint(123, 236), new cdeNMI.TheDrawingPoint(126, 236), new cdeNMI.TheDrawingPoint(135, 237), new cdeNMI.TheDrawingPoint(142, 238), new cdeNMI.TheDrawingPoint(145, 238), new cdeNMI.TheDrawingPoint(152, 238), new cdeNMI.TheDrawingPoint(154, 239), new cdeNMI.TheDrawingPoint(165, 238), new cdeNMI.TheDrawingPoint(174, 237), new cdeNMI.TheDrawingPoint(179, 236), new cdeNMI.TheDrawingPoint(186, 235), new cdeNMI.TheDrawingPoint(191, 235), new cdeNMI.TheDrawingPoint(195, 233), new cdeNMI.TheDrawingPoint(197, 233), new cdeNMI.TheDrawingPoint(200, 233), new cdeNMI.TheDrawingPoint(201, 235), new cdeNMI.TheDrawingPoint(201, 233), new cdeNMI.TheDrawingPoint(199, 231), new cdeNMI.TheDrawingPoint(198, 226), new cdeNMI.TheDrawingPoint(198, 220), new cdeNMI.TheDrawingPoint(196, 207), new cdeNMI.TheDrawingPoint(195, 195), new cdeNMI.TheDrawingPoint(195, 181), new cdeNMI.TheDrawingPoint(195, 173), new cdeNMI.TheDrawingPoint(195, 163), new cdeNMI.TheDrawingPoint(194, 155), new cdeNMI.TheDrawingPoint(192, 145), new cdeNMI.TheDrawingPoint(192, 143), new cdeNMI.TheDrawingPoint(192, 138), new cdeNMI.TheDrawingPoint(191, 135), new cdeNMI.TheDrawingPoint(191, 133), new cdeNMI.TheDrawingPoint(191, 130), new cdeNMI.TheDrawingPoint(190, 128), new cdeNMI.TheDrawingPoint(188, 129), new cdeNMI.TheDrawingPoint(186, 129), new cdeNMI.TheDrawingPoint(181, 132), new cdeNMI.TheDrawingPoint(173, 131), new cdeNMI.TheDrawingPoint(162, 131), new cdeNMI.TheDrawingPoint(151, 132), new cdeNMI.TheDrawingPoint(149, 132), new cdeNMI.TheDrawingPoint(138, 132), new cdeNMI.TheDrawingPoint(136, 132), new cdeNMI.TheDrawingPoint(122, 131), new cdeNMI.TheDrawingPoint(120, 131), new cdeNMI.TheDrawingPoint(109, 130), new cdeNMI.TheDrawingPoint(107, 130), new cdeNMI.TheDrawingPoint(90, 132), new cdeNMI.TheDrawingPoint(81, 133), new cdeNMI.TheDrawingPoint(76, 133)]);
            _this.Unistrokes[3] = new Unistroke(_this, "circle", [new cdeNMI.TheDrawingPoint(127, 141), new cdeNMI.TheDrawingPoint(124, 140), new cdeNMI.TheDrawingPoint(120, 139), new cdeNMI.TheDrawingPoint(118, 139), new cdeNMI.TheDrawingPoint(116, 139), new cdeNMI.TheDrawingPoint(111, 140), new cdeNMI.TheDrawingPoint(109, 141), new cdeNMI.TheDrawingPoint(104, 144), new cdeNMI.TheDrawingPoint(100, 147), new cdeNMI.TheDrawingPoint(96, 152), new cdeNMI.TheDrawingPoint(93, 157), new cdeNMI.TheDrawingPoint(90, 163), new cdeNMI.TheDrawingPoint(87, 169), new cdeNMI.TheDrawingPoint(85, 175), new cdeNMI.TheDrawingPoint(83, 181), new cdeNMI.TheDrawingPoint(82, 190), new cdeNMI.TheDrawingPoint(82, 195), new cdeNMI.TheDrawingPoint(83, 200), new cdeNMI.TheDrawingPoint(84, 205), new cdeNMI.TheDrawingPoint(88, 213), new cdeNMI.TheDrawingPoint(91, 216), new cdeNMI.TheDrawingPoint(96, 219), new cdeNMI.TheDrawingPoint(103, 222), new cdeNMI.TheDrawingPoint(108, 224), new cdeNMI.TheDrawingPoint(111, 224), new cdeNMI.TheDrawingPoint(120, 224), new cdeNMI.TheDrawingPoint(133, 223), new cdeNMI.TheDrawingPoint(142, 222), new cdeNMI.TheDrawingPoint(152, 218), new cdeNMI.TheDrawingPoint(160, 214), new cdeNMI.TheDrawingPoint(167, 210), new cdeNMI.TheDrawingPoint(173, 204), new cdeNMI.TheDrawingPoint(178, 198), new cdeNMI.TheDrawingPoint(179, 196), new cdeNMI.TheDrawingPoint(182, 188), new cdeNMI.TheDrawingPoint(182, 177), new cdeNMI.TheDrawingPoint(178, 167), new cdeNMI.TheDrawingPoint(170, 150), new cdeNMI.TheDrawingPoint(163, 138), new cdeNMI.TheDrawingPoint(152, 130), new cdeNMI.TheDrawingPoint(143, 129), new cdeNMI.TheDrawingPoint(140, 131), new cdeNMI.TheDrawingPoint(129, 136), new cdeNMI.TheDrawingPoint(126, 139)]);
            _this.Unistrokes[4] = new Unistroke(_this, "check", [new cdeNMI.TheDrawingPoint(91, 185), new cdeNMI.TheDrawingPoint(93, 185), new cdeNMI.TheDrawingPoint(95, 185), new cdeNMI.TheDrawingPoint(97, 185), new cdeNMI.TheDrawingPoint(100, 188), new cdeNMI.TheDrawingPoint(102, 189), new cdeNMI.TheDrawingPoint(104, 190), new cdeNMI.TheDrawingPoint(106, 193), new cdeNMI.TheDrawingPoint(108, 195), new cdeNMI.TheDrawingPoint(110, 198), new cdeNMI.TheDrawingPoint(112, 201), new cdeNMI.TheDrawingPoint(114, 204), new cdeNMI.TheDrawingPoint(115, 207), new cdeNMI.TheDrawingPoint(117, 210), new cdeNMI.TheDrawingPoint(118, 212), new cdeNMI.TheDrawingPoint(120, 214), new cdeNMI.TheDrawingPoint(121, 217), new cdeNMI.TheDrawingPoint(122, 219), new cdeNMI.TheDrawingPoint(123, 222), new cdeNMI.TheDrawingPoint(124, 224), new cdeNMI.TheDrawingPoint(126, 226), new cdeNMI.TheDrawingPoint(127, 229), new cdeNMI.TheDrawingPoint(129, 231), new cdeNMI.TheDrawingPoint(130, 233), new cdeNMI.TheDrawingPoint(129, 231), new cdeNMI.TheDrawingPoint(129, 228), new cdeNMI.TheDrawingPoint(129, 226), new cdeNMI.TheDrawingPoint(129, 224), new cdeNMI.TheDrawingPoint(129, 221), new cdeNMI.TheDrawingPoint(129, 218), new cdeNMI.TheDrawingPoint(129, 212), new cdeNMI.TheDrawingPoint(129, 208), new cdeNMI.TheDrawingPoint(130, 198), new cdeNMI.TheDrawingPoint(132, 189), new cdeNMI.TheDrawingPoint(134, 182), new cdeNMI.TheDrawingPoint(137, 173), new cdeNMI.TheDrawingPoint(143, 164), new cdeNMI.TheDrawingPoint(147, 157), new cdeNMI.TheDrawingPoint(151, 151), new cdeNMI.TheDrawingPoint(155, 144), new cdeNMI.TheDrawingPoint(161, 137), new cdeNMI.TheDrawingPoint(165, 131), new cdeNMI.TheDrawingPoint(171, 122), new cdeNMI.TheDrawingPoint(174, 118), new cdeNMI.TheDrawingPoint(176, 114), new cdeNMI.TheDrawingPoint(177, 112), new cdeNMI.TheDrawingPoint(177, 114), new cdeNMI.TheDrawingPoint(175, 116), new cdeNMI.TheDrawingPoint(173, 118)]);
            _this.Unistrokes[5] = new Unistroke(_this, "caret", [new cdeNMI.TheDrawingPoint(79, 245), new cdeNMI.TheDrawingPoint(79, 242), new cdeNMI.TheDrawingPoint(79, 239), new cdeNMI.TheDrawingPoint(80, 237), new cdeNMI.TheDrawingPoint(80, 234), new cdeNMI.TheDrawingPoint(81, 232), new cdeNMI.TheDrawingPoint(82, 230), new cdeNMI.TheDrawingPoint(84, 224), new cdeNMI.TheDrawingPoint(86, 220), new cdeNMI.TheDrawingPoint(86, 218), new cdeNMI.TheDrawingPoint(87, 216), new cdeNMI.TheDrawingPoint(88, 213), new cdeNMI.TheDrawingPoint(90, 207), new cdeNMI.TheDrawingPoint(91, 202), new cdeNMI.TheDrawingPoint(92, 200), new cdeNMI.TheDrawingPoint(93, 194), new cdeNMI.TheDrawingPoint(94, 192), new cdeNMI.TheDrawingPoint(96, 189), new cdeNMI.TheDrawingPoint(97, 186), new cdeNMI.TheDrawingPoint(100, 179), new cdeNMI.TheDrawingPoint(102, 173), new cdeNMI.TheDrawingPoint(105, 165), new cdeNMI.TheDrawingPoint(107, 160), new cdeNMI.TheDrawingPoint(109, 158), new cdeNMI.TheDrawingPoint(112, 151), new cdeNMI.TheDrawingPoint(115, 144), new cdeNMI.TheDrawingPoint(117, 139), new cdeNMI.TheDrawingPoint(119, 136), new cdeNMI.TheDrawingPoint(119, 134), new cdeNMI.TheDrawingPoint(120, 132), new cdeNMI.TheDrawingPoint(121, 129), new cdeNMI.TheDrawingPoint(122, 127), new cdeNMI.TheDrawingPoint(124, 125), new cdeNMI.TheDrawingPoint(126, 124), new cdeNMI.TheDrawingPoint(129, 125), new cdeNMI.TheDrawingPoint(131, 127), new cdeNMI.TheDrawingPoint(132, 130), new cdeNMI.TheDrawingPoint(136, 139), new cdeNMI.TheDrawingPoint(141, 154), new cdeNMI.TheDrawingPoint(145, 166), new cdeNMI.TheDrawingPoint(151, 182), new cdeNMI.TheDrawingPoint(156, 193), new cdeNMI.TheDrawingPoint(157, 196), new cdeNMI.TheDrawingPoint(161, 209), new cdeNMI.TheDrawingPoint(162, 211), new cdeNMI.TheDrawingPoint(167, 223), new cdeNMI.TheDrawingPoint(169, 229), new cdeNMI.TheDrawingPoint(170, 231), new cdeNMI.TheDrawingPoint(173, 237), new cdeNMI.TheDrawingPoint(176, 242), new cdeNMI.TheDrawingPoint(177, 244), new cdeNMI.TheDrawingPoint(179, 250), new cdeNMI.TheDrawingPoint(181, 255), new cdeNMI.TheDrawingPoint(182, 257)]);
            _this.Unistrokes[6] = new Unistroke(_this, "zig-zag", [new cdeNMI.TheDrawingPoint(307, 216), new cdeNMI.TheDrawingPoint(333, 186), new cdeNMI.TheDrawingPoint(356, 215), new cdeNMI.TheDrawingPoint(375, 186), new cdeNMI.TheDrawingPoint(399, 216), new cdeNMI.TheDrawingPoint(418, 186)]);
            _this.Unistrokes[7] = new Unistroke(_this, "arrow", [new cdeNMI.TheDrawingPoint(68, 222), new cdeNMI.TheDrawingPoint(70, 220), new cdeNMI.TheDrawingPoint(73, 218), new cdeNMI.TheDrawingPoint(75, 217), new cdeNMI.TheDrawingPoint(77, 215), new cdeNMI.TheDrawingPoint(80, 213), new cdeNMI.TheDrawingPoint(82, 212), new cdeNMI.TheDrawingPoint(84, 210), new cdeNMI.TheDrawingPoint(87, 209), new cdeNMI.TheDrawingPoint(89, 208), new cdeNMI.TheDrawingPoint(92, 206), new cdeNMI.TheDrawingPoint(95, 204), new cdeNMI.TheDrawingPoint(101, 201), new cdeNMI.TheDrawingPoint(106, 198), new cdeNMI.TheDrawingPoint(112, 194), new cdeNMI.TheDrawingPoint(118, 191), new cdeNMI.TheDrawingPoint(124, 187), new cdeNMI.TheDrawingPoint(127, 186), new cdeNMI.TheDrawingPoint(132, 183), new cdeNMI.TheDrawingPoint(138, 181), new cdeNMI.TheDrawingPoint(141, 180), new cdeNMI.TheDrawingPoint(146, 178), new cdeNMI.TheDrawingPoint(154, 173), new cdeNMI.TheDrawingPoint(159, 171), new cdeNMI.TheDrawingPoint(161, 170), new cdeNMI.TheDrawingPoint(166, 167), new cdeNMI.TheDrawingPoint(168, 167), new cdeNMI.TheDrawingPoint(171, 166), new cdeNMI.TheDrawingPoint(174, 164), new cdeNMI.TheDrawingPoint(177, 162), new cdeNMI.TheDrawingPoint(180, 160), new cdeNMI.TheDrawingPoint(182, 158), new cdeNMI.TheDrawingPoint(183, 156), new cdeNMI.TheDrawingPoint(181, 154), new cdeNMI.TheDrawingPoint(178, 153), new cdeNMI.TheDrawingPoint(171, 153), new cdeNMI.TheDrawingPoint(164, 153), new cdeNMI.TheDrawingPoint(160, 153), new cdeNMI.TheDrawingPoint(150, 154), new cdeNMI.TheDrawingPoint(147, 155), new cdeNMI.TheDrawingPoint(141, 157), new cdeNMI.TheDrawingPoint(137, 158), new cdeNMI.TheDrawingPoint(135, 158), new cdeNMI.TheDrawingPoint(137, 158), new cdeNMI.TheDrawingPoint(140, 157), new cdeNMI.TheDrawingPoint(143, 156), new cdeNMI.TheDrawingPoint(151, 154), new cdeNMI.TheDrawingPoint(160, 152), new cdeNMI.TheDrawingPoint(170, 149), new cdeNMI.TheDrawingPoint(179, 147), new cdeNMI.TheDrawingPoint(185, 145), new cdeNMI.TheDrawingPoint(192, 144), new cdeNMI.TheDrawingPoint(196, 144), new cdeNMI.TheDrawingPoint(198, 144), new cdeNMI.TheDrawingPoint(200, 144), new cdeNMI.TheDrawingPoint(201, 147), new cdeNMI.TheDrawingPoint(199, 149), new cdeNMI.TheDrawingPoint(194, 157), new cdeNMI.TheDrawingPoint(191, 160), new cdeNMI.TheDrawingPoint(186, 167), new cdeNMI.TheDrawingPoint(180, 176), new cdeNMI.TheDrawingPoint(177, 179), new cdeNMI.TheDrawingPoint(171, 187), new cdeNMI.TheDrawingPoint(169, 189), new cdeNMI.TheDrawingPoint(165, 194), new cdeNMI.TheDrawingPoint(164, 196)]);
            _this.Unistrokes[8] = new Unistroke(_this, "left square bracket", [new cdeNMI.TheDrawingPoint(140, 124), new cdeNMI.TheDrawingPoint(138, 123), new cdeNMI.TheDrawingPoint(135, 122), new cdeNMI.TheDrawingPoint(133, 123), new cdeNMI.TheDrawingPoint(130, 123), new cdeNMI.TheDrawingPoint(128, 124), new cdeNMI.TheDrawingPoint(125, 125), new cdeNMI.TheDrawingPoint(122, 124), new cdeNMI.TheDrawingPoint(120, 124), new cdeNMI.TheDrawingPoint(118, 124), new cdeNMI.TheDrawingPoint(116, 125), new cdeNMI.TheDrawingPoint(113, 125), new cdeNMI.TheDrawingPoint(111, 125), new cdeNMI.TheDrawingPoint(108, 124), new cdeNMI.TheDrawingPoint(106, 125), new cdeNMI.TheDrawingPoint(104, 125), new cdeNMI.TheDrawingPoint(102, 124), new cdeNMI.TheDrawingPoint(100, 123), new cdeNMI.TheDrawingPoint(98, 123), new cdeNMI.TheDrawingPoint(95, 124), new cdeNMI.TheDrawingPoint(93, 123), new cdeNMI.TheDrawingPoint(90, 124), new cdeNMI.TheDrawingPoint(88, 124), new cdeNMI.TheDrawingPoint(85, 125), new cdeNMI.TheDrawingPoint(83, 126), new cdeNMI.TheDrawingPoint(81, 127), new cdeNMI.TheDrawingPoint(81, 129), new cdeNMI.TheDrawingPoint(82, 131), new cdeNMI.TheDrawingPoint(82, 134), new cdeNMI.TheDrawingPoint(83, 138), new cdeNMI.TheDrawingPoint(84, 141), new cdeNMI.TheDrawingPoint(84, 144), new cdeNMI.TheDrawingPoint(85, 148), new cdeNMI.TheDrawingPoint(85, 151), new cdeNMI.TheDrawingPoint(86, 156), new cdeNMI.TheDrawingPoint(86, 160), new cdeNMI.TheDrawingPoint(86, 164), new cdeNMI.TheDrawingPoint(86, 168), new cdeNMI.TheDrawingPoint(87, 171), new cdeNMI.TheDrawingPoint(87, 175), new cdeNMI.TheDrawingPoint(87, 179), new cdeNMI.TheDrawingPoint(87, 182), new cdeNMI.TheDrawingPoint(87, 186), new cdeNMI.TheDrawingPoint(88, 188), new cdeNMI.TheDrawingPoint(88, 195), new cdeNMI.TheDrawingPoint(88, 198), new cdeNMI.TheDrawingPoint(88, 201), new cdeNMI.TheDrawingPoint(88, 207), new cdeNMI.TheDrawingPoint(89, 211), new cdeNMI.TheDrawingPoint(89, 213), new cdeNMI.TheDrawingPoint(89, 217), new cdeNMI.TheDrawingPoint(89, 222), new cdeNMI.TheDrawingPoint(88, 225), new cdeNMI.TheDrawingPoint(88, 229), new cdeNMI.TheDrawingPoint(88, 231), new cdeNMI.TheDrawingPoint(88, 233), new cdeNMI.TheDrawingPoint(88, 235), new cdeNMI.TheDrawingPoint(89, 237), new cdeNMI.TheDrawingPoint(89, 240), new cdeNMI.TheDrawingPoint(89, 242), new cdeNMI.TheDrawingPoint(91, 241), new cdeNMI.TheDrawingPoint(94, 241), new cdeNMI.TheDrawingPoint(96, 240), new cdeNMI.TheDrawingPoint(98, 239), new cdeNMI.TheDrawingPoint(105, 240), new cdeNMI.TheDrawingPoint(109, 240), new cdeNMI.TheDrawingPoint(113, 239), new cdeNMI.TheDrawingPoint(116, 240), new cdeNMI.TheDrawingPoint(121, 239), new cdeNMI.TheDrawingPoint(130, 240), new cdeNMI.TheDrawingPoint(136, 237), new cdeNMI.TheDrawingPoint(139, 237), new cdeNMI.TheDrawingPoint(144, 238), new cdeNMI.TheDrawingPoint(151, 237), new cdeNMI.TheDrawingPoint(157, 236), new cdeNMI.TheDrawingPoint(159, 237)]);
            _this.Unistrokes[9] = new Unistroke(_this, "right square bracket", [new cdeNMI.TheDrawingPoint(112, 138), new cdeNMI.TheDrawingPoint(112, 136), new cdeNMI.TheDrawingPoint(115, 136), new cdeNMI.TheDrawingPoint(118, 137), new cdeNMI.TheDrawingPoint(120, 136), new cdeNMI.TheDrawingPoint(123, 136), new cdeNMI.TheDrawingPoint(125, 136), new cdeNMI.TheDrawingPoint(128, 136), new cdeNMI.TheDrawingPoint(131, 136), new cdeNMI.TheDrawingPoint(134, 135), new cdeNMI.TheDrawingPoint(137, 135), new cdeNMI.TheDrawingPoint(140, 134), new cdeNMI.TheDrawingPoint(143, 133), new cdeNMI.TheDrawingPoint(145, 132), new cdeNMI.TheDrawingPoint(147, 132), new cdeNMI.TheDrawingPoint(149, 132), new cdeNMI.TheDrawingPoint(152, 132), new cdeNMI.TheDrawingPoint(153, 134), new cdeNMI.TheDrawingPoint(154, 137), new cdeNMI.TheDrawingPoint(155, 141), new cdeNMI.TheDrawingPoint(156, 144), new cdeNMI.TheDrawingPoint(157, 152), new cdeNMI.TheDrawingPoint(158, 161), new cdeNMI.TheDrawingPoint(160, 170), new cdeNMI.TheDrawingPoint(162, 182), new cdeNMI.TheDrawingPoint(164, 192), new cdeNMI.TheDrawingPoint(166, 200), new cdeNMI.TheDrawingPoint(167, 209), new cdeNMI.TheDrawingPoint(168, 214), new cdeNMI.TheDrawingPoint(168, 216), new cdeNMI.TheDrawingPoint(169, 221), new cdeNMI.TheDrawingPoint(169, 223), new cdeNMI.TheDrawingPoint(169, 228), new cdeNMI.TheDrawingPoint(169, 231), new cdeNMI.TheDrawingPoint(166, 233), new cdeNMI.TheDrawingPoint(164, 234), new cdeNMI.TheDrawingPoint(161, 235), new cdeNMI.TheDrawingPoint(155, 236), new cdeNMI.TheDrawingPoint(147, 235), new cdeNMI.TheDrawingPoint(140, 233), new cdeNMI.TheDrawingPoint(131, 233), new cdeNMI.TheDrawingPoint(124, 233), new cdeNMI.TheDrawingPoint(117, 235), new cdeNMI.TheDrawingPoint(114, 238), new cdeNMI.TheDrawingPoint(112, 238)]);
            _this.Unistrokes[10] = new Unistroke(_this, "v", [new cdeNMI.TheDrawingPoint(89, 164), new cdeNMI.TheDrawingPoint(90, 162), new cdeNMI.TheDrawingPoint(92, 162), new cdeNMI.TheDrawingPoint(94, 164), new cdeNMI.TheDrawingPoint(95, 166), new cdeNMI.TheDrawingPoint(96, 169), new cdeNMI.TheDrawingPoint(97, 171), new cdeNMI.TheDrawingPoint(99, 175), new cdeNMI.TheDrawingPoint(101, 178), new cdeNMI.TheDrawingPoint(103, 182), new cdeNMI.TheDrawingPoint(106, 189), new cdeNMI.TheDrawingPoint(108, 194), new cdeNMI.TheDrawingPoint(111, 199), new cdeNMI.TheDrawingPoint(114, 204), new cdeNMI.TheDrawingPoint(117, 209), new cdeNMI.TheDrawingPoint(119, 214), new cdeNMI.TheDrawingPoint(122, 218), new cdeNMI.TheDrawingPoint(124, 222), new cdeNMI.TheDrawingPoint(126, 225), new cdeNMI.TheDrawingPoint(128, 228), new cdeNMI.TheDrawingPoint(130, 229), new cdeNMI.TheDrawingPoint(133, 233), new cdeNMI.TheDrawingPoint(134, 236), new cdeNMI.TheDrawingPoint(136, 239), new cdeNMI.TheDrawingPoint(138, 240), new cdeNMI.TheDrawingPoint(139, 242), new cdeNMI.TheDrawingPoint(140, 244), new cdeNMI.TheDrawingPoint(142, 242), new cdeNMI.TheDrawingPoint(142, 240), new cdeNMI.TheDrawingPoint(142, 237), new cdeNMI.TheDrawingPoint(143, 235), new cdeNMI.TheDrawingPoint(143, 233), new cdeNMI.TheDrawingPoint(145, 229), new cdeNMI.TheDrawingPoint(146, 226), new cdeNMI.TheDrawingPoint(148, 217), new cdeNMI.TheDrawingPoint(149, 208), new cdeNMI.TheDrawingPoint(149, 205), new cdeNMI.TheDrawingPoint(151, 196), new cdeNMI.TheDrawingPoint(151, 193), new cdeNMI.TheDrawingPoint(153, 182), new cdeNMI.TheDrawingPoint(155, 172), new cdeNMI.TheDrawingPoint(157, 165), new cdeNMI.TheDrawingPoint(159, 160), new cdeNMI.TheDrawingPoint(162, 155), new cdeNMI.TheDrawingPoint(164, 150), new cdeNMI.TheDrawingPoint(165, 148), new cdeNMI.TheDrawingPoint(166, 146)]);
            _this.Unistrokes[11] = new Unistroke(_this, "delete", [new cdeNMI.TheDrawingPoint(123, 129), new cdeNMI.TheDrawingPoint(123, 131), new cdeNMI.TheDrawingPoint(124, 133), new cdeNMI.TheDrawingPoint(125, 136), new cdeNMI.TheDrawingPoint(127, 140), new cdeNMI.TheDrawingPoint(129, 142), new cdeNMI.TheDrawingPoint(133, 148), new cdeNMI.TheDrawingPoint(137, 154), new cdeNMI.TheDrawingPoint(143, 158), new cdeNMI.TheDrawingPoint(145, 161), new cdeNMI.TheDrawingPoint(148, 164), new cdeNMI.TheDrawingPoint(153, 170), new cdeNMI.TheDrawingPoint(158, 176), new cdeNMI.TheDrawingPoint(160, 178), new cdeNMI.TheDrawingPoint(164, 183), new cdeNMI.TheDrawingPoint(168, 188), new cdeNMI.TheDrawingPoint(171, 191), new cdeNMI.TheDrawingPoint(175, 196), new cdeNMI.TheDrawingPoint(178, 200), new cdeNMI.TheDrawingPoint(180, 202), new cdeNMI.TheDrawingPoint(181, 205), new cdeNMI.TheDrawingPoint(184, 208), new cdeNMI.TheDrawingPoint(186, 210), new cdeNMI.TheDrawingPoint(187, 213), new cdeNMI.TheDrawingPoint(188, 215), new cdeNMI.TheDrawingPoint(186, 212), new cdeNMI.TheDrawingPoint(183, 211), new cdeNMI.TheDrawingPoint(177, 208), new cdeNMI.TheDrawingPoint(169, 206), new cdeNMI.TheDrawingPoint(162, 205), new cdeNMI.TheDrawingPoint(154, 207), new cdeNMI.TheDrawingPoint(145, 209), new cdeNMI.TheDrawingPoint(137, 210), new cdeNMI.TheDrawingPoint(129, 214), new cdeNMI.TheDrawingPoint(122, 217), new cdeNMI.TheDrawingPoint(118, 218), new cdeNMI.TheDrawingPoint(111, 221), new cdeNMI.TheDrawingPoint(109, 222), new cdeNMI.TheDrawingPoint(110, 219), new cdeNMI.TheDrawingPoint(112, 217), new cdeNMI.TheDrawingPoint(118, 209), new cdeNMI.TheDrawingPoint(120, 207), new cdeNMI.TheDrawingPoint(128, 196), new cdeNMI.TheDrawingPoint(135, 187), new cdeNMI.TheDrawingPoint(138, 183), new cdeNMI.TheDrawingPoint(148, 167), new cdeNMI.TheDrawingPoint(157, 153), new cdeNMI.TheDrawingPoint(163, 145), new cdeNMI.TheDrawingPoint(165, 142), new cdeNMI.TheDrawingPoint(172, 133), new cdeNMI.TheDrawingPoint(177, 127), new cdeNMI.TheDrawingPoint(179, 127), new cdeNMI.TheDrawingPoint(180, 125)]);
            _this.Unistrokes[12] = new Unistroke(_this, "left curly brace", [new cdeNMI.TheDrawingPoint(150, 116), new cdeNMI.TheDrawingPoint(147, 117), new cdeNMI.TheDrawingPoint(145, 116), new cdeNMI.TheDrawingPoint(142, 116), new cdeNMI.TheDrawingPoint(139, 117), new cdeNMI.TheDrawingPoint(136, 117), new cdeNMI.TheDrawingPoint(133, 118), new cdeNMI.TheDrawingPoint(129, 121), new cdeNMI.TheDrawingPoint(126, 122), new cdeNMI.TheDrawingPoint(123, 123), new cdeNMI.TheDrawingPoint(120, 125), new cdeNMI.TheDrawingPoint(118, 127), new cdeNMI.TheDrawingPoint(115, 128), new cdeNMI.TheDrawingPoint(113, 129), new cdeNMI.TheDrawingPoint(112, 131), new cdeNMI.TheDrawingPoint(113, 134), new cdeNMI.TheDrawingPoint(115, 134), new cdeNMI.TheDrawingPoint(117, 135), new cdeNMI.TheDrawingPoint(120, 135), new cdeNMI.TheDrawingPoint(123, 137), new cdeNMI.TheDrawingPoint(126, 138), new cdeNMI.TheDrawingPoint(129, 140), new cdeNMI.TheDrawingPoint(135, 143), new cdeNMI.TheDrawingPoint(137, 144), new cdeNMI.TheDrawingPoint(139, 147), new cdeNMI.TheDrawingPoint(141, 149), new cdeNMI.TheDrawingPoint(140, 152), new cdeNMI.TheDrawingPoint(139, 155), new cdeNMI.TheDrawingPoint(134, 159), new cdeNMI.TheDrawingPoint(131, 161), new cdeNMI.TheDrawingPoint(124, 166), new cdeNMI.TheDrawingPoint(121, 166), new cdeNMI.TheDrawingPoint(117, 166), new cdeNMI.TheDrawingPoint(114, 167), new cdeNMI.TheDrawingPoint(112, 166), new cdeNMI.TheDrawingPoint(114, 164), new cdeNMI.TheDrawingPoint(116, 163), new cdeNMI.TheDrawingPoint(118, 163), new cdeNMI.TheDrawingPoint(120, 162), new cdeNMI.TheDrawingPoint(122, 163), new cdeNMI.TheDrawingPoint(125, 164), new cdeNMI.TheDrawingPoint(127, 165), new cdeNMI.TheDrawingPoint(129, 166), new cdeNMI.TheDrawingPoint(130, 168), new cdeNMI.TheDrawingPoint(129, 171), new cdeNMI.TheDrawingPoint(127, 175), new cdeNMI.TheDrawingPoint(125, 179), new cdeNMI.TheDrawingPoint(123, 184), new cdeNMI.TheDrawingPoint(121, 190), new cdeNMI.TheDrawingPoint(120, 194), new cdeNMI.TheDrawingPoint(119, 199), new cdeNMI.TheDrawingPoint(120, 202), new cdeNMI.TheDrawingPoint(123, 207), new cdeNMI.TheDrawingPoint(127, 211), new cdeNMI.TheDrawingPoint(133, 215), new cdeNMI.TheDrawingPoint(142, 219), new cdeNMI.TheDrawingPoint(148, 220), new cdeNMI.TheDrawingPoint(151, 221)]);
            _this.Unistrokes[13] = new Unistroke(_this, "right curly brace", [new cdeNMI.TheDrawingPoint(117, 132), new cdeNMI.TheDrawingPoint(115, 132), new cdeNMI.TheDrawingPoint(115, 129), new cdeNMI.TheDrawingPoint(117, 129), new cdeNMI.TheDrawingPoint(119, 128), new cdeNMI.TheDrawingPoint(122, 127), new cdeNMI.TheDrawingPoint(125, 127), new cdeNMI.TheDrawingPoint(127, 127), new cdeNMI.TheDrawingPoint(130, 127), new cdeNMI.TheDrawingPoint(133, 129), new cdeNMI.TheDrawingPoint(136, 129), new cdeNMI.TheDrawingPoint(138, 130), new cdeNMI.TheDrawingPoint(140, 131), new cdeNMI.TheDrawingPoint(143, 134), new cdeNMI.TheDrawingPoint(144, 136), new cdeNMI.TheDrawingPoint(145, 139), new cdeNMI.TheDrawingPoint(145, 142), new cdeNMI.TheDrawingPoint(145, 145), new cdeNMI.TheDrawingPoint(145, 147), new cdeNMI.TheDrawingPoint(145, 149), new cdeNMI.TheDrawingPoint(144, 152), new cdeNMI.TheDrawingPoint(142, 157), new cdeNMI.TheDrawingPoint(141, 160), new cdeNMI.TheDrawingPoint(139, 163), new cdeNMI.TheDrawingPoint(137, 166), new cdeNMI.TheDrawingPoint(135, 167), new cdeNMI.TheDrawingPoint(133, 169), new cdeNMI.TheDrawingPoint(131, 172), new cdeNMI.TheDrawingPoint(128, 173), new cdeNMI.TheDrawingPoint(126, 176), new cdeNMI.TheDrawingPoint(125, 178), new cdeNMI.TheDrawingPoint(125, 180), new cdeNMI.TheDrawingPoint(125, 182), new cdeNMI.TheDrawingPoint(126, 184), new cdeNMI.TheDrawingPoint(128, 187), new cdeNMI.TheDrawingPoint(130, 187), new cdeNMI.TheDrawingPoint(132, 188), new cdeNMI.TheDrawingPoint(135, 189), new cdeNMI.TheDrawingPoint(140, 189), new cdeNMI.TheDrawingPoint(145, 189), new cdeNMI.TheDrawingPoint(150, 187), new cdeNMI.TheDrawingPoint(155, 186), new cdeNMI.TheDrawingPoint(157, 185), new cdeNMI.TheDrawingPoint(159, 184), new cdeNMI.TheDrawingPoint(156, 185), new cdeNMI.TheDrawingPoint(154, 185), new cdeNMI.TheDrawingPoint(149, 185), new cdeNMI.TheDrawingPoint(145, 187), new cdeNMI.TheDrawingPoint(141, 188), new cdeNMI.TheDrawingPoint(136, 191), new cdeNMI.TheDrawingPoint(134, 191), new cdeNMI.TheDrawingPoint(131, 192), new cdeNMI.TheDrawingPoint(129, 193), new cdeNMI.TheDrawingPoint(129, 195), new cdeNMI.TheDrawingPoint(129, 197), new cdeNMI.TheDrawingPoint(131, 200), new cdeNMI.TheDrawingPoint(133, 202), new cdeNMI.TheDrawingPoint(136, 206), new cdeNMI.TheDrawingPoint(139, 211), new cdeNMI.TheDrawingPoint(142, 215), new cdeNMI.TheDrawingPoint(145, 220), new cdeNMI.TheDrawingPoint(147, 225), new cdeNMI.TheDrawingPoint(148, 231), new cdeNMI.TheDrawingPoint(147, 239), new cdeNMI.TheDrawingPoint(144, 244), new cdeNMI.TheDrawingPoint(139, 248), new cdeNMI.TheDrawingPoint(134, 250), new cdeNMI.TheDrawingPoint(126, 253), new cdeNMI.TheDrawingPoint(119, 253), new cdeNMI.TheDrawingPoint(115, 253)]);
            _this.Unistrokes[14] = new Unistroke(_this, "star", [new cdeNMI.TheDrawingPoint(75, 250), new cdeNMI.TheDrawingPoint(75, 247), new cdeNMI.TheDrawingPoint(77, 244), new cdeNMI.TheDrawingPoint(78, 242), new cdeNMI.TheDrawingPoint(79, 239), new cdeNMI.TheDrawingPoint(80, 237), new cdeNMI.TheDrawingPoint(82, 234), new cdeNMI.TheDrawingPoint(82, 232), new cdeNMI.TheDrawingPoint(84, 229), new cdeNMI.TheDrawingPoint(85, 225), new cdeNMI.TheDrawingPoint(87, 222), new cdeNMI.TheDrawingPoint(88, 219), new cdeNMI.TheDrawingPoint(89, 216), new cdeNMI.TheDrawingPoint(91, 212), new cdeNMI.TheDrawingPoint(92, 208), new cdeNMI.TheDrawingPoint(94, 204), new cdeNMI.TheDrawingPoint(95, 201), new cdeNMI.TheDrawingPoint(96, 196), new cdeNMI.TheDrawingPoint(97, 194), new cdeNMI.TheDrawingPoint(98, 191), new cdeNMI.TheDrawingPoint(100, 185), new cdeNMI.TheDrawingPoint(102, 178), new cdeNMI.TheDrawingPoint(104, 173), new cdeNMI.TheDrawingPoint(104, 171), new cdeNMI.TheDrawingPoint(105, 164), new cdeNMI.TheDrawingPoint(106, 158), new cdeNMI.TheDrawingPoint(107, 156), new cdeNMI.TheDrawingPoint(107, 152), new cdeNMI.TheDrawingPoint(108, 145), new cdeNMI.TheDrawingPoint(109, 141), new cdeNMI.TheDrawingPoint(110, 139), new cdeNMI.TheDrawingPoint(112, 133), new cdeNMI.TheDrawingPoint(113, 131), new cdeNMI.TheDrawingPoint(116, 127), new cdeNMI.TheDrawingPoint(117, 125), new cdeNMI.TheDrawingPoint(119, 122), new cdeNMI.TheDrawingPoint(121, 121), new cdeNMI.TheDrawingPoint(123, 120), new cdeNMI.TheDrawingPoint(125, 122), new cdeNMI.TheDrawingPoint(125, 125), new cdeNMI.TheDrawingPoint(127, 130), new cdeNMI.TheDrawingPoint(128, 133), new cdeNMI.TheDrawingPoint(131, 143), new cdeNMI.TheDrawingPoint(136, 153), new cdeNMI.TheDrawingPoint(140, 163), new cdeNMI.TheDrawingPoint(144, 172), new cdeNMI.TheDrawingPoint(145, 175), new cdeNMI.TheDrawingPoint(151, 189), new cdeNMI.TheDrawingPoint(156, 201), new cdeNMI.TheDrawingPoint(161, 213), new cdeNMI.TheDrawingPoint(166, 225), new cdeNMI.TheDrawingPoint(169, 233), new cdeNMI.TheDrawingPoint(171, 236), new cdeNMI.TheDrawingPoint(174, 243), new cdeNMI.TheDrawingPoint(177, 247), new cdeNMI.TheDrawingPoint(178, 249), new cdeNMI.TheDrawingPoint(179, 251), new cdeNMI.TheDrawingPoint(180, 253), new cdeNMI.TheDrawingPoint(180, 255), new cdeNMI.TheDrawingPoint(179, 257), new cdeNMI.TheDrawingPoint(177, 257), new cdeNMI.TheDrawingPoint(174, 255), new cdeNMI.TheDrawingPoint(169, 250), new cdeNMI.TheDrawingPoint(164, 247), new cdeNMI.TheDrawingPoint(160, 245), new cdeNMI.TheDrawingPoint(149, 238), new cdeNMI.TheDrawingPoint(138, 230), new cdeNMI.TheDrawingPoint(127, 221), new cdeNMI.TheDrawingPoint(124, 220), new cdeNMI.TheDrawingPoint(112, 212), new cdeNMI.TheDrawingPoint(110, 210), new cdeNMI.TheDrawingPoint(96, 201), new cdeNMI.TheDrawingPoint(84, 195), new cdeNMI.TheDrawingPoint(74, 190), new cdeNMI.TheDrawingPoint(64, 182), new cdeNMI.TheDrawingPoint(55, 175), new cdeNMI.TheDrawingPoint(51, 172), new cdeNMI.TheDrawingPoint(49, 170), new cdeNMI.TheDrawingPoint(51, 169), new cdeNMI.TheDrawingPoint(56, 169), new cdeNMI.TheDrawingPoint(66, 169), new cdeNMI.TheDrawingPoint(78, 168), new cdeNMI.TheDrawingPoint(92, 166), new cdeNMI.TheDrawingPoint(107, 164), new cdeNMI.TheDrawingPoint(123, 161), new cdeNMI.TheDrawingPoint(140, 162), new cdeNMI.TheDrawingPoint(156, 162), new cdeNMI.TheDrawingPoint(171, 160), new cdeNMI.TheDrawingPoint(173, 160), new cdeNMI.TheDrawingPoint(186, 160), new cdeNMI.TheDrawingPoint(195, 160), new cdeNMI.TheDrawingPoint(198, 161), new cdeNMI.TheDrawingPoint(203, 163), new cdeNMI.TheDrawingPoint(208, 163), new cdeNMI.TheDrawingPoint(206, 164), new cdeNMI.TheDrawingPoint(200, 167), new cdeNMI.TheDrawingPoint(187, 172), new cdeNMI.TheDrawingPoint(174, 179), new cdeNMI.TheDrawingPoint(172, 181), new cdeNMI.TheDrawingPoint(153, 192), new cdeNMI.TheDrawingPoint(137, 201), new cdeNMI.TheDrawingPoint(123, 211), new cdeNMI.TheDrawingPoint(112, 220), new cdeNMI.TheDrawingPoint(99, 229), new cdeNMI.TheDrawingPoint(90, 237), new cdeNMI.TheDrawingPoint(80, 244), new cdeNMI.TheDrawingPoint(73, 250), new cdeNMI.TheDrawingPoint(69, 254), new cdeNMI.TheDrawingPoint(69, 252)]);
            _this.Unistrokes[15] = new Unistroke(_this, "pigtail", [new cdeNMI.TheDrawingPoint(81, 219), new cdeNMI.TheDrawingPoint(84, 218), new cdeNMI.TheDrawingPoint(86, 220), new cdeNMI.TheDrawingPoint(88, 220), new cdeNMI.TheDrawingPoint(90, 220), new cdeNMI.TheDrawingPoint(92, 219), new cdeNMI.TheDrawingPoint(95, 220), new cdeNMI.TheDrawingPoint(97, 219), new cdeNMI.TheDrawingPoint(99, 220), new cdeNMI.TheDrawingPoint(102, 218), new cdeNMI.TheDrawingPoint(105, 217), new cdeNMI.TheDrawingPoint(107, 216), new cdeNMI.TheDrawingPoint(110, 216), new cdeNMI.TheDrawingPoint(113, 214), new cdeNMI.TheDrawingPoint(116, 212), new cdeNMI.TheDrawingPoint(118, 210), new cdeNMI.TheDrawingPoint(121, 208), new cdeNMI.TheDrawingPoint(124, 205), new cdeNMI.TheDrawingPoint(126, 202), new cdeNMI.TheDrawingPoint(129, 199), new cdeNMI.TheDrawingPoint(132, 196), new cdeNMI.TheDrawingPoint(136, 191), new cdeNMI.TheDrawingPoint(139, 187), new cdeNMI.TheDrawingPoint(142, 182), new cdeNMI.TheDrawingPoint(144, 179), new cdeNMI.TheDrawingPoint(146, 174), new cdeNMI.TheDrawingPoint(148, 170), new cdeNMI.TheDrawingPoint(149, 168), new cdeNMI.TheDrawingPoint(151, 162), new cdeNMI.TheDrawingPoint(152, 160), new cdeNMI.TheDrawingPoint(152, 157), new cdeNMI.TheDrawingPoint(152, 155), new cdeNMI.TheDrawingPoint(152, 151), new cdeNMI.TheDrawingPoint(152, 149), new cdeNMI.TheDrawingPoint(152, 146), new cdeNMI.TheDrawingPoint(149, 142), new cdeNMI.TheDrawingPoint(148, 139), new cdeNMI.TheDrawingPoint(145, 137), new cdeNMI.TheDrawingPoint(141, 135), new cdeNMI.TheDrawingPoint(139, 135), new cdeNMI.TheDrawingPoint(134, 136), new cdeNMI.TheDrawingPoint(130, 140), new cdeNMI.TheDrawingPoint(128, 142), new cdeNMI.TheDrawingPoint(126, 145), new cdeNMI.TheDrawingPoint(122, 150), new cdeNMI.TheDrawingPoint(119, 158), new cdeNMI.TheDrawingPoint(117, 163), new cdeNMI.TheDrawingPoint(115, 170), new cdeNMI.TheDrawingPoint(114, 175), new cdeNMI.TheDrawingPoint(117, 184), new cdeNMI.TheDrawingPoint(120, 190), new cdeNMI.TheDrawingPoint(125, 199), new cdeNMI.TheDrawingPoint(129, 203), new cdeNMI.TheDrawingPoint(133, 208), new cdeNMI.TheDrawingPoint(138, 213), new cdeNMI.TheDrawingPoint(145, 215), new cdeNMI.TheDrawingPoint(155, 218), new cdeNMI.TheDrawingPoint(164, 219), new cdeNMI.TheDrawingPoint(166, 219), new cdeNMI.TheDrawingPoint(177, 219), new cdeNMI.TheDrawingPoint(182, 218), new cdeNMI.TheDrawingPoint(192, 216), new cdeNMI.TheDrawingPoint(196, 213), new cdeNMI.TheDrawingPoint(199, 212), new cdeNMI.TheDrawingPoint(201, 211)]);
            return _this;
        }
        //
        // The $1 Gesture Recognizer API begins here -- 3 methods: Recognize(), AddGesture(), and DeleteUserGestures()
        //
        TheShapeRecognizer.prototype.Recognize = function (inPoints, useProtractor) {
            var t0 = Date.now();
            var points = this.Resample(inPoints, this.NumPoints);
            var radians = this.IndicativeAngle(points);
            points = this.RotateBy(points, -radians);
            points = this.ScaleTo(points, this.SquareSize);
            points = this.TranslateTo(points, this.Origin);
            var vector = this.Vectorize(points); // for Protractor
            var b = +Infinity;
            var u = -1;
            for (var i = 0; i < this.Unistrokes.length; i++) // for each unistroke
             {
                var d = void 0;
                if (useProtractor) // for Protractor
                    d = this.OptimalCosineDistance(this.Unistrokes[i].Vector, vector);
                else // Golden Section Search (original $1)
                    d = this.DistanceAtBestAngle(points, this.Unistrokes[i], -this.AngleRange, +this.AngleRange, this.AnglePrecision);
                if (d < b) {
                    b = d; // best (least) distance
                    u = i; // unistroke index
                }
            }
            var t1 = Date.now();
            return (u === -1) ? new TheRecognizerResult("No match", 0.0, t1 - t0) : new TheRecognizerResult(this.Unistrokes[u].Name, useProtractor ? 1.0 / b : 1.0 - b / this.HalfDiagonal, t1 - t0);
        };
        TheShapeRecognizer.prototype.AddGesture = function (name, points) {
            this.Unistrokes[this.Unistrokes.length] = new Unistroke(this, name, points); // append new unistroke
            var num = 0;
            for (var i = 0; i < this.Unistrokes.length; i++) {
                if (this.Unistrokes[i].Name === name)
                    num++;
            }
            return num;
        };
        TheShapeRecognizer.prototype.DeleteUserGestures = function () {
            this.Unistrokes.length = this.NumUnistrokes; // clear any beyond the original set
            return this.NumUnistrokes;
        };
        //
        // Private helper functions from here on down
        //
        TheShapeRecognizer.prototype.Resample = function (points, n) {
            var I = this.PathLength(points) / (n - 1); // interval length
            var D = 0.0;
            var newpoints = new Array(points[0]);
            for (var i = 1; i < points.length; i++) {
                var d = this.Distance(points[i - 1], points[i]);
                if ((D + d) >= I) {
                    var qx = points[i - 1].x + ((I - D) / d) * (points[i].x - points[i - 1].x);
                    var qy = points[i - 1].y + ((I - D) / d) * (points[i].y - points[i - 1].y);
                    var q = new cdeNMI.TheDrawingPoint(qx, qy);
                    newpoints[newpoints.length] = q; // append new point 'q'
                    points.splice(i, 0, q); // insert 'q' at position i in points s.t. 'q' will be the next i
                    D = 0.0;
                }
                else
                    D += d;
            }
            if (newpoints.length === n - 1) // somtimes we fall a rounding-error short of adding the last point, so add it if so
                newpoints[newpoints.length] = new cdeNMI.TheDrawingPoint(points[points.length - 1].x, points[points.length - 1].y);
            return newpoints;
        };
        TheShapeRecognizer.prototype.IndicativeAngle = function (points) {
            var c = this.Centroid(points);
            return Math.atan2(c.y - points[0].y, c.x - points[0].x);
        };
        TheShapeRecognizer.prototype.RotateBy = function (points, radians) {
            var c = this.Centroid(points);
            var cos = Math.cos(radians);
            var sin = Math.sin(radians);
            var newpoints = [];
            for (var i = 0; i < points.length; i++) {
                var qx = (points[i].x - c.x) * cos - (points[i].y - c.y) * sin + c.x;
                var qy = (points[i].x - c.x) * sin + (points[i].y - c.y) * cos + c.y;
                newpoints[newpoints.length] = new cdeNMI.TheDrawingPoint(qx, qy);
            }
            return newpoints;
        };
        TheShapeRecognizer.prototype.ScaleTo = function (points, size) {
            var B = this.BoundingBox(points);
            var newpoints = [];
            for (var i = 0; i < points.length; i++) {
                var qx = points[i].x * (size / B.Width);
                var qy = points[i].x * (size / B.Height);
                newpoints[newpoints.length] = new cdeNMI.TheDrawingPoint(qx, qy);
            }
            return newpoints;
        };
        TheShapeRecognizer.prototype.TranslateTo = function (points, pt) {
            var c = this.Centroid(points);
            var newpoints = [];
            for (var i = 0; i < points.length; i++) {
                var qx = points[i].x + pt.x - c.x;
                var qy = points[i].y + pt.y - c.y;
                newpoints[newpoints.length] = new cdeNMI.TheDrawingPoint(qx, qy);
            }
            return newpoints;
        };
        TheShapeRecognizer.prototype.Vectorize = function (points) {
            var sum = 0.0;
            var vector = [];
            for (var i = 0; i < points.length; i++) {
                vector[vector.length] = points[i].x;
                vector[vector.length] = points[i].y;
                sum += points[i].x * points[i].x + points[i].y * points[i].y;
            }
            var magnitude = Math.sqrt(sum);
            for (var i = 0; i < vector.length; i++)
                vector[i] /= magnitude;
            return vector;
        };
        TheShapeRecognizer.prototype.OptimalCosineDistance = function (v1, v2) {
            var a = 0.0;
            var b = 0.0;
            for (var i = 0; i < v1.length; i += 2) {
                a += v1[i] * v2[i] + v1[i + 1] * v2[i + 1];
                b += v1[i] * v2[i + 1] - v1[i + 1] * v2[i];
            }
            var angle = Math.atan(b / a);
            return Math.acos(a * Math.cos(angle) + b * Math.sin(angle));
        };
        TheShapeRecognizer.prototype.DistanceAtBestAngle = function (points, T, a, b, threshold) {
            var x1 = this.Phi * a + (1.0 - this.Phi) * b;
            var f1 = this.DistanceAtAngle(points, T, x1);
            var x2 = (1.0 - this.Phi) * a + this.Phi * b;
            var f2 = this.DistanceAtAngle(points, T, x2);
            while (Math.abs(b - a) > threshold) {
                if (f1 < f2) {
                    b = x2;
                    x2 = x1;
                    f2 = f1;
                    x1 = this.Phi * a + (1.0 - this.Phi) * b;
                    f1 = this.DistanceAtAngle(points, T, x1);
                }
                else {
                    a = x1;
                    x1 = x2;
                    f1 = f2;
                    x2 = (1.0 - this.Phi) * a + this.Phi * b;
                    f2 = this.DistanceAtAngle(points, T, x2);
                }
            }
            return Math.min(f1, f2);
        };
        TheShapeRecognizer.prototype.DistanceAtAngle = function (points, T, radians) {
            var newpoints = this.RotateBy(points, radians);
            return this.PathDistance(newpoints, T.Points);
        };
        TheShapeRecognizer.prototype.Centroid = function (points) {
            var x = 0.0, y = 0.0;
            for (var i = 0; i < points.length; i++) {
                x += points[i].x;
                y += points[i].y;
            }
            x /= points.length;
            y /= points.length;
            return new cdeNMI.TheDrawingPoint(x, y);
        };
        TheShapeRecognizer.prototype.BoundingBox = function (points) {
            var minX = +Infinity, maxX = -Infinity, minY = +Infinity, maxY = -Infinity;
            for (var i = 0; i < points.length; i++) {
                minX = Math.min(minX, points[i].x);
                minY = Math.min(minY, points[i].y);
                maxX = Math.max(maxX, points[i].x);
                maxY = Math.max(maxY, points[i].y);
            }
            return new TheRectangle(minX, minY, maxX - minX, maxY - minY);
        };
        TheShapeRecognizer.prototype.PathDistance = function (pts1, pts2) {
            var d = 0.0;
            for (var i = 0; i < pts1.length; i++) // assumes pts1.length == pts2.length
                d += this.Distance(pts1[i], pts2[i]);
            return d / pts1.length;
        };
        TheShapeRecognizer.prototype.PathLength = function (points) {
            var d = 0.0;
            for (var i = 1; i < points.length; i++)
                d += this.Distance(points[i - 1], points[i]);
            return d;
        };
        TheShapeRecognizer.prototype.Distance = function (p1, p2) {
            var dx = p2.x - p1.x;
            var dy = p2.y - p1.y;
            return Math.sqrt(dx * dx + dy * dy);
        };
        TheShapeRecognizer.prototype.Deg2Rad = function (d) { return (d * Math.PI / 180.0); };
        TheShapeRecognizer.prototype.RecogizeShape = function (pDrawObject, ScoreMin, useProtractor) {
            if (useProtractor === void 0) { useProtractor = true; }
            var tPts = new Array();
            for (var tt in pDrawObject.ComplexData) {
                tPts.push(new cdeNMI.TheDrawingPoint(pDrawObject.ComplexData[tt].PO.x, pDrawObject.ComplexData[tt].PO.y));
            }
            if (tPts.length < 3)
                return null;
            var res = this.Recognize(tPts, useProtractor);
            if (res) {
                if (res.Score > ScoreMin) {
                    //cdeNMI.ShowToastMessage("Name: " + res.Name + " Score:" + res.Score + " Time:" + res.Time);
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ShapeRecognizer", "Name: " + res.Name + " Accu:" + res.Score.toFixed(2) + " Time:" + res.Time);
                    return res;
                }
                else {
                    //cdeNMI.ShowToastMessage("Guess is : " + res.Name + " but Score too low:" + res.Score);
                    return null;
                }
            }
            return null;
        };
        return TheShapeRecognizer;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.TheShapeRecognizer = TheShapeRecognizer;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
(function (cdeNMI) {
    var ctrlDateTimePicker = /** @class */ (function (_super) {
        __extends(ctrlDateTimePicker, _super);
        function ctrlDateTimePicker(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.NeedRefresh = false;
            _this.myPicker = null;
            _this.mFrameDiv = null;
            _this.MyEditBox = null;
            _this.mWidSub = 20;
            return _this;
        }
        ctrlDateTimePicker.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.ComboBox;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.SetProperty("HasChoices", false);
            this.mFrameDiv = document.createElement("div");
            //this.mFrameDiv.style.margin = "auto";
            this.mFrameDiv.style.width = "inherit";
            this.mFrameDiv.style.height = "inherit";
            this.mFrameDiv.className = "ctrlInput";
            this.SetElement(this.mFrameDiv);
            this.MyEditBox = document.createElement("input");
            this.MyEditBox.style.cssFloat = "left";
            this.MyEditBox.id = "DTP" + cde.GuidToString(this.MyFieldInfo.cdeMID);
            if (!cde.CBool(this.GetProperty("EnableAutoFill")) && !cde.CBool(this.GetProperty("InTemplate"))) {
                this.MyEditBox.name = "EB" + cde.GuidToString(this.MyFieldInfo.cdeMID) + "_" + Math.floor((Math.random() * 1000) + 1);
                this.MyEditBox.autocomplete = "new-password";
            }
            if (cde.CBool(this.GetSetting("NoTE"))) {
                var tLabel = document.createElement("label");
                tLabel.htmlFor = "cdeIMP" + cde.GuidToString(this.MyFieldInfo.cdeMID);
                tLabel.className = "cdeTesInput";
                tLabel.appendChild(this.MyEditBox);
                var tSpanLabel = document.createElement("span");
                tSpanLabel.className = "label";
                tSpanLabel.innerHTML = this.GetSetting("Title");
                tLabel.appendChild(tSpanLabel);
                var tSpanFocus = document.createElement("span");
                tSpanFocus.className = "focus-bg";
                tLabel.appendChild(tSpanFocus);
                this.mWidSub = 25;
                this.mFrameDiv.appendChild(tLabel);
            }
            else {
                this.mFrameDiv.appendChild(this.MyEditBox);
                this.MyEditBox.className = "cdeInput";
            }
            this.MyEditBox.className = "cdeInput flatpickr flatpickr-input";
            if (cde.CInt(this.GetSetting("TileFactorY")) > 1 && !this.MyEditBox.classList.contains("cdeSmall"))
                this.MyEditBox.classList.add("cdeSmall");
            if (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) === 0)
                this.SetProperty("Disabled", true);
            return true;
        };
        ctrlDateTimePicker.prototype.ShowComboPicker = function () {
            if (this.myPicker)
                this.myPicker.show();
        };
        ctrlDateTimePicker.prototype.ApplySkin = function () {
            var _this = this;
            var pickOptions = {
                mode: "single",
                enableTime: true,
                noCalendar: false,
                time_24hr: true,
                showMonths: 1,
                dateFormat: "Y-m-d H:i",
                onChange: function (selectedDates, tRealVal) {
                    if ((tRealVal && tRealVal !== "") && _this.GetProperty("Value") !== tRealVal) {
                        _this.IsDirty = true;
                        _this.SetProperty("Value", tRealVal);
                        ///this.FireEvent(false, "OnValueChanged", event, this.GetProperty("Value"), this.MyTRF);
                    }
                },
                plugins: []
            };
            if (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) !== 0) {
                switch (this.MyFieldInfo.Type) {
                    case cdeNMI.cdeControlType.Month:
                        pickOptions.plugins = [
                            new monthSelectPlugin({
                                shorthand: true,
                                dateFormat: "F",
                                altFormat: "F Y",
                                theme: "dark" // defaults to "light"
                            })
                        ];
                        break;
                    case cdeNMI.cdeControlType.TimeSpan:
                        pickOptions.mode = "range";
                        break;
                    case cdeNMI.cdeControlType.Time:
                        pickOptions.noCalendar = true;
                        pickOptions.dateFormat = "H:i";
                        break;
                    case cdeNMI.cdeControlType.DateTime:
                        if (!cde.CBool(this.GetProperty("DateOnly"))) {
                            pickOptions.enableTime = false;
                        }
                        break;
                }
            }
            this.myPicker = flatpickr(this.MyEditBox, pickOptions);
        };
        ctrlDateTimePicker.prototype.SetProperty = function (pName, pValue) {
            if ((pName === "Value" || pName === "iValue") && pValue !== null) {
                if (this.MyEditBox) {
                    this.MyEditBox.value = this.ShowFieldContent(pValue);
                }
                this.IsDirty = true;
            }
            else if (pName === "Disabled" && this.MyEditBox) {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.MyEditBox.disabled = cde.CBool(pValue);
            }
            else if (pName === "Background" && this.MyEditBox && pValue) {
                this.MyEditBox.style.background = pValue;
            }
            else if (pName === "MainBackground" && this.MyEditBox && pValue) {
                this.MyEditBox.parentElement.style.background = pValue;
            }
            else if (pName === "Foreground" && this.MyEditBox && pValue) {
                this.MyEditBox.style.color = pValue;
            }
            else if (pName === "InnerClassName" && this.MyEditBox && pValue) {
                this.MyEditBox.className = pValue;
            }
            else if (pName === "InnerStyle" && this.MyEditBox && pValue) {
                this.MyEditBox.style.cssText = pValue;
            }
            else if (pName === "Z-Index" && this.MyEditBox) {
                this.MyEditBox.style.zIndex = pValue.toString();
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        return ctrlDateTimePicker;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlDateTimePicker = ctrlDateTimePicker;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeSortAlphabet = '*!@_.()#^&%-=+01234567989abcdefghijklmnopqrstuvwxyz';
var cdeNMI;
(function (cdeNMI) {
    var ctrlComboBox = /** @class */ (function (_super) {
        __extends(ctrlComboBox, _super);
        function ctrlComboBox(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyComboBox = null;
            _this.MyComboDiv = null;
            _this.HasGroups = false;
            _this.MyTableName = null;
            _this.MyLookup = null;
            _this.HideInput = false;
            _this.NeedRefresh = false;
            _this.WasInputCreated = false;
            _this.HasLoaded = false;
            _this.DoShow = false;
            _this.DontFire = false;
            _this.MySep = ";";
            _this.ControlText = "ctrlComboBox";
            _this.RefreshCombo = '[{"V":"CDE_NOP","N":"loading...please wait"}]';
            _this.myChoices = null;
            _this.myChoicesOptions = {
                delimiter: _this.MySep,
                editItems: false,
                maxItemCount: 1,
                removeItemButton: false,
                searchEnabled: false,
                shouldSort: true,
                searchResultLimit: 100,
                shouldSortItems: true,
                duplicateItemsAllowed: false,
                position: "bottom",
                fuseOptions: {
                    ignoreLocation: true,
                    threshold: 0.1,
                    location: 0,
                    distance: 1000,
                },
                sorter: function (a, b) {
                    var indexA = cdeSortAlphabet.indexOf(a[0]), indexB = cdeSortAlphabet.indexOf(b[0]);
                    if (indexA === indexB) {
                        // same first character, sort regular
                        if (a < b) {
                            return -1;
                        }
                        else if (a > b) {
                            return 1;
                        }
                        return 0;
                    }
                    else {
                        return indexA - indexB;
                    }
                }
            };
            return _this;
        }
        ctrlComboBox.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            if (this.MyBaseType === cdeNMI.cdeControlType.BaseControl)
                this.MyBaseType = cdeNMI.cdeControlType.ComboBox;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.SetProperty("HasChoices", false);
            if (this.MyFieldInfo && this.MyFieldInfo["DefaultValue"] && !this.MyFieldInfo["Value"])
                this.MyFieldInfo["Value"] = this.MyFieldInfo["DefaultValue"];
            if (this.MyFieldInfo && this.MyFieldInfo["HideInput"])
                this.HideInput = true;
            if (this.MyFieldInfo)
                _super.prototype.SetProperty.call(this, "UXID", this.MyFieldInfo.cdeMID);
            this.CalculateOption(null);
            this.RegisterEvent("OnDelete", function () {
                cdeNMI.MyEngine.UnregisterLazyLoader(_this.MyScreenID, _this.MyTableName, _this.HandleLazyLoad);
            });
            return true;
        };
        ctrlComboBox.prototype.AddChoice = function (pValue) {
            if (!pValue)
                return false;
            var tEx;
            if (this.MyCurrentData.length > 0) {
                tEx = this.MyCurrentData.filter(function (element) { return element.value === pValue.value; });
            }
            if (!tEx || tEx.length === 0) {
                this.MyCurrentData.push(pValue);
                return true;
            }
            else {
                tEx.forEach(function (vl) {
                    if (vl.label === vl.value && vl.label !== pValue.label)
                        vl.label = pValue.label;
                });
            }
            return false;
        };
        ctrlComboBox.prototype.SetProperty = function (pName, pValue) {
            if ((pName === "Value" || pName === "iValue") && pValue !== null) {
                if (this.myChoices) {
                    var tChoices = pValue.split(this.MySep);
                    this.DontFire = true;
                    try {
                        for (var i = 0; i < tChoices.length; i++) {
                            var tC = new cdeNMI.TheComboOption();
                            tC.value = tChoices[i];
                            tC.label = tChoices[i];
                            this.AddChoice(tC);
                        }
                        if (this.MyCurrentData.length > 0) {
                            this.myChoices.setChoices(this.MyCurrentData, "value", "label", true);
                            this.myChoices.removeActiveItems();
                            this.myChoices.setChoiceByValue(tChoices);
                        }
                        //const tH=this.myChoices.items;
                    }
                    catch (_a) {
                        //empty
                    }
                    this.DontFire = false;
                }
                this.IsDirty = true;
            }
            else if ((pName === "SetChoice" || pName === "SetChoiceV") && pValue) {
                //TODO: Find pValue in MyCurrentData. If not add to 
                this.AddChoice(pValue);
                this.DontFire = true;
                this.myChoices.setChoices(this.MyCurrentData, "value", "label", true);
                this.myChoices.setChoiceByValue(pValue.value);
                this.DontFire = false;
                if (pName === "SetChoiceV")
                    _super.prototype.SetProperty.call(this, "Value", pValue.value);
                return;
            }
            else if (pName === "LiveOptions" && pValue) {
                _super.prototype.SetProperty.call(this, pName, pValue);
                this.ShowComboPicker();
                return;
            }
            else if (pName === "ScreenFriendlyName" && pValue) {
                var tO = this.GetProperty("LiveOptions");
                if (!tO)
                    tO = pValue;
                else
                    tO += this.MySep + pValue;
                this.SetProperty("LiveOptions", tO);
                this.MyComboBox.value = tO.split(':')[0];
                return;
            }
            else if (pName === "Background" && this.MyComboBox && pValue) {
                this.MyComboBox.style.background = pValue;
            }
            else if (pName === "MainBackground" && this.MyComboDiv && pValue) {
                this.MyComboDiv.parentElement.style.background = pValue;
            }
            else if (pName === "Foreground" && this.MyComboBox && pValue) {
                this.MyComboBox.style.color = pValue;
            }
            else if (pName === "InnerClassName" && this.MyComboBox && pValue) {
                this.MyComboBox.className = pValue;
            }
            else if (pName === "InnerStyle" && this.MyComboBox && pValue) {
                this.MyComboBox.style.cssText = pValue;
            }
            else if (pName === "Options" && this.MyComboDiv) {
                this.MyFieldInfo["OptionsLive"] = pValue;
                if (this.myChoices)
                    this.CreateComboOptions(pValue, null, false);
                else
                    this.CalculateOption(pValue);
            }
            else if (pName === "Z-Index" && this.MyComboBox) {
                this.MyComboBox.style.zIndex = pValue.toString();
            }
            else if (pName === "Separator") {
                this.MySep = pValue;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlComboBox.prototype.HandleLazyLoad = function (table, pCookie) {
            var tComboControl = pCookie.ComboControl;
            if (table)
                tComboControl.HasLoaded = true;
            tComboControl.CreateComboFromLookup(table, pCookie);
            if (!table || !tComboControl.myChoices) {
                tComboControl.SetProperty("HasChoices", true);
                tComboControl.NeedRefresh = true;
                tComboControl.ApplySkiny();
            }
        };
        ctrlComboBox.prototype.CalculateOption = function (tChoiceOptions) {
            if (this.myChoices)
                return;
            if (this.MyFieldInfo) {
                if (this.MyFieldInfo["OptionsLive"])
                    tChoiceOptions = this.MyFieldInfo["OptionsLive"];
                if (!tChoiceOptions)
                    tChoiceOptions = this.MyFieldInfo["Options"];
                if (!tChoiceOptions)
                    tChoiceOptions = "No Options Specified:CDE_NOP";
            }
            var SortOptions = false;
            if (this.MyFieldInfo) {
                this.MyBaseType = this.MyFieldInfo.Type;
                switch (this.MyFieldInfo.Type) {
                    case cdeNMI.cdeControlType.YesNo:
                        tChoiceOptions = "Yes:Y;No:N";
                        if (cde.CBool(this.GetProperty("IncludeNA")))
                            tChoiceOptions += ";N/A:A";
                        break;
                    case cdeNMI.cdeControlType.TrueFalse:
                        tChoiceOptions = "True;False";
                        break;
                    case cdeNMI.cdeControlType.Month: //Months
                        this.myChoicesOptions.searchEnabled = true;
                        tChoiceOptions = "January;Feburary;March;April;May;June;July;August;September;October;November;December";
                        break;
                    case cdeNMI.cdeControlType.Country:
                        {
                            this.myChoicesOptions.searchEnabled = true;
                            var states = ["United States", "Germany", "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antarctica", "Antigua and Barbuda", "Argentina",
                                "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda",
                                "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burma", "Burundi", "Cambodia", "Cameroon",
                                "Canada", "Cape Verde", "Central African Republic", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo, Democratic Republic",
                                "Congo, Republic of the", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica",
                                "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Finland",
                                "France", "Gabon", "Gambia", "Georgia", "Ghana", "Greece", "Greenland", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti",
                                "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan",
                                "Kazakhstan", "Kenya", "Kiribati", "Korea, North", "Korea, South", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya",
                                "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania",
                                "Mauritius", "Mexico", "Micronesia", "Moldova", "Mongolia", "Morocco", "Monaco", "Mozambique", "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand",
                                "Nicaragua", "Niger", "Nigeria", "Norway", "Oman", "Pakistan", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal",
                                "Qatar", "Romania", "Russia", "Rwanda", "Samoa", "San Marino", " Sao Tome", "Saudi Arabia", "Senegal", "Serbia and Montenegro", "Seychelles",
                                "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "Spain", "Sri Lanka", "Sudan", "Suriname",
                                "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia",
                                "Turkey", "Turkmenistan", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam",
                                "Yemen", "Zambia", "Zimbabwe"];
                            tChoiceOptions = "";
                            for (var idx in states) {
                                if (tChoiceOptions.length > 0)
                                    tChoiceOptions += ";";
                                tChoiceOptions += states[idx];
                            }
                        }
                        break;
                    default:
                        this.myChoicesOptions.searchEnabled = false;
                        SortOptions = true;
                        break;
                }
            }
            if (tChoiceOptions) {
                if (!this.MyComboDiv) {
                    this.MyComboDiv = document.createElement("div");
                    this.MyComboDiv.className = "cdeComboBox";
                    this.SetElement(this.MyComboDiv);
                }
                if (!this.MyComboBox) {
                    this.MyComboBox = document.createElement("select");
                    this.MyComboBox.id = cde.GuidToString(this.GetProperty("ID"));
                    ;
                    if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption) {
                        this.MyComboBox.multiple = true;
                    }
                    this.MyComboDiv.appendChild(this.MyComboBox);
                }
                if (tChoiceOptions.substr(0, 6) === "LOOKUP") {
                    var tParas = tChoiceOptions.split(':');
                    if (tParas.length > 1) {
                        switch (tParas[1]) {
                            case "THINGPICKER":
                                tParas = "LOOKUP:b510837f-3b75-4cf2-a900-d36c19113a13:MyPropertyBag.FriendlyName.Value:cdeMID:MyPropertyBag.DeviceType.Value:FAFA22FF-96AC-42CF-B1DB-7C073053FC39".split(':');
                                break;
                            case "PROPERTYPICKER":
                                this.SetProperty("UXID", this.MyFieldInfo.cdeMID);
                                this.RegisterNMIControl();
                                tParas = null;
                                this.CreateComboOptions("Loading please wait...:CDE_NOP", "CDE_NOP", false);
                                break;
                        }
                    }
                    if (tParas) {
                        if (tParas.length < 3) {
                            this.CreateComboOptions("Lookup definition incomplete:CDE_NOP", "CDE_NOP", false);
                        }
                        else {
                            var tScreenid = this.MyScreenID;
                            if (tParas.length > 5)
                                tScreenid = tParas[5];
                            this.MyScreenID = cde.GuidToString(tScreenid);
                            this.MyTableName = cde.GuidToString(tParas[1]);
                            var tGName = null;
                            if (tParas.length > 4)
                                tGName = tParas[4];
                            if (!this.MyLookup) {
                                this.MyLookup = { ComboControl: this, Content: this.GetProperty("Value"), SrcFld: tParas[2], TgtID: tParas[3], GroupName: tGName };
                            }
                            //this.CreateComboOptions('[{"V":"CDE_LLL","N":"Select to Load Lookup Table"}]', "CDE_LLL", false);
                            if (cdeNMI.MyEngine) {
                                cdeNMI.MyEngine.LoadTableLazy(this.MyScreenID, this.MyTableName, this.HandleLazyLoad, this.MyLookup);
                                return;
                            }
                        }
                    }
                }
                else {
                    if (!this.CalPicker())
                        this.CreateComboOptions(tChoiceOptions, this.GetProperty("Value"), SortOptions);
                }
                this.SetProperty("HasChoices", true);
                this.ApplySkiny();
            }
        };
        ctrlComboBox.prototype.ApplySkin = function () {
            this.ApplySkiny();
        };
        ctrlComboBox.prototype.OnShowDropDown = function () {
            this.myChoices.setChoices(this.MyCurrentData, "value", "label", true);
            if (this.NeedRefresh)
                this.CalculateOption(null);
            if (this.HasGroups)
                return;
            if (cde.IsNotSet(this.GetProperty("Value"))) {
                if (this.MyLookup !== null)
                    this.myChoices.setChoiceByValue("CDE_LLL");
                else {
                    if (this.GetProperty("Options").substr("CDE_NOP") > 0)
                        this.myChoices.setChoiceByValue("CDE_NOP");
                }
            }
            else
                this.myChoices.setChoiceByValue(this.GetProperty("Value"));
        };
        ctrlComboBox.prototype.SetOptions = function () {
            if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption) {
                this.myChoicesOptions.editItems = false;
                this.myChoicesOptions.removeItemButton = true;
                this.myChoicesOptions.maxItemCount = 1;
            }
        };
        ctrlComboBox.prototype.ApplySkiny = function () {
            var _this = this;
            if (this.myChoices && this.NeedRefresh === false)
                return;
            try {
                if (!this.myChoices && Choices) {
                    this.SetOptions();
                    if (cde.CBool(this.GetProperty("AllowMultiSelect")))
                        this.myChoicesOptions.maxItemCount = -1;
                    if (this.GetProperty("Separator")) {
                        this.myChoicesOptions.delimiter = this.GetProperty("Separator");
                        this.MySep = this.myChoicesOptions.delimiter;
                    }
                    this.myChoices = new Choices(this.MyComboBox, this.myChoicesOptions);
                    this.myChoices.setChoices(this.MyCurrentData, "value", "label", true);
                    if (!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0) {
                        this.myChoices.disable();
                    }
                    else {
                        this.myChoices.passedElement.element.addEventListener('showDropdown', function () {
                            _this.OnShowDropDown();
                        }, false);
                        if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption && cde.CBool(this.GetProperty("AllowNewEntry")) === true) {
                            this.myChoices.passedElement.element.addEventListener('search', function (event) {
                                var tRealVal = event.detail.value;
                                //const myC = this.MyCurrentData;
                                var tCI = new cdeNMI.TheComboOption();
                                tCI.label = tRealVal;
                                tCI.value = tRealVal;
                                //myC.push(tCI);
                                _this.myChoices.setChoices([tCI], "value", "label", true);
                            }, false);
                        }
                        this.myChoices.passedElement.element.addEventListener('removeItem', function (event) {
                            if (_this.DontFire === true || !cde.CBool(_this.GetProperty("AllowMultiSelect")))
                                return;
                            var tRealVal = event.detail.value;
                            _this.ComboUpdateValue(tRealVal, true);
                        }, false);
                        this.myChoices.passedElement.element.addEventListener('choice', function (event) {
                            if (_this.DontFire === true)
                                return;
                            var tRealVal = event.detail.choice.value;
                            if (_this.GetProperty("Value") !== tRealVal) {
                                if (!_this.ComboUpdateValue(tRealVal)) {
                                    event.detail.choice.disabled = true;
                                    event.preventDefault();
                                    return false;
                                }
                            }
                        }, false);
                    }
                }
                else {
                    this.myChoices.clearChoices();
                    this.myChoices.setChoices(this.MyCurrentData, "value", "label", true);
                }
                this.SetToDefault(true);
            }
            catch (e) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", this.ControlText + ":ApplySkiny", "Exception :" + e);
            }
        };
        ctrlComboBox.prototype.CalPicker = function () {
            var tLO = this.GetProperty("OptionsLive");
            if (!tLO)
                tLO = this.GetProperty("Options");
            if (tLO && tLO.startsWith("SCREENPICKER")) {
                var tLst = tLO.substr(13);
                if (cdeNMI.MyScreenManager)
                    tLst += cdeNMI.MyScreenManager.GetScreenList();
                _super.prototype.SetProperty.call(this, "OptionsLive", tLst);
                _super.prototype.SetProperty.call(this, "LiveOptions", tLst);
                this.CreateComboOptions(tLst, this.GetProperty("Value"), true);
                this.ApplySkiny();
                return true;
            }
            return false;
        };
        ctrlComboBox.prototype.CreateComboOptions = function (pChoiceOptions, pContent, SortOptions) {
            if (!pChoiceOptions)
                return;
            this.MyCurrentData = new Array();
            this.HasGroups = false;
            var tOpt;
            var i;
            if (pChoiceOptions.substr(0, 1) === "[") {
                var tJOpgs = JSON.parse(pChoiceOptions);
                for (i = 0; i < tJOpgs.length; i++) {
                    tOpt = new cdeNMI.TheComboOption;
                    tOpt.value = tJOpgs[i].V;
                    var tPrefix = "";
                    if (tOpt.value.startsWith("CDE_"))
                        tPrefix = "===> ";
                    if (tJOpgs[i].G || this.HasGroups) {
                        if (tJOpgs[i].G) {
                            tOpt.group = tJOpgs[i].G;
                            this.HasGroups = true;
                        }
                        else {
                            tOpt.group = "No Group";
                        }
                    }
                    if (tJOpgs[i].H)
                        tOpt.html = tJOpgs[i].H;
                    else
                        tOpt.label = tPrefix + tJOpgs[i].N.replace('_', ' ');
                    tOpt.disabled = cde.CBool(tJOpgs[i].D);
                    this.MyCurrentData.push(tOpt);
                }
            }
            else {
                var tGroups = pChoiceOptions.split(';:;');
                if (tGroups.length > 1) {
                    this.HasGroups = true;
                    tGroups.sort();
                }
                var tOps = void 0;
                for (var tGrp = 0; tGrp < tGroups.length; tGrp++) {
                    var tOption = tGroups[tGrp];
                    if (this.HasGroups) {
                        tOps = tGroups[tGrp].split(this.MySep);
                        if (tOps.length > 1)
                            tOption = tOps[1];
                    }
                    tOps = tOption.split(this.MySep);
                    if (SortOptions)
                        tOps.sort();
                    for (i = 0; i < tOps.length; i++) {
                        var tOptVal = tOps[i].split(':');
                        tOpt = new cdeNMI.TheComboOption;
                        if (tOptVal.length > 1)
                            tOpt.value = tOptVal[1];
                        else
                            tOpt.value = tOptVal[0];
                        if (this.HasGroups)
                            tOpt.group = tOps[0];
                        tOpt.label = tOptVal[0].replace('_', ' ');
                        this.MyCurrentData.push(tOpt);
                    }
                }
            }
            if (this.HasGroups === true) {
                this.BuildGroups();
            }
        };
        ctrlComboBox.prototype.BuildGroups = function () {
            var id = 1;
            var newData = [];
            var _loop_2 = function (i) {
                var tOpt = this_2.MyCurrentData[i];
                var tGroups = newData.filter(function (e) { return e.label === tOpt.group; });
                if (tGroups.length > 0) {
                    tGroups[0].choices.push(tOpt);
                }
                else {
                    var tNewGroup = new cdeNMI.TheComboOption();
                    //tNewGroup.disabled = true;
                    tNewGroup.id = id;
                    id++;
                    tNewGroup.value = tOpt.group;
                    tNewGroup.label = tOpt.group;
                    tNewGroup.choices = [];
                    tNewGroup.choices.push(tOpt);
                    newData.push(tNewGroup);
                }
            };
            var this_2 = this;
            for (var i = 0; i < this.MyCurrentData.length; i++) {
                _loop_2(i);
            }
            this.MyCurrentData = newData;
        };
        ctrlComboBox.prototype.CreateComboFromLookup = function (pMyStorageMirror, pCookie) {
            var tArray = [];
            var tComboControl = pCookie.ComboControl;
            if (!pMyStorageMirror) {
                if (pCookie.GroupName)
                    tComboControl.CreateComboOptions('[{"G":"Other Options...","V":"CDE_LLL","N":"Loading, please wait..."}]', "CDE_LLL", false); //"G":"Other Options...",
                else
                    tComboControl.CreateComboOptions('[{"V":"CDE_LLL","N":"Loading, please wait..."}]', "CDE_LLL", false); //"G":"Other Options...",
                if (!this.myChoices)
                    this.ComboUpdateValue("CDE_LLL");
                return;
            }
            var tOpt;
            try {
                var tGroupLookup = this.GetProperty("GroupLookup");
                var tFilter = this.GetProperty("Filter"); //"Platform=2"; // 
                var tFilterFld = null;
                var tFilterVal = [];
                if (tFilter && tFilter.split('=').length > 1) {
                    tFilterFld = tFilter.split('=')[0];
                    var tFVal = tFilter.split('=')[1];
                    if (tFVal.substr(0, 1) === "[")
                        tFilterVal = JSON.parse(tFVal);
                    else
                        tFilterVal[0] = tFVal;
                }
                tComboControl.MyCurrentData = new Array();
                if (pCookie.GroupName) { //Has Groups
                    tComboControl.HasGroups = true;
                }
                var row = void 0;
                for (row = 0; row < pMyStorageMirror.length; row++) {
                    var tRow = pMyStorageMirror[row];
                    if (tRow[tFilterFld] && tFilterVal.length > 0) {
                        var tFound = false;
                        for (var iii = 0; iii < tFilterVal.length; iii++) {
                            if (tRow[tFilterFld] === tFilterVal[iii]) {
                                tFound = true;
                                break;
                            }
                        }
                        if (!tFound)
                            continue;
                    }
                    if (tComboControl.HasGroups) {
                        var tGroup = cdeNMI.GetFldContentByName(tRow, pCookie.GroupName, false);
                        if (tGroup && tGroup !== "")
                            tArray.push(tRow);
                    }
                    else {
                        var tName = cdeNMI.GetFldContentByName(tRow, pCookie.SrcFld, false);
                        if (tName && tName !== "")
                            tArray.push(tRow);
                    }
                }
                if (tComboControl.HasGroups)
                    tArray = cdeNMI.SortArrayByProperty(tArray, pCookie.GroupName, false, false);
                else
                    tArray = cdeNMI.SortArrayByProperty(tArray, pCookie.SrcFld, false, false);
                for (row = 0; row < tArray.length; row++) {
                    tOpt = new cdeNMI.TheComboOption();
                    if (tComboControl.HasGroups) {
                        var tGR = cdeNMI.GetFldContentByName(tArray[row], pCookie.GroupName, false);
                        if (tGroupLookup)
                            tGR = this.GetTextFromOptions(tGR, tGroupLookup);
                        tOpt.group = tGR;
                    }
                    var tText = cdeNMI.GetFldContentByName(tArray[row], pCookie.SrcFld, false);
                    var tVal = tText;
                    if (pCookie.TgtID)
                        tVal = cdeNMI.GetFldContentByName(tArray[row], pCookie.TgtID, false);
                    if (!cde.IsNotSet(tVal))
                        tOpt.value = tVal;
                    tOpt.label = tText;
                    tComboControl.MyCurrentData.push(tOpt);
                }
            }
            catch (eee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", this.ControlText + ":CreateComboFromLookup:AssembleData", eee);
            }
            if (cde.CBool(tComboControl.GetProperty("RefreshOnLoad")) !== true) {
                tOpt = new cdeNMI.TheComboOption();
                if (tComboControl.HasGroups) {
                    tOpt.group = "Other Options...";
                }
                tOpt.value = 'CDE_LLL';
                tOpt.label = "--- Select to Load Lookup Table ---";
                tComboControl.MyCurrentData.push(tOpt);
            }
            if (cde.CBool(tComboControl.GetProperty("AddEmptyEntry")) === true) {
                tOpt = new cdeNMI.TheComboOption();
                if (tComboControl.HasGroups) {
                    tOpt.group = "Other Options...";
                }
                tOpt.value = 'CDE_NOP';
                tOpt.label = "- empty -";
                tComboControl.MyCurrentData.push(tOpt);
            }
            if ((tComboControl.MyFieldInfo.Flags & 2) === 0)
                tComboControl.MyComboBox.disabled = true;
            if (tComboControl.myChoices) {
                try {
                    tComboControl.myChoices.setChoices(tComboControl.MyCurrentData, "value", "label", true);
                }
                catch (eee) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", this.ControlText + ":CreateComboFromLookup", eee);
                    tComboControl.NeedRefresh = true;
                    tComboControl.ApplySkiny();
                }
            }
        };
        ctrlComboBox.prototype.GetTextFromOptions = function (pContent, pOptions) {
            var tOps = pOptions.split(this.MySep);
            for (var i = 0; i < tOps.length; i++) {
                var tOptVal = tOps[i].split(':');
                if (tOptVal.length > 1) {
                    if (pContent === tOptVal[1] || ((!pContent || pContent === '') && tOptVal[1] === '0'))
                        return tOptVal[0];
                }
                else {
                    if (pContent === tOptVal[0])
                        return tOptVal[0];
                }
            }
            return pContent;
        };
        ctrlComboBox.prototype.ShowComboPicker = function () {
            if (this.MyFieldInfo && this.MyFieldInfo["OptionsLive"]) {
                var tChoiceOptions = this.MyFieldInfo["OptionsLive"];
                var tParas = tChoiceOptions.split(':');
                if (tParas.length > 1) {
                    switch (tParas[1]) {
                        case "PROPERTYPICKER":
                            tChoiceOptions = this.GetProperty("LiveOptions");
                            if (!tChoiceOptions) {
                                if (tParas[2].length > 0) {
                                    if (cdeNMI.MyEngine) {
                                        cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:PROPERTYPICKER:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ':' + tParas[2], '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                                        tChoiceOptions = "loading ... please wait";
                                    }
                                    else {
                                        tChoiceOptions = "No NMI Engine available - cannot load";
                                    }
                                }
                                else {
                                    tChoiceOptions = "You have to Select a Thing first";
                                }
                            }
                            else {
                                this.CreateComboOptions(tChoiceOptions, this.GetProperty("Value"), true);
                                this.NeedRefresh = true;
                                this.ApplySkiny();
                            }
                            break;
                    }
                }
            }
            try {
                this.myChoices.showDropdown();
            }
            catch (e) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", this.ControlText + ":ShowComboPicker", e);
            }
        };
        ctrlComboBox.prototype.ComboSelect = function (pEle) {
            this.ComboUpdateValue(pEle.value);
        };
        ctrlComboBox.prototype.ComboUpdateValue = function (pValue, DoRemove) {
            if (pValue === "CDE_PPP") {
                this.SetProperty("LiveOptions", null);
                this.ShowComboPicker();
            }
            else if (pValue === "CDE_LLL") {
                this.NeedRefresh = true;
                if (cdeNMI.MyEngine)
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:' + this.MyTableName + ':CMyTable:' + this.MyTableName + ':' + this.MyScreenID + ":false:true", '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
            }
            else {
                if (cde.CBool(this.GetProperty("AllowMultiSelect"))) {
                    var allVal = this.myChoices.getValue(true);
                    if (!DoRemove)
                        allVal.push(pValue);
                    pValue = allVal.join(this.MySep);
                    if (pValue.length === 0)
                        pValue = null;
                }
                else if (DoRemove === true) {
                    pValue = null;
                }
                var tOldVal = this.GetProperty("Value");
                if (tOldVal !== pValue) {
                    //if (cde.CBool(this.GetProperty("AllowMultiSelect")) && tOldVal) {
                    //    const tC = tOldVal.split(this.MySep);
                    //    if (tC.length > 0 && tC.filter(e => e === pValue).length>0) {
                    //        return;
                    //    }
                    //}
                    //else
                    this.SetProperty("Value", pValue);
                    return true;
                }
            }
            return false;
        };
        return ctrlComboBox;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlComboBox = ctrlComboBox;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ctrlComboLookup = /** @class */ (function (_super) {
        __extends(ctrlComboLookup, _super);
        function ctrlComboLookup(pTRF) {
            return _super.call(this, pTRF) || this;
        }
        ctrlComboLookup.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            if (this.MyBaseType === cdeNMI.cdeControlType.BaseControl) {
                this.MyBaseType = cdeNMI.cdeControlType.ComboLookup;
                this.ControlText = "ctrlComboLookup";
            }
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            return true;
        };
        ctrlComboLookup.prototype.CalculateOption = function () {
            if (this.myChoices)
                return;
            if (!this.MyComboDiv) {
                this.MyComboDiv = document.createElement("div");
                this.MyComboDiv.className = "cdeComboBox";
                this.SetElement(this.MyComboDiv);
            }
            if (!this.MyComboBox) {
                this.MyComboBox = document.createElement("select");
                this.MyComboBox.id = cde.GuidToString(this.GetProperty("ID"));
                ;
                if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption) {
                    this.MyComboBox.multiple = true;
                }
                this.MyComboDiv.appendChild(this.MyComboBox);
            }
            if (this.GetSetting("GroupFld"))
                this.HasGroups = true;
            //var tParas: string[] = "LOOKUP:b510837f-3b75-4cf2-a900-d36c19113a13:MyPropertyBag.FriendlyName.Value:cdeMID:MyPropertyBag.DeviceType.Value:FAFA22FF-96AC-42CF-B1DB-7C073053FC39".split(':');
            this.MyTableName = cde.GuidToString(this.GetSetting("StorageTarget"));
            if (!this.MyLookup) {
                this.MyLookup = { ComboControl: this, Content: this.GetProperty("Value"), SrcFld: this.GetProperty("NameFld"), TgtID: this.GetSetting("ValueFld"), GroupName: this.GetSetting("GroupFld") };
            }
            if (cdeNMI.MyEngine) {
                var tScreenid = this.MyScreenID;
                if (this.GetSetting("ModelID"))
                    tScreenid = this.GetSetting("ModelID");
                this.MyScreenID = tScreenid;
                cdeNMI.MyEngine.LoadTableLazy(tScreenid, this.MyTableName, this.HandleLazyLoad, this.MyLookup);
                return;
            }
            this.SetProperty("HasChoices", true);
            this.ApplySkiny();
        };
        ctrlComboLookup.prototype.OnShowDropDown = function () {
            try {
                if (!this.HasLoaded || cde.CBool(this.GetProperty("RefreshOnLoad")) === true)
                    this.ComboUpdateValue("CDE_LLL");
            }
            catch (ee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", this.ControlText + ":onBeforeShow", "Exception :" + ee);
            }
        };
        ctrlComboLookup.prototype.SetOptions = function () {
            this.myChoicesOptions.editItems = true;
            this.myChoicesOptions.searchEnabled = true;
            this.myChoicesOptions.removeItemButton = true;
            this.myChoicesOptions.maxItemCount = 1;
            this.myChoicesOptions.searchResultLimit = 100;
        };
        return ctrlComboLookup;
    }(cdeNMI.ctrlComboBox));
    cdeNMI.ctrlComboLookup = ctrlComboLookup;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ctrlPropertyPicker = /** @class */ (function (_super) {
        __extends(ctrlPropertyPicker, _super);
        function ctrlPropertyPicker(pTRF) {
            return _super.call(this, pTRF) || this;
        }
        ctrlPropertyPicker.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            if (this.MyBaseType === cdeNMI.cdeControlType.BaseControl) {
                this.ControlText = "ctrlPropertyPicker";
                this.RefreshCombo = '[{"V":"CDE_NOP","N":"loading...please wait"}]';
                this.MyBaseType = cdeNMI.cdeControlType.PropertyPicker;
            }
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            return true;
        };
        ctrlPropertyPicker.prototype.SetProperty = function (pName, pValue) {
            if (pName === "LiveOptions" && pValue) {
                _super.prototype.SetProperty.call(this, pName, pValue);
                this.LoadComboContent(this.DoShow);
                return;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlPropertyPicker.prototype.CalculateOption = function () {
            if (this.myChoices)
                return;
            if (!this.MyComboDiv) {
                this.MyComboDiv = document.createElement("div");
                this.MyComboDiv.className = "cdeComboBox";
                this.SetElement(this.MyComboDiv);
            }
            if (!this.MyComboBox) {
                this.MyComboBox = document.createElement("select");
                this.MyComboBox.id = cde.GuidToString(this.GetProperty("ID"));
                ;
                if (cde.CBool(this.GetProperty("AllowMultiSelect"))) {
                    this.MyComboBox.multiple = true;
                }
                this.MyComboDiv.appendChild(this.MyComboBox);
            }
            this.RegisterNMIControl();
            this.CreateComboOptions(this.RefreshCombo, "CDE_NOP", false);
            this.SetProperty("HasChoices", true);
            this.ApplySkiny();
        };
        ctrlPropertyPicker.prototype.OnShowDropDown = function () {
            try {
                if (!this.GetProperty("LiveOptions") || this.GetProperty("LiveOptions").substr(0, 15) === '[{"V":"CDE_NOP"')
                    this.LoadComboContent(false);
            }
            catch (ee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", this.ControlText + ":onBeforeShow", "Exception :" + ee);
            }
        };
        ctrlPropertyPicker.prototype.LoadComboContent = function (bForceShow) {
            var tChoiceOptions = this.GetProperty("LiveOptions");
            if (!tChoiceOptions) {
                var tThingID = this.GetThingID();
                if ((tThingID === null || tThingID === void 0 ? void 0 : tThingID.length) > 0) {
                    if (cdeNMI.MyEngine) {
                        cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:PROPERTYPICKER:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ':' + tThingID, '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                        if (bForceShow)
                            this.UpdatePicker(bForceShow);
                    }
                    else {
                        this.DoShow = bForceShow;
                        this.SetProperty("LiveOptions", '[{"V":"CDE_NOP","N":"No NMI Engine available - cannot load"}]');
                    }
                }
                else {
                    this.DoShow = bForceShow;
                    this.SetProperty("LiveOptions", '[{"V":"CDE_NOP","N":"You have to Select a Thing first"}]');
                }
            }
            else {
                this.CreateComboOptions(tChoiceOptions, this.GetProperty("Value"), true);
                this.UpdatePicker(bForceShow);
            }
            this.DoShow = false;
        };
        ctrlPropertyPicker.prototype.UpdatePicker = function (bForceShow) {
            this.NeedRefresh = true;
            this.ApplySkiny();
            if (bForceShow)
                this.ShowComboPicker();
        };
        ctrlPropertyPicker.prototype.ComboUpdateValue = function (pValue, DoRemove) {
            if (pValue === "CDE_PPP") {
                this.SetProperty("LiveOptions", null);
                this.LoadComboContent(false);
            }
            else {
                return _super.prototype.ComboUpdateValue.call(this, pValue, DoRemove);
            }
            return false;
        };
        ctrlPropertyPicker.prototype.GetThingID = function () {
            var tFld = this.GetProperty("ThingFld");
            if (tFld === 0)
                return null;
            var tCtrl;
            if (this.MyTE && this.MyTE.MyDataView)
                tCtrl = this.MyTE.MyDataView.GetControlByFldNo(this.MyTRF.RowNo, tFld);
            else {
                if (this.MyDataView)
                    tCtrl = this.MyDataView.GetControlByFldNo(this.MyTRF.RowNo, tFld);
            }
            if (!tCtrl)
                return null;
            return tCtrl.GetProperty("Value");
        };
        return ctrlPropertyPicker;
    }(cdeNMI.ctrlComboLookup));
    cdeNMI.ctrlPropertyPicker = ctrlPropertyPicker;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ctrlDeviceTypePicker = /** @class */ (function (_super) {
        __extends(ctrlDeviceTypePicker, _super);
        function ctrlDeviceTypePicker(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.MyThingFriendlyName = null;
            return _this;
        }
        ctrlDeviceTypePicker.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.RefreshCombo = '[{"V":"CDE_NOP","N":"loading...please wait"}]';
            this.MyBaseType = cdeNMI.cdeControlType.DeviceTypePicker;
            this.ControlText = "ctrlDeviceTypePicker";
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            return true;
        };
        ctrlDeviceTypePicker.prototype.LoadComboContent = function (bForceShow) {
            var tChoiceOptions = this.GetProperty("LiveOptions");
            if (!tChoiceOptions) {
                if (cdeNMI.MyEngine) {
                    var tFilter = "";
                    if (this.GetProperty("Filter"))
                        tFilter = cdeNMI.GenerateFinalString(this.GetProperty("Filter"), null, this.MyTRF);
                    var tRemotes = cde.CBool(this.GetProperty("IncludeRemotes"));
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:DEVICETYPEPICKER:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ';76;' + this.MyFieldInfo.FldOrder + ':' + tRemotes + ':' + tFilter, '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                }
                else {
                    this.CreateComboOptions('[{"V":"CDE_NOP","N":"No DeviceType available - nothing to show"}]', "CDE_NOP", false);
                    this.UpdatePicker(bForceShow);
                }
            }
            else {
                this.CreateComboOptions(tChoiceOptions, this.GetProperty("Value"), true);
                this.UpdatePicker(bForceShow);
            }
        };
        return ctrlDeviceTypePicker;
    }(cdeNMI.ctrlPropertyPicker));
    cdeNMI.ctrlDeviceTypePicker = ctrlDeviceTypePicker;
    var ctrlThingPicker = /** @class */ (function (_super) {
        __extends(ctrlThingPicker, _super);
        function ctrlThingPicker(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.MyThingFriendlyName = null;
            return _this;
        }
        ctrlThingPicker.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.RefreshCombo = '[{"G":"Other Options...","V":"CDE_PPP","N":"Please select..."}]';
            this.MyBaseType = cdeNMI.cdeControlType.ThingPicker;
            this.ControlText = "ctrlThingPicker";
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            return true;
        };
        ctrlThingPicker.prototype.SetProperty = function (pName, pValue) {
            if (pName === "Value" || pName === "iValue") {
                if (this.GetProperty("Value") !== pValue)
                    this.MyThingFriendlyName = null;
                this.GetNameFromValue(pValue);
                if (this.MyThingFriendlyName) {
                    var tC = new cdeNMI.TheComboOption();
                    tC.value = pValue;
                    tC.label = this.MyThingFriendlyName;
                    pValue = tC;
                    pName = "SetChoiceV";
                }
            }
            if (pName === "ThingFriendlyName" && pValue) {
                this.MyThingFriendlyName = pValue;
                var tC = new cdeNMI.TheComboOption();
                tC.value = this.GetProperty("Value");
                tC.label = this.GetNameFromValue(pValue);
                pValue = tC;
                pName = "SetChoice";
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlThingPicker.prototype.GetNameFromValue = function (pVal) {
            if (!pVal || pVal.length === 0)
                return pVal;
            if (!this.MyThingFriendlyName) {
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:THINGRESOLVE:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ';63;' + this.MyFieldInfo.FldOrder + ':' + pVal, '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                }
                return pVal;
            }
            else {
                return this.MyThingFriendlyName;
            }
        };
        ctrlThingPicker.prototype.SetThingFriendlyName = function (pValue) {
            if (!this.GetProperty("LiveOptions"))
                return;
            try {
                var tJOpgs = JSON.parse(this.GetProperty("LiveOptions"));
                for (var i = 0; i < tJOpgs.length; i++) {
                    if (tJOpgs[i].V === pValue) {
                        this.SetProperty("ThingFriendlyName", tJOpgs[i].N);
                        return;
                    }
                }
            }
            catch (eee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ctrlThingPicker:GetFriendlyName", eee);
            }
        };
        ctrlThingPicker.prototype.LoadComboContent = function (bForceShow) {
            var tChoiceOptions = this.GetProperty("LiveOptions");
            if (!tChoiceOptions) {
                if (cdeNMI.MyEngine) {
                    var tEngs = cde.CBool(this.GetProperty("IncludeEngines"));
                    var tRemotes = cde.CBool(this.GetProperty("IncludeRemotes"));
                    var tFilter = "";
                    if (this.GetProperty("Filter"))
                        tFilter = cdeNMI.GenerateFinalString(this.GetProperty("Filter"), null, this.MyTRF);
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:THINGPICKER:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ';63;' + this.MyFieldInfo.FldOrder + ':' + tEngs + ':' + tRemotes + ':' + tFilter, '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                }
                else {
                    this.CreateComboOptions('[{"G":"Other Options...","V":"CDE_NOP","N":"No NMI Engine available - cannot load"}]', "CDE_NOP", false);
                    this.UpdatePicker(bForceShow);
                }
            }
            else {
                this.CreateComboOptions(tChoiceOptions, this.GetProperty("Value"), true);
                this.UpdatePicker(bForceShow);
            }
        };
        ctrlThingPicker.prototype.ComboUpdateValue = function (pValue, DoRemove) {
            if (pValue === "CDE_PPP") {
                this.SetProperty("LiveOptions", null);
                this.LoadComboContent(false);
            }
            else {
                if (!DoRemove) {
                    this.SetThingFriendlyName(pValue);
                    return _super.prototype.ComboUpdateValue.call(this, pValue, DoRemove);
                }
            }
            return false;
        };
        return ctrlThingPicker;
    }(cdeNMI.ctrlPropertyPicker));
    cdeNMI.ctrlThingPicker = ctrlThingPicker;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
* Creates a pin button that can be used to visualize pin/unpinned elements
*
* (4.1 Ready!)
*/
    var ctrlPinButton = /** @class */ (function (_super) {
        __extends(ctrlPinButton, _super);
        function ctrlPinButton(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divPin = null;
            _this.rootDiv = null;
            return _this;
        }
        ctrlPinButton.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.PinButton;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.rootDiv = document.createElement("div");
            this.rootDiv.style.position = "relative";
            this.PreventDefault = true;
            this.SetElement(this.rootDiv, true);
            this.divPin = document.createElement("div");
            this.rootDiv.appendChild(this.divPin);
            //this.divPin.innerHTML = "<img src='/ClientBin/Images/e.png' width='32' height='32'/>";
            this.RegisterEvent("PointerUp", function (pControl, evt, pPointer) {
                _this.SetProperty("Value", !_this.GetProperty("Value"));
                if (_this.GetProperty("OnClick"))
                    _this.GetProperty("OnClick")(_this.GetProperty("Value"), evt, pPointer);
            });
            return true;
        };
        ctrlPinButton.prototype.SetProperty = function (pName, pValue) {
            if (pName === "ClassName" && this.divPin) {
                this.divPin.className = pValue;
                return;
            }
            else if (pName === "Top" && this.divPin) {
                pValue = cde.CInt(pValue);
                this.divPin.style.top = pValue + "px";
                return;
            }
            else if (pName === "Foreground" && this.divPin) {
                this.divPin.style.color = pValue;
                return;
            }
            else if (pName === "Right" && this.divPin) {
                pValue = cde.CInt(pValue);
                this.divPin.style.right = pValue + "px";
                return;
            }
            else if (pName === "OnPointerDown" && this.divPin) {
                if (pValue) {
                    this.PreventManipulation = true;
                    this.HookEvents(false);
                    this.RegisterEvent("PointerDown", pValue);
                }
            }
            else if (pName === "Content") {
                this.divPin.innerHTML = pValue;
                return;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        return ctrlPinButton;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlPinButton = ctrlPinButton;
    /**
* Creates a touch overlay ontop of the screen but attached to another control specified by pTargetControl
* this is used for entries in Tables or other inline controls
*
*
* (4.1 Ready!)
*/
    var ctrlTouchOverlay = /** @class */ (function (_super) {
        __extends(ctrlTouchOverlay, _super);
        function ctrlTouchOverlay(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divTiles = null;
            _this.CurrentControl = null;
            return _this;
        }
        ctrlTouchOverlay.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.TouchOverlay;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.CurrentControl = pTargetControl;
            this.divTiles = document.createElement('div');
            this.divTiles.className = "cdeOverlay";
            this.SetElement(this.divTiles, false);
            this.HookEvents(false);
            return true;
        };
        return ctrlTouchOverlay;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTouchOverlay = ctrlTouchOverlay;
    /**
* Creates a dynamic control from an HTML5 snipplet with subcontrols
*
* (4.1 Ready!) TODO: Verify with FacePlate containing Macros
*/
    var ctrlFacePlate = /** @class */ (function (_super) {
        __extends(ctrlFacePlate, _super);
        function ctrlFacePlate() {
            var _this = _super.call(this, null, null) || this;
            _this.mCtrlDIV = null;
            return _this;
        }
        ctrlFacePlate.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID); //sets all the properties that are coming from the plugin on the elements
            if (cde.CBool(this.GetSetting("IsPlainHTML")) === true && pTargetControl) {
                this.SetElement(pTargetControl.GetContainerElement());
            }
            else {
                this.mCtrlDIV = new cdeNMI.ctrlTileGroup();
                this.mCtrlDIV.InitControl(pTargetControl);
                this.mCtrlDIV.MyRootElement.style.width = "inherit";
                this.mCtrlDIV.MyRootElement.style.height = "inherit";
                this.SetElement(this.mCtrlDIV.GetElement());
            }
            return true;
        };
        ctrlFacePlate.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (!this.GetContainerElement())
                return;
            if (pName === "HTML") {
                cdeNMI.cdeParseHTML(this, this.MyTRF, pValue);
            }
            else if (pName === "HTMLUrl") {
                cdeNMI.MyEngine.cdeGetResource(pValue, function (cookie, data) {
                    if (data && !data.startsWith("ERR:")) {
                        cdeNMI.cdeParseHTML(_this, _this.MyTRF, data);
                        _this.FireEvent(true, "OnIsLoaded", true);
                    }
                });
            }
            else if (pName === "Background") {
                this.mCtrlDIV.GetElement().style.background = pValue;
            }
        };
        return ctrlFacePlate;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlFacePlate = ctrlFacePlate;
    /**
* Creates a area that allows to upload files to the owner Service (Plugin) and Relay
*
* (4.1 Ready!)
*/
    var ctrlDropUploader = /** @class */ (function (_super) {
        __extends(ctrlDropUploader, _super);
        function ctrlDropUploader(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mFileList = [];
            return _this;
        }
        ctrlDropUploader.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.DropUploader;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mContentTarget = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetControl, { TRF: this.MyTRF }); // ctrlTileGroup.Create(pTargetControl, null);
            this.mContentTarget.SetProperty("ClassName", "ctrlDropUploader");
            this.mContentTarget.SetInitialSize(0);
            this.mZoomImg = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Picture).Create(this.mContentTarget); //ctrlZoomImage.Create(this.mContentTarget);
            this.mZoomImg.SetProperty("Visibility", false);
            this.mZoomImg.SetProperty("Style", "width:100%;height:100%");
            //this.mInfo = ctrlSmartLabel.Create(this.mContentTarget, null, null, "", "p");
            this.mInfo = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.mContentTarget, { PreInitBag: ["Element=p"] });
            var holder = this.mContentTarget.GetElement();
            holder.ondragover = function () {
                _this.mContentTarget.GetElement().className = 'ctrlDropUploaderHover';
                return false;
            };
            holder.ondragend = function () {
                _this.mContentTarget.GetElement().className = 'ctrlDropUploader';
                return false;
            };
            holder.ondragleave = function () {
                _this.mContentTarget.GetElement().className = 'ctrlDropUploader';
                return false;
            };
            holder.ondrop = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this.mContentTarget.GetElement().className = 'ctrlDropUploader';
                _this.ProcessFiles(e.dataTransfer.files);
            };
            this.SetElement(this.mContentTarget.GetElement());
            return true;
        };
        ctrlDropUploader.prototype.SetProperty = function (pName, pValue) {
            if (pName === "iValue" || pName === "Value") {
                if (this.mZoomImg && (pValue.toLowerCase().indexOf(".jpg") > 0 || pValue.toLowerCase().indexOf(".jpeg") > 0 || pValue.toLowerCase().indexOf(".png") > 0)) {
                    this.mZoomImg.SetProperty("Visibility", true);
                    this.mZoomImg.SetProperty("Source", pValue);
                    this.mInfo.SetProperty("Visibility", false);
                }
                else {
                    this.mInfo.SetProperty("Visibility", true);
                    this.mInfo.GetElement().innerHTML = pValue;
                }
            }
            else if (pName === "Title") {
                this.mInfo.SetProperty("iValue", pValue);
            }
            else if (pName === "Foreground" && this.mContentTarget) {
                this.mContentTarget.SetProperty("Foreground", pValue);
            }
            else if (pName === "Background" && this.mContentTarget) {
                this.mContentTarget.SetProperty("Background", pValue);
            }
            else {
                _super.prototype.SetProperty.call(this, pName, pValue);
            }
        };
        ctrlDropUploader.prototype.UploadNext = function () {
            if (this.mFileList.length) {
                var nextFile = this.mFileList.shift();
                var tFileSize = this.GetProperty("MaxFileSize");
                if (!tFileSize) {
                    tFileSize = 512000;
                }
                if (tFileSize > 500000000)
                    tFileSize = 500000000;
                if (nextFile.size >= tFileSize) { // 262144) { // 256kb
                    this.mInfo.GetElement().innerHTML += "File " + nextFile.name + " size " + nextFile.size + " too big - Max: " + tFileSize;
                    this.OnComplete(nextFile.size);
                }
                else {
                    this.mInfo.GetElement().innerHTML = "Reading: " + nextFile.name;
                    this.UploadFile(nextFile, status);
                }
            }
            else {
                this.mContentTarget.GetElement().className = 'ctrlDropUploader';
            }
        };
        ctrlDropUploader.prototype.OnComplete = function (size) {
            this.UploadNext();
        };
        ctrlDropUploader.prototype.UploadFile = function (file, status) {
            var _this = this;
            var reader = new FileReader();
            this.mInfo.GetElement().innerHTML = "Uploading: " + file.name;
            ;
            reader.onload = function (evt) {
                var tres = reader.result;
                if (_this.MyEngineName) {
                    var tFileName = file.name;
                    var tDir = _this.GetProperty("TargetDir");
                    if (tDir) {
                        if (tDir.substr(tDir.length - 1, 1) !== '\\')
                            tDir += "\\";
                        tFileName = tDir + tFileName;
                    }
                    if (_this.MyFieldInfo) {
                        var tPushName = "CDE_FILEPUSH:" + tFileName + ":" + _this.MyFieldInfo.cdeO;
                        if (_this.GetProperty("Cookie"))
                            tPushName += ":" + _this.GetProperty("Cookie");
                        if (cde.CBool(_this.GetProperty("AllowGlobalPush")) && cde.MyBaseAssets.MyEngines[_this.MyEngineName])
                            cdeCommCore.PublishCentral(_this.MyEngineName, tPushName, tres);
                        else
                            cdeCommCore.PublishToNode(_this.MyFieldInfo.cdeN, _this.MyEngineName, tPushName, tres);
                    }
                }
                _this.FireEvent(false, "OnFilePushed", evt.target);
                if (_this.mZoomImg && tres.indexOf("image") > 0) {
                    _this.mZoomImg.SetProperty("Visibility", true);
                    _this.mZoomImg.SetProperty("Source", tres);
                    _this.mInfo.SetProperty("Visibility", false);
                }
                else {
                    _this.mInfo.SetProperty("Visibility", true);
                    _this.mInfo.GetElement().innerHTML = file.name + " - Done";
                }
            };
            reader.readAsDataURL(file);
        };
        ctrlDropUploader.prototype.ProcessFiles = function (pFileList) {
            if (!pFileList || !pFileList.length || this.mFileList.length)
                return;
            for (var i = 0; i < pFileList.length; i++) {
                this.mFileList.push(pFileList[i]);
            }
            this.UploadNext();
        };
        ///legacy support
        ctrlDropUploader.Create = function (pTargetControl, pTargetEngine, pTRF, pTitle) {
            var t = new ctrlDropUploader(pTRF);
            t.MyEngineName = pTargetEngine;
            t.InitControl(pTargetControl, pTRF);
            if (pTitle)
                t.SetProperty("Title", pTitle);
            return t;
        };
        return ctrlDropUploader;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlDropUploader = ctrlDropUploader;
    /**
    * Creates a Zoom Image - size of one Tile and zooms to 3x Tiles if zooming is enabled
    *
    * This control is NOT and input control for Form or Table
    * (4.1 Ready!)
    */
    var ctrlZoomImage = /** @class */ (function (_super) {
        __extends(ctrlZoomImage, _super);
        function ctrlZoomImage(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.Img = null;
            _this.imgNumber = 0;
            _this.MyZoom = null;
            return _this;
        }
        ctrlZoomImage.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Picture;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.HostDiv = document.createElement('div');
            this.Img = document.createElement('img');
            this.Img.className = "Blocked";
            this.Img.style.width = "inherit";
            this.Img.style.height = "inherit";
            this.Img.addEventListener('error', function (evt) {
                _this.OnImgError(evt);
            });
            this.HostDiv.appendChild(this.Img);
            if (cde.CBool(this.GetSetting("EnableZoom")) === true) {
                this.MyZoom = new Zoom(this.Img, { rotate: cde.CBool(this.GetSetting("AllowRotate")) }, null);
            }
            _super.prototype.SetProperty.call(this, "ZoomLevel", 1);
            this.SetElement(this.HostDiv, true);
            this.RegisterEvent("Resize", function (sender, newSize) {
                if (newSize <= cde.CInt(_this.GetProperty("MaxTileWidth")) && newSize >= cde.CInt(_this.GetProperty("MinTileWidth"))) {
                    _this.MyTE.SetProperty("TileWidth", newSize);
                    switch (newSize) {
                        case 6:
                            _this.MyTE.SetProperty("TileHeight", 5);
                            break;
                        default:
                            _this.MyTE.SetProperty("TileHeight", (newSize / 4 * 3));
                            break;
                    }
                    //this.SetProperty("ControlTW", newSize);
                }
            });
            return true;
        };
        ctrlZoomImage.prototype.SetProperty = function (pName, pValue) {
            var tTile = 0;
            if (pName === "Name") {
                if (this.Img)
                    this.Img.alt = pValue;
            }
            else if ((pName === "Source" || pName === "Value" || pName === "iValue") && this.Img) {
                try {
                    if (pValue && pValue.startsWith("FA")) {
                        pValue = "<i class='fa faIcon " + (pValue.substr(3, 1) === "S" ? "fa-spin " : "") + "fa-" + pValue.substr(2, 1) + "x'>&#x" + pValue.substr(4, pValue.length - 4) + ";</i>";
                    }
                    else if (pValue && (pValue.substring(0, 5) === "data:" || cde.CBool(_super.prototype.GetProperty.call(this, "IsBlob")) || pValue.length > 512)) {
                        var tformat = _super.prototype.GetProperty.call(this, "ImgFormat");
                        if (!tformat)
                            tformat = "jpeg";
                        if (pValue.substr(0, 5) !== "data:")
                            pValue = "data:image/" + tformat + ";base64," + pValue;
                        if (!this.HostDiv.className)
                            this.HostDiv.className = "cdeLiveImg";
                        this.Img.src = pValue;
                    }
                    else if (pValue) {
                        var tPa = cde.CStr(pValue).split(';');
                        var tImgSrc = pValue;
                        if (tPa.length > 1) {
                            this.SetProperty("ImageOpacity", tPa[1]);
                            if (tPa.length > 2)
                                tImgSrc = tPa[0];
                            else
                                tImgSrc = cde.FixupPath(tPa[0]);
                        }
                        var tN = cde.MyBaseAssets.MyCommStatus.InitialNPA;
                        this.Img.src = cde.FixupPath(tImgSrc + (!tN ? "" : "?SID=" + tN.substr(4, tN.length - (4 + (tN.indexOf(".ashx") > 0 ? 5 : 0)))));
                    }
                }
                catch (ex) {
                    cdeNMI.ShowToastMessage(pValue + ":IMG SETP ERROR:" + ex);
                }
                if (pName === "Source" || !pValue)
                    return;
            }
            else if (pName === "ZoomLevel") {
                this.OnClickFunction(this, null, null);
            }
            else if (pName === "ControlTW") {
                tTile = cdeNMI.GetSizeFromTile(cde.CInt(pValue));
                if (tTile > 0) {
                    var tSKY = cde.CInt(this.GetProperty("TileFactorX"));
                    if (tSKY > 1)
                        tTile /= tSKY;
                    this.Img.width = tTile;
                    this.Img.style.width = tTile + "px";
                }
            }
            else if (pName === "ControlTH") {
                tTile = cdeNMI.GetSizeFromTile(cde.CInt(pValue));
                if (tTile > 0) {
                    var tSKY = cde.CInt(this.GetProperty("TileFactorY"));
                    if (tSKY > 1)
                        tTile /= tSKY;
                    this.Img.height = tTile;
                    this.Img.style.height = tTile + "px";
                }
            }
            else if (pName === "Width") {
                tTile = cde.CDbl(pValue);
                if (tTile > 0) {
                    var tSKY = cde.CInt(this.GetProperty("TileFactorX"));
                    if (tSKY > 1)
                        tTile /= tSKY;
                    this.Img.width = tTile;
                }
            }
            else if (pName === "Height") {
                tTile = cde.CDbl(pValue);
                if (tTile > 0) {
                    var tSKY = cde.CInt(this.GetProperty("TileFactorY"));
                    if (tSKY > 1)
                        tTile /= tSKY;
                    this.Img.height = tTile;
                }
            }
            else if (pName === "ImageOpacity" && this.Img) {
                this.Img.style.opacity = pValue;
            }
            else if (pName === "StartSequence") {
                this.RequestRedraw();
            }
            else if (pName === "Background") {
                this.HostDiv.style.backgroundColor = pValue;
            }
            else if (pName === "EnableZoom") {
                this.EnabledZoom();
                this.HookEvents(false);
            }
            else if (pName === "ClassName") {
                this.Img.className = pValue;
            }
            else if (pName === "OnClick") {
                this.HookEvents(false);
                //if (pValue && (typeof (pValue) == 'string') && pValue.toString().substr(0, 4) == "TTS:")
                //    pValue = "cdeNMI.MyScreenManager.TransitToScreen('" + pValue.substr(4) + "', true)";    //4.107:TODO Update with real SCreenManager
                this.RegisterEvent("OnClick", pValue);
                this.RegisterEvent("PointerUp", this.DoFireClick);
                this.Img.style.cursor = "pointer";
            }
            else if (pName === "AutoAdjust" && this.MyTarget) {
                this.Img.width = this.MyTarget.GetElement().clientWidth;
                this.Img.height = this.MyTarget.GetElement().clientHeight;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlZoomImage.prototype.OnImgError = function (evt) {
            if (cdeNMI.MyEngine) {
                var t_8 = this.Img.src;
                var f = cdeNMI.GetLocation(t_8).pathname;
                cdeNMI.MyEngine.cdeGetImage(f, function (pThis, pData) {
                    var tPlanar;
                    try {
                        tPlanar = JSON.parse(pData);
                        var tP = tPlanar.ImageSource.indexOf(".");
                        var tExt = tPlanar.ImageSource.substr(tP + 1);
                        pThis.SetProperty("Source", "data:image/" + tExt + ";base64," + tPlanar.Bits);
                    }
                    catch (ex) {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "SetProperty:OnImgError", "Image settting for  Inlining (" + tPlanar.ImageSource + ") failed with " + ex);
                    }
                }, this);
            }
        };
        ctrlZoomImage.prototype.EnabledZoom = function () {
            var _this = this;
            this.HostDiv.style.width = "";
            this.HostDiv.style.height = "";
            this.Img.style.cursor = "pointer";
            this.RegisterEvent("PointerUp", function (obj, evt, pPointer) {
                _this.OnClickFunction(obj, evt, pPointer);
            });
        };
        ctrlZoomImage.prototype.OnClickFunction = function (obj, evt, pPointer) {
            if (!this.Img || (pPointer && pPointer.PathLength() > cdeNMI.MyNMISettings.DeadPathLength))
                return;
            if (!this.Img ||
                cde.CBool(this.GetProperty("Disabled")) || (this.MyTRF && this.MyTRF.FldInfo && (this.MyTRF.FldInfo.Flags & 2) === 0)) {
                if (cde.CBool(this.GetProperty("EnableZoom")) === true && this.MyZoom) {
                    this.MyZoom.destroy();
                    this.MyZoom = new Zoom(this.Img, { rotate: cde.CBool(this.GetSetting("AllowRotate")) }, null);
                }
                return;
            }
            if (evt) {
                evt.cancelBubble = true;
                evt.stopPropagation();
            }
            var tH = cde.CDbl(this.GetProperty("FullHeight"));
            if (tH === 0)
                tH = this.Img.naturalHeight;
            if (tH === 0)
                tH = cdeNMI.GetSizeFromTile(1);
            var tW = cde.CDbl(this.GetProperty("FullWidth"));
            if (tW === 0)
                tW = this.Img.naturalWidth;
            if (tW === 0)
                tW = cdeNMI.GetSizeFromTile(1);
            var cTW = cde.CDbl(this.GetProperty("ControlTW"));
            if (cTW === 0)
                cTW = 1;
            var cTH = cde.CDbl(this.GetProperty("ControlTH"));
            if (cTH === 0)
                cTH = 1;
            switch (_super.prototype.GetProperty.call(this, "ZoomLevel")) {
                case 1:
                    {
                        if (this.Img.src.substr(0, 5) !== "data:" && this.Img.src.indexOf("_s.") > 0) {
                            var tUrl = this.Img.src.substr(0, this.Img.src.indexOf("_s."));
                            tUrl += this.Img.src.substr(this.Img.src.lastIndexOf("."));
                            this.Img.src = tUrl;
                            tW = this.Img.naturalWidth;
                        }
                        var tWid = cdeNMI.GetSizeFromTile(3);
                        if (tWid > tW) {
                            this.ShowNaturalSize(cTW, cTH, tW / tH);
                            break;
                        }
                        //$(this.Img).
                        //    animate({
                        //        "width": tWid,
                        //        "height": (tWid / (tW / tH))
                        //    },
                        //        500,
                        //        "easeOutCirc");
                        _super.prototype.SetProperty.call(this, "ZoomLevel", 2);
                    }
                    break;
                case 2:
                    {
                        var tWid2 = cdeNMI.GetSizeFromTile(6);
                        if (tWid2 > tW) {
                            this.ShowNaturalSize(cTW, cTH, tW / tH);
                            break;
                        }
                        //$(this.Img).
                        //    animate({
                        //        "width": tWid2,
                        //        "height": (tWid2 / (tW / tH))
                        //    },
                        //        500,
                        //        "easeOutCirc");
                        _super.prototype.SetProperty.call(this, "ZoomLevel", 3);
                    }
                    break;
                case 3:
                    {
                        var tWid3 = cdeNMI.GetSizeFromTile(12);
                        if (tWid3 > tW) {
                            tWid3 = tW;
                        }
                        //$(this.Img).
                        //    animate({
                        //        "width": tWid3,
                        //        "height": (tWid3 / (tW / tH))
                        //    },
                        //        500,
                        //        "easeOutCirc");
                        _super.prototype.SetProperty.call(this, "ZoomLevel", 0);
                    }
                    break;
                default:
                    this.ShowNaturalSize(cTW, cTH, tW / tH);
                    break;
            }
        };
        ctrlZoomImage.prototype.ShowNaturalSize = function (cTW, cTH, cRatio) {
            //var tWid3: number = cdeNMI.GetSizeFromTile(cTW);
            //if (cde.CBool(this.GetProperty("AutoAdjust"))) {
            //    //$(this.Img).animate({
            //    //    "width": cdeNMI.GetSizeFromTile(cTW),
            //    //    "height": cdeNMI.GetSizeFromTile(cTH)
            //    //}, 500, "easeOutCirc");
            //} else {
            //    //$(this.Img).animate({
            //    //    "width": tWid3,
            //    //    "height": (tWid3 / cRatio)
            //    //}, 500, "easeOutCirc");
            //}
            _super.prototype.SetProperty.call(this, "ZoomLevel", 1);
        };
        ctrlZoomImage.prototype.RedrawImage = function () {
            if (this.imgNumber > this.GetProperty("LastSeqNo")) {
                if (this.GetProperty("DoLoop") === true) {
                    this.imgNumber = 0;
                    this.RequestRedraw();
                }
            }
            else {
                this.Img.src = this.GetProperty("Value") + ("00000" + (this.imgNumber++).toString()).slice(-5) + ".png"; // "raining/Raining_"
                this.RequestRedraw();
            }
        };
        ctrlZoomImage.prototype.RequestRedraw = function () {
            var _this = this;
            var tWindow = window;
            if (tWindow.webkitRequestAnimationFrame)
                tWindow.webkitRequestAnimationFrame(function () {
                    _this.RedrawImage();
                });
            else
                window.setTimeout(function () {
                    _this.RedrawImage();
                }, Math.floor(1000 / 60));
        };
        //Backward compat
        ctrlZoomImage.Create = function (pTargetControl, pWidth, pHeight, pUrl, pClass) {
            var tTemp = new ctrlZoomImage();
            tTemp.InitControl(pTargetControl);
            if (pClass)
                tTemp.SetProperty("ClassName", pClass);
            if (pUrl) {
                if (pUrl.substring(0, 5) === "data:")
                    tTemp.HostDiv.className = "cdeLiveImg";
                tTemp.SetProperty("iValue", pUrl);
            }
            if (pWidth >= 0 && pHeight >= 0) {
                tTemp.EnabledZoom();
            }
            tTemp.SetProperty("FullHeight", pHeight);
            tTemp.SetProperty("FullWidth", pWidth);
            return tTemp;
        };
        return ctrlZoomImage;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlZoomImage = ctrlZoomImage;
    /**
* Creates a progress bar
*
* (4.1 Ready!)
*/
    var ctrlProgressBar = /** @class */ (function (_super) {
        __extends(ctrlProgressBar, _super);
        function ctrlProgressBar(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mWidth = 0;
            _this.mHeight = 0;
            return _this;
        }
        ctrlProgressBar.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.ProgressBar;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mBaseCtrl = cdeNMI.MyTCF.CreateBaseControl().Create(pTargetControl, { TRF: this.MyTRF });
            this.mBaseCtrl.SetElement(document.createElement("div"));
            this.mBaseCtrl.GetElement().className = "ctrlProgressBar";
            this.mBaseCtrl.SetInitialSize(0);
            this.mContentTarget = document.createElement("progress");
            this.mContentTarget.className = "ctrlProgressBar";
            this.mBaseCtrl.GetElement().appendChild(this.mContentTarget);
            this.SetElement(this.mBaseCtrl.GetElement());
            this.SetProperty("MaxValue", 100);
            return true;
        };
        ctrlProgressBar.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Background") {
                this.mContentTarget.style.background = pValue;
            }
            else if (pName === "Foreground") {
                this.mContentTarget.style.color = pValue;
            }
            else if (pName === "BarClassName") {
                this.mContentTarget.className = pValue;
            }
            else if (pName === "MaxValue") {
                pValue = cde.CInt(pValue);
                this.mContentTarget.max = pValue;
            }
            else if (pName === "Value" || pName === "iValue") {
                this.mContentTarget.value = cde.CDbl(pValue);
            }
        };
        //legacy support
        ctrlProgressBar.Create = function (pTargetControl, pTRF, pValue, pMaxVal) {
            var t = new ctrlProgressBar(pTRF);
            t.InitControl(pTargetControl, pTRF);
            if (pMaxVal) {
                t.SetProperty("MaxValue", pMaxVal);
            }
            if (!pValue)
                pValue = 0;
            t.SetProperty("iValue", pValue);
            return t;
        };
        return ctrlProgressBar;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlProgressBar = ctrlProgressBar;
    var ctrlProgressBarCool = /** @class */ (function (_super) {
        __extends(ctrlProgressBarCool, _super);
        function ctrlProgressBarCool(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mWidth = 0;
            _this.mHeight = 0;
            _this.mMaxValue = 100;
            return _this;
        }
        ctrlProgressBarCool.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.ProgressBar;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mBaseCtrl = cdeNMI.MyTCF.CreateBaseControl().Create(pTargetControl, { TRF: this.MyTRF });
            this.mBaseCtrl.SetElement(document.createElement("div"));
            this.mBaseCtrl.GetElement().className = "cdeMeter";
            this.mBaseCtrl.SetInitialSize(0);
            this.mContentTarget = document.createElement("span");
            this.mBaseCtrl.GetElement().appendChild(this.mContentTarget);
            this.mContentTarget.style.width = "0px";
            this.mContentTarget.style.height = (this.mBaseCtrl.MyHeight - 20) + "px";
            this.SetElement(this.mBaseCtrl.GetElement());
            cde.MyBaseAssets.RegisterEvent("ThemeSwitched", function () {
                if (!_this.GetProperty("Background")) {
                    if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                        _this.mBaseCtrl.GetElement().style.background = "rgba(80, 80, 80, 0.1)";
                    else
                        _this.mBaseCtrl.GetElement().style.background = "rgba(80, 80, 80, 0.5)";
                }
                _this.DoRender();
            });
            return true;
        };
        ctrlProgressBarCool.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Background") {
                this.mContentTarget.style.background = pValue;
            }
            else if (pName === "Foreground") {
                this.mContentTarget.style.color = pValue;
            }
            else if (pName === "BarClassName") {
                this.mContentTarget.className = pValue;
            }
            else if (pName === "MaxValue") {
                this.mMaxValue = cde.CInt(pValue);
                this.DoRender();
            }
            else if (pName === "Value" || pName === "iValue") {
                this.DoRender();
            }
        };
        ctrlProgressBarCool.prototype.DoRender = function () {
            var tLen = this.GetProperty("Value");
            if (tLen > this.mMaxValue)
                tLen = this.mMaxValue;
            var tWid = (this.mBaseCtrl.MyWidth - 20) / this.mMaxValue * tLen;
            this.mContentTarget.style.width = tWid + "px";
        };
        //legacy support
        ctrlProgressBarCool.Create = function (pTargetControl, pTRF, pValue, pMaxVal) {
            var t = new ctrlProgressBarCool(pTRF);
            t.InitControl(pTargetControl, pTRF);
            if (pMaxVal) {
                t.SetProperty("MaxValue", pMaxVal);
            }
            if (!pValue)
                pValue = 0;
            t.SetProperty("iValue", pValue);
            return t;
        };
        return ctrlProgressBarCool;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlProgressBarCool = ctrlProgressBarCool;
    /**
* Creates a VideoViewer. Target has to be set to zero to creat its own frame. Otherwise it will fill the parent container with the video
*
* (4.1 Ready!)
*/
    var ctrlVideoViewer = /** @class */ (function (_super) {
        __extends(ctrlVideoViewer, _super);
        function ctrlVideoViewer(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mVideo = null;
            _this.mVideoSource = null;
            _this.divFrame = null;
            _this.mCamBut = null;
            return _this;
        }
        ctrlVideoViewer.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.VideoViewer;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mVideo = document.createElement("video");
            this.mVideo.style.backgroundColor = "black";
            this.mVideo.autoplay = true;
            this.mVideo.style.width = "inherit";
            this.mVideo.style.height = "inherit";
            this.mVideo.onerror = function () { cdeNMI.ShowToastMessage("Cannot play Video"); };
            this.mVideoSource = document.createElement('source');
            this.mVideo.appendChild(this.mVideoSource);
            this.divFrame = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup);
            this.divFrame.InitControl(pTargetControl, this.MyTRF);
            this.divFrame.SetProperty("Background", "gray");
            this.divFrame.SetInitialSize(0);
            this.mCamBut = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.divFrame, { PostInitBag: ["Text=MyCam", "TileWidth=1", "TileHeight=1"] });
            this.mCamBut.SetProperty("OnClick", function () {
                _this.ShowLiveVideo();
            });
            this.mCamBut.SetProperty("Visibility", false);
            this.divFrame.GetElement().appendChild(this.mVideo);
            this.SetElement(this.divFrame.GetElement());
            return true;
        };
        ctrlVideoViewer.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if ((pName === "Source" || pName === "Value" || pName === "iValue") && this.mVideo) {
                if (pValue === "LIVE")
                    this.ShowLiveVideo();
                else {
                    this.mVideoSource.src = pValue;
                    this.mVideo.play();
                }
            }
            else if (pName === "ShowCam") {
                this.mCamBut.SetProperty("Visibility", true);
            }
            else if (pName === "Background") {
                this.mVideo.style.backgroundColor = pValue;
            }
            else if (pName === "MainBackground") {
                this.divFrame.SetProperty("Background", pValue);
            }
            else if (pName === "ClassName" && this.mVideo) {
                this.mVideo.className = pValue;
            }
            else if (pName === "ShowControls" && this.mVideo) {
                if (cde.CBool(pValue))
                    this.mVideo.setAttribute("controls", "");
                else
                    this.mVideo.removeAttribute("controls");
            }
        };
        ctrlVideoViewer.prototype.ShowLiveVideo = function () {
            var _this = this;
            var n = navigator;
            n.getUserMedia = n.getUserMedia || n.webkitGetUserMedia || n.mozGetUserMedia || n.msGetUserMedia;
            try {
                if (n.getUserMedia) {
                    this.mVideoSource.src = null;
                    n.getUserMedia({ video: true, audio: true }, function (stream) {
                        _this.mVideoSource.src = stream || stream; // Opera.
                        _this.mVideo.play();
                    }, function (error) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show("An Video-Display error occurred: [CODE " + error.code + "]", true);
                    });
                }
                else {
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Show("Native camera is not supported in this browser!", true);
                }
            }
            catch (e) {
                if (cdeNMI.MyPopUp)
                    cdeNMI.MyPopUp.Show("An Video-Display error occurred: " + e, true);
            }
        };
        return ctrlVideoViewer;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlVideoViewer = ctrlVideoViewer;
    /* Creates a single Check Box
    *
    * (4.1 Ready!)
    */
    var ctrlCheckBox = /** @class */ (function (_super) {
        __extends(ctrlCheckBox, _super);
        function ctrlCheckBox(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyCheckBox = null;
            _this.InnerCheck = null;
            _this.InnerText = null;
            _this.IsCustomCheck = false;
            return _this;
        }
        ctrlCheckBox.CreateOLD = function (pTarget, pScreenID, pTRF, IsChecked, pTitle, pIsOverLay, pClassName) {
            var tTile = new ctrlCheckBox(pTRF);
            tTile.InitControl(pTarget, pTRF, null, pScreenID);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            tTile.SetProperty("iValue", IsChecked);
            if (cde.CBool(pIsOverLay))
                tTile.SetProperty("IsOverlay", pIsOverLay);
            if (pTitle)
                tTile.SetProperty("Title", pTitle);
            return tTile;
        };
        ctrlCheckBox.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.SingleCheck;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyCheckBox = document.createElement("div");
            this.MyCheckBox.className = "ctrlCheckBox";
            this.MyCheckBox.style.width = (cdeNMI.GetSizeFromTile(1) - 4) + "px";
            this.MyCheckBox.style.height = (cdeNMI.GetSizeFromTile(1) - 4) + "px";
            this.InnerCheck = document.createElement("div");
            this.InnerCheck.className = "ctrlCheckBoxInner";
            this.InnerCheck.style.width = (cdeNMI.GetSizeFromTile(1) - 6) + "px";
            this.InnerCheck.style.height = (cdeNMI.GetSizeFromTile(1) - 6) + "px";
            this.InnerCheck.style.pointerEvents = "none";
            this.MyCheckBox.appendChild(this.InnerCheck);
            var tHeader = this.GetSetting("Title");
            if (tHeader)
                this.SetProperty("Title", tHeader);
            this.IsCustomCheck = true;
            this.SetElement(this.MyCheckBox, true);
            this.SetProperty("Disabled", (!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0)); //TODO: We need a consequent way of doing this!
            if (cde.CBool(this.GetSetting("DefaultValue")))
                this.SetProperty("iValue", true);
            else
                this.SetProperty("iValue", false);
            this.EnableDisable(cde.CBool(this.GetProperty("Disabled")));
            return true;
        };
        ctrlCheckBox.prototype.SetProperty = function (pName, pValue) {
            if (pName === "Value" || pName === "iValue") {
                if (cde.CBool(this.GetProperty("IsChecked")) !== cde.CBool(pValue))
                    this.IsDirty = true;
                if (cde.CBool(pValue))
                    this.SetProperty("IsChecked", true);
                else
                    this.SetProperty("IsChecked", false);
                this.ShowToggle();
            }
            else if (pName === "CheckImage") {
                if (pValue && pValue !== "CDE_NOP") {
                    if (pValue.toLowerCase().indexOf(".png") < 0 &&
                        pValue.toLowerCase().indexOf(".jpg") < 0) {
                        if (!this.InnerText) {
                            this.InnerText = document.createElement("span");
                            this.InnerCheck.appendChild(this.InnerText);
                        }
                        this.InnerText.className = "cdeCheckIcon";
                        this.InnerText.innerHTML = pValue;
                        if (this.GetProperty("Foreground"))
                            this.InnerText.style.color = this.GetProperty("Foreground");
                        else
                            this.InnerText.style.color = "black";
                        this.InnerCheck.style.backgroundImage = "none";
                    }
                    else
                        this.InnerCheck.style.backgroundImage = pValue;
                    this.IsCustomCheck = true;
                    this.InnerCheck.style.display = "";
                }
                else {
                    this.IsCustomCheck = false;
                    this.InnerCheck.style.display = "";
                    this.InnerCheck.style.backgroundImage = 'url("../Images/cdeInnerCheck.png")';
                    this.InnerText.className = "cdeCheckText";
                    this.InnerText.innerHTML = this.GetProperty("Title");
                    this.ShowToggle();
                }
                this.ShowToggle();
            }
            else if (pName === "Background" && this.MyCheckBox) {
                this.MyCheckBox.style.background = pValue;
            }
            else if (pName === "Foreground" && this.InnerText) {
                this.InnerText.style.color = pValue;
            }
            else if (pName === "AreYouSure") {
                this.UnregisterEvent("PointerUp");
                this.EnableDisable(cde.CBool(this.GetProperty("Disabled")));
            }
            else if (pName === "Disabled") {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.EnableDisable(cde.CBool(pValue));
            }
            else if (pName === "IsOverlay") {
                cdeNMI.SetZIndex(this.MyCheckBox, cde.CBool(pValue) ? 1300 : 0);
                cdeNMI.SetZIndex(this.InnerCheck, cde.CBool(pValue) ? 1300 : 0);
            }
            else if (pName === "Title" && this.InnerCheck) {
                if (!this.InnerText) {
                    this.InnerText = document.createElement("span");
                    this.InnerText.className = "cdeCheckText";
                    this.InnerCheck.appendChild(this.InnerText);
                }
                this.InnerText.innerHTML = pValue;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlCheckBox.prototype.PostCreate = function (pTE) {
            var _this = this;
            if (!cde.CBool(pTE.GetProperty("IsInTable"))) {
                this.SetProperty("IsHitTestDisabled", true);
                this.SetProperty("NoClick", true);
            }
            if ((this.MyFieldInfo.Flags & 2) !== 0)
                pTE.MyTEContainer.SetProperty("OnClick", function (sender, evt) {
                    if (!evt.AYSFired && _this.GetProperty("AreYouSure")) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show(_this.GetProperty("AreYouSure"), false, null, 1, function () {
                                _this.ToggleCheck(null);
                            });
                    }
                    else
                        _this.ToggleCheck(evt);
                });
            else
                this.SetProperty("Disabled", true);
        };
        ctrlCheckBox.prototype.EnableDisable = function (IsDisabled) {
            var _this = this;
            this.UnregisterEvent("PointerUp");
            if (!IsDisabled) {
                this.RegisterEvent("PointerUp", function (sender, evt) {
                    if (_this.GetProperty("NoClick") !== true) {
                        if (_this.GetProperty("AreYouSure")) {
                            if (cdeNMI.MyPopUp)
                                cdeNMI.MyPopUp.Show(_this.GetProperty("AreYouSure"), false, null, 1, function () {
                                    _this.ToggleCheck(null);
                                });
                        }
                        else
                            _this.ToggleCheck(evt);
                    }
                });
            }
        };
        ctrlCheckBox.prototype.ToggleCheck = function (evt) {
            if (!cde.CBool(this.GetProperty("IsChecked")))
                this.SetProperty("IsChecked", true);
            else
                this.SetProperty("IsChecked", false);
            this.ShowToggle();
            if (this.GetProperty("NoClick") === true || this.GetProperty("UpdateTable") === true)
                this.SetProperty("Value", cde.CBool(this.GetProperty("IsChecked")));
            else
                this.SetProperty("iValue", cde.CBool(this.GetProperty("IsChecked")));
        };
        ctrlCheckBox.prototype.ShowToggle = function () {
            if (!cde.CBool(this.GetProperty("IsChecked"))) {
                this.InnerCheck.style.opacity = "0.05";
                if (!this.IsCustomCheck)
                    this.InnerCheck.style.display = "none";
            }
            else {
                this.InnerCheck.style.opacity = "1";
                if (!this.IsCustomCheck)
                    this.InnerCheck.style.display = "";
            }
        };
        //backward compat
        ctrlCheckBox.Create = function (pTarget, pScreenID, pTRF, IsChecked, pTitle, pIsOverLay, pClassName) {
            var tTile = new ctrlCheckBox(pTRF);
            tTile.InitControl(pTarget, pTRF, null, pScreenID);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            tTile.SetProperty("iValue", IsChecked);
            if (cde.CBool(pIsOverLay))
                tTile.SetProperty("IsOverlay", pIsOverLay);
            if (pTitle)
                tTile.SetProperty("Title", pTitle);
            return tTile;
        };
        return ctrlCheckBox;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlCheckBox = ctrlCheckBox;
    /**
    * Creates a row of Check Box fields
    *
    * (4.1 Ready!)
    */
    var ctrlCheckField = /** @class */ (function (_super) {
        __extends(ctrlCheckField, _super);
        function ctrlCheckField(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyDIV = null;
            _this.tSendButton = null;
            _this.tInfo = null;
            _this.BitCount = 1;
            return _this;
        }
        ctrlCheckField.CreateOLD = function (pTarget, pScreenID, pTRF, pFldValue, pIsOverLay, pClassName) {
            var tTile = new ctrlCheckField(pTRF);
            tTile.InitControl(pTarget, pTRF, null, pScreenID);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            tTile.SetProperty("iValue", pFldValue);
            if (cde.CBool(pIsOverLay))
                tTile.SetProperty("IsOverlay", pIsOverLay);
            return tTile;
        };
        ctrlCheckField.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.CheckField;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyDIV = document.createElement("div");
            this.MyDIV.className = "ctrlCheckField";
            this.SetElement(this.MyDIV);
            var taTitle = null;
            var HasOptions = false;
            if (this.GetSetting("Options")) {
                taTitle = this.GetSetting("Options").split(';');
                HasOptions = true;
            }
            else if (this.GetSetting("ImageList")) {
                taTitle = this.GetSetting("ImageList").split(',');
                HasOptions = true;
            }
            var tTileFY = cde.CInt(this.GetSetting("TileFactorY"));
            var tTileX = cdeNMI.GetControlWidth(this);
            if (tTileX < 2)
                tTileX = 2;
            this.MyCheckBoxes = new Array();
            this.MyLabels = new Array();
            this.MyTiles = new Array();
            if (!this.MyFieldInfo) {
                this.MyCheckBoxes[0] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleCheck).Create(this, { ScreenID: pScreenID, TRF: new cdeNMI.TheTRF("", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleCheck, 1, "no TRF", 0)) });
            }
            else {
                this.BitCount = cde.CInt(this.GetSetting("Bits"));
                if (this.BitCount === 0 && taTitle && taTitle.length > 0)
                    this.BitCount = taTitle.length;
                if (HasOptions) {
                    this.SetProperty("TileHeight", this.BitCount);
                    if (tTileFY > 1)
                        this.SetProperty("TileFactorY", tTileFY);
                }
                //TODO: Here is the loop that creates the CheckBoxes (toggles). Instead of using checkboxes with 1x1 tilewidth can you create another smartlabel behind each toggle for the label 
                for (var i = this.BitCount - 1; i >= 0; i--) {
                    var tTitle = (1 << i).toString();
                    if (taTitle && taTitle.length > i)
                        tTitle = taTitle[i];
                    if (HasOptions) {
                        this.MyTiles[i] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup);
                        this.MyTiles[i].InitControl(this);
                        this.MyTiles[i].SetProperty("TileWidth", tTileX);
                        this.MyTiles[i].SetProperty("TileHeight", 1);
                        this.MyTiles[i].SetProperty("Display", "table");
                        this.MyCheckBoxes[i] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleCheck).Create(this.MyTiles[i], { ScreenID: pScreenID, TRF: new cdeNMI.TheTRF("", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleCheck, 1, "no TRF", this.MyFieldInfo.Flags & 2)) });
                        this.MyCheckBoxes[i].RegisterEvent("OniValueChanged", function () {
                            _this.GetCheckValue("Value");
                        });
                        this.MyLabels[i] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.MyTiles[i], { PreInitBag: ["Element=div"], TRF: new cdeNMI.TheTRF("", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SmartLabel, 1, "no TRF", 256)) });
                        this.MyLabels[i].SetProperty("Value", tTitle);
                        this.MyLabels[i].SetProperty("TileWidth", tTileX - 1);
                        this.MyLabels[i].SetProperty("Display", "table-cell");
                        this.MyLabels[i].SetProperty("HorizontalAlignment", "left");
                        this.MyLabels[i].SetProperty("VerticalAlignment", "middle");
                        if (tTileFY > 1) {
                            this.MyTiles[i].SetProperty("TileFactorY", tTileFY);
                            this.MyCheckBoxes[i].SetProperty("TileFactorY", tTileFY);
                            this.MyLabels[i].SetProperty("TileFactorY", tTileFY);
                        }
                    }
                    else
                        this.MyCheckBoxes[i] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleCheck).Create(this, { ScreenID: pScreenID, TRF: new cdeNMI.TheTRF("", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleCheck, 1, "no TRF", this.MyFieldInfo.Flags & 2)) });
                }
            }
            if (this.MyTRF && this.MyTRF.FldInfo && (this.MyTRF.FldInfo.Flags & 2) !== 0) {
                //this.tSendButton = cdeNMI.MyTCF.CreateNMIControl(cdeControlType.TileButton).Create(this, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-3x'>&#xf058;</span>", "ClassName=cdeOkButton"] });
                //this.tSendButton.SetProperty("OnClick", (pSender: INMIControl, evt: Event) => {
                //    if (this.IsDisabled) return;
                //    cdeNMI.StopPointerEvents(evt);
                //    this.GetCheckValue("Value");
                //});
                if (this.GetSetting("ResultLabel"))
                    this.tInfo = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this, { PreInitBag: ["ControlTW=2", "ControlTH=1", "NoTE=true"], PostInitBag: ["Text=" + this.GetSetting("ResultLabel"), "ClassName=cdeResultLabel"] });
            }
            this.SetProperty("Disabled", (!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0)); //TODO: We need a consequent way of doing this!
            if (cdeNMI.MyEngine) {
                if (cde.GuidToString(this.MyFieldInfo.cdeMID) === "DD3DF621ACAC4B77985687165138B028") {
                    cdeNMI.MyEngine.RegisterEvent("NMI_UIDACL", function (sender, tsm) {
                        if (cde.GuidToString(tsm.OWN) === cde.GuidToString(_this.MyFieldInfo.cdeMID))
                            _this.SetProperty("iValue", cde.CInt(tsm.PLS));
                    });
                }
            }
            return true;
        };
        ctrlCheckField.prototype.GetProperty = function (pName) {
            if (pName === "iValue" || pName === "Value") {
                this.GetCheckValue("iValue");
            }
            return _super.prototype.GetProperty.call(this, pName);
        };
        ctrlCheckField.prototype.SetProperty = function (pName, pValue) {
            var i;
            if (pName === "Value" || pName === "iValue") {
                if (pValue) {
                    var tVal = cde.CInt(pValue);
                    if (this.MyFieldInfo) {
                        for (i = cde.CInt(this.MyFieldInfo["Bits"]) - 1; i >= 0; i--) {
                            if ((tVal & (1 << i)) !== 0)
                                this.MyCheckBoxes[i].SetProperty("iValue", true);
                            else
                                this.MyCheckBoxes[i].SetProperty("iValue", false);
                        }
                    }
                    else {
                        this.MyCheckBoxes[0].SetProperty("iValue", false);
                    }
                    if (this.tInfo)
                        this.tInfo.SetProperty("Text", this.GetProperty("ResultLabel") + tVal);
                }
            }
            else if (pName === "ImageList" && this.MyCheckBoxes) {
                var tImgs = pValue.split(',');
                for (i = 0; i < this.MyCheckBoxes.length; i++) {
                    if (i >= tImgs.length)
                        this.MyCheckBoxes[i].SetProperty("CheckImage", null);
                    else
                        this.MyCheckBoxes[i].SetProperty("CheckImage", tImgs[i]);
                }
            }
            else if (pName === "IsOverlay") {
                cdeNMI.SetZIndex(this.MyDIV, cde.CBool(pValue) ? 1300 : 0);
                cdeNMI.SetZIndex(this.tSendButton.GetElement(), cde.CBool(pValue) ? 1300 : 0);
                for (i = 0; i < this.MyCheckBoxes.length; i++) {
                    this.MyCheckBoxes[i].SetProperty("IsOverlay", pValue);
                }
            }
            else if (pName === "Disabled") {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.EnableDisable(cde.CBool(pValue));
            }
            else if (pName === "FontSize") {
                for (var i_1 = 0; i_1 < this.BitCount; i_1++) {
                    if (this.MyLabels && this.MyLabels[i_1])
                        this.MyLabels[i_1].SetProperty("FontSize", pValue);
                }
            }
            else if (pName === "Options" && pValue) {
                var taTitle = pValue.split(';');
                for (i = cde.CInt(this.MyFieldInfo["Bits"]) - 1; i >= 0; i--) {
                    var tTitle = (1 << i).toString();
                    if (taTitle && taTitle.length > i)
                        tTitle = taTitle[i];
                    this.MyCheckBoxes[i].SetProperty("Title", tTitle);
                }
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlCheckField.prototype.PostCreate = function (pTE) {
            if (this.MyFieldInfo["IsInTable"] === true) {
                this.SetProperty("IsOverlay", true);
            }
        };
        ctrlCheckField.prototype.GetCheckValue = function (pName) {
            var tNewValue = 0;
            for (var i = this.BitCount - 1; i >= 0; i--) {
                if (cde.CBool(this.MyCheckBoxes[i].GetProperty("IsChecked")))
                    tNewValue += (1 << i);
            }
            this.SetProperty(pName, tNewValue);
            return tNewValue;
        };
        ctrlCheckField.prototype.EnableDisable = function (IsDisabled) {
            if (this.tSendButton)
                this.tSendButton.SetProperty("Disabled", IsDisabled);
            for (var i = 0; i < this.MyCheckBoxes.length; i++)
                this.MyCheckBoxes[i].SetProperty("Disabled", IsDisabled);
        };
        return ctrlCheckField;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlCheckField = ctrlCheckField;
    /**
* Creates a button that can be pushed to the right side and reveals more buttons underneath
*
* (4.1 Ready!)
*/
    var ctrlRevealButton = /** @class */ (function (_super) {
        __extends(ctrlRevealButton, _super);
        function ctrlRevealButton(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divPin = null;
            _this.mInnerDiv = null;
            _this.mImgControl = null;
            _this.mMoveDiv = null;
            _this.mlastX = 0;
            _this.mNoFire = false;
            _this.mInsideControls = null;
            return _this;
        }
        ctrlRevealButton.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.RevealButton;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.divPin = document.createElement("div");
            this.divPin.style.position = "relative";
            this.divPin.style.cssFloat = "left";
            this.PreventDefault = true;
            this.SetElement(this.divPin, true);
            this.SetProperty("IsOpen", false);
            return true;
        };
        ctrlRevealButton.prototype.SetProperty = function (pName, pValue) {
            if (pName === "ClassName") {
                this.divPin.className = pValue;
                return;
            }
            else if (pName === "TabIndex") {
                pValue = cde.CInt(pValue);
                this.SetTabIndex(pValue);
            }
            else if (pName === "Image") {
                if (pValue) {
                    var t_9 = this;
                    t_9.mImgControl = pValue;
                    t_9.GetElement().appendChild(pValue.GetElement());
                    t_9.mImgControl.SetProperty("Parent", t_9);
                    //t.mImgControl.RegisterEvent("OnClick", clickEvt);
                    t_9.mImgControl.GetElement().style.cssFloat = "right";
                    t_9.mImgControl.HookEvents(false);
                    t_9.mImgControl.RegisterEvent("PointerUp", function (pControl, evt, pPointer) {
                        t_9.SetProperty("LastX", -1);
                        var tParent = pControl.GetProperty("Parent");
                        if (!tParent.mNoFire && pPointer.PathLength() < cdeNMI.MyNMISettings.DeadPathLength)
                            pControl.FireEvent(true, "OnClick", evt);
                    });
                    if (this.GetProperty("InsideControls") > 0)
                        this.InitInsides();
                }
            }
            else if (pName === "ControlArray") {
                if (pValue && pValue.length > 0) {
                    var t_10 = this;
                    t_10.mInsideControls = pValue;
                    t_10.mMoveDiv = document.createElement("div");
                    t_10.mMoveDiv.style.width = "0px";
                    t_10.mMoveDiv.style.height = cdeNMI.GetSizeFromTile(1) + "px";
                    t_10.mMoveDiv.style.cssFloat = "left";
                    t_10.mMoveDiv.style.overflow = "hidden";
                    t_10.mMoveDiv.id = t_10.GetProperty("ID");
                    t_10.divPin.appendChild(t_10.mMoveDiv);
                    t_10.mInnerDiv = document.createElement("div");
                    t_10.mInnerDiv.style.height = cdeNMI.GetSizeFromTile(1) + "px";
                    t_10.mInnerDiv.style.display = "none";
                    t_10.mMoveDiv.appendChild(t_10.mInnerDiv);
                    t_10.SetProperty("InsideControls", pValue.length);
                    for (var i = 0; i < pValue.length; i++) {
                        t_10.SetProperty("InsideControl" + i, pValue);
                        t_10.mInnerDiv.appendChild(pValue[i].GetElement());
                        pValue[i].GetElement().style.verticalAlign = "middle";
                        pValue[i].GetElement().style.display = "table-cell";
                        pValue[i].GetElement().tabIndex = -1;
                    }
                    t_10.mInnerDiv.style.width = (cdeNMI.GetSizeFromTile(pValue.length) + 1) + "px";
                    t_10.InitInsides();
                    this.SetTabIndex(-1);
                }
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlRevealButton.prototype.SetTabIndex = function (startIndex) {
            if (!this.mInsideControls)
                return;
            for (var i = 0; i < this.mInsideControls.length; i++) {
                if (startIndex < 0)
                    this.mInsideControls[i].GetElement().tabIndex = -1;
                else
                    this.mInsideControls[i].GetElement().tabIndex = startIndex++;
            }
        };
        ctrlRevealButton.prototype.InitInsides = function () {
            var _this = this;
            if (this.GetProperty("InsideControls") > 0 && this.mImgControl) {
                this.mImgControl.RegisterEvent("PointerDown", function (pControl, evt, pPointer) {
                    _this.SetProperty("LastX", pPointer.AdjPosition.x);
                    var tParent = pControl.GetProperty("Parent");
                    tParent.mNoFire = false;
                });
                this.mImgControl.RegisterEvent("PointerMove", function (pControl, evt, pPointer) {
                    var tParent = pControl.GetProperty("Parent");
                    //var div;      //V4.107: Move to Velocity
                    if (pPointer.Shift.x > 2 && tParent.GetProperty("IsOpen") !== true) {
                        tParent.SetProperty("IsOpen", true);
                        tParent.SetTabIndex(cde.CInt(tParent.GetProperty("TabIndex")) + 1);
                        //div = $("#" + tParent.GetProperty("ID"));
                        tParent.mInnerDiv.style.display = 'table';
                        tParent.mInnerDiv.style.width = cdeNMI.GetSizeFromTile(tParent.GetProperty("InsideControls")) + 2 + 'px';
                        tParent.mMoveDiv.style.width = cdeNMI.GetSizeFromTile(tParent.GetProperty("InsideControls")) + 2 + 'px';
                        //div.animate({ width: cdeNMI.GetSizeFromTile(this.GetProperty("InsideControls")) + 2 + 'px' }, 100, "easeOutBack", () => {
                        //});
                    }
                    else if (pPointer.Shift.x < -2 && tParent.GetProperty("IsOpen") === true) {
                        tParent.SetProperty("IsOpen", false);
                        tParent.SetTabIndex(-1);
                        //div = $("#" + tParent.GetProperty("ID"));
                        //div.animate({ width: '0px' }, 100, "easeOutBack", () => {
                        tParent.mMoveDiv.style.width = "0px";
                        tParent.mInnerDiv.style.width = "0px";
                        tParent.mInnerDiv.style.display = 'none';
                        //});
                    }
                });
            }
            return true;
        };
        return ctrlRevealButton;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlRevealButton = ctrlRevealButton;
    var ctrlImageSlider2 = /** @class */ (function (_super) {
        __extends(ctrlImageSlider2, _super);
        function ctrlImageSlider2() {
            var _this = _super.call(this, null, null) || this;
            _this.myControlContainer = null;
            _this.myPropertyBag = null;
            return _this;
        }
        ctrlImageSlider2.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "iValue") {
                this.myBar.SetProperty("iValue", pValue);
            }
        };
        ctrlImageSlider2.prototype.InitControl = function (pTargetElem, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            _super.prototype.InitControl.call(this, pTargetElem, pTRF, pPropertyBag, pScreenID);
            if (pPropertyBag)
                this.myPropertyBag = pPropertyBag;
            else {
                if (pTRF && pTRF.FldInfo && pTRF.FldInfo.PropertyBag)
                    this.myPropertyBag = pTRF.FldInfo.PropertyBag;
            }
            this.myControlContainer = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetElem);
            this.myControlContainer.SetInitialSize(0);
            //SIZING: Needs to be the same on all SF Controls
            var tW = cde.CInt(this.MyParentCtrl.GetProperty("ControlTW"));
            if (this.GetSetting("TileWidth"))
                tW = cde.CInt(this.GetSetting("TileWidth"));
            var tH = cde.CInt(this.MyParentCtrl.GetProperty("ControlTH"));
            if (this.GetSetting("TileHeight"))
                tH = cde.CInt(this.GetSetting("TileHeight"));
            ////////////////////////////// To here
            this.SetElement(this.myControlContainer.GetElement(), true, this.myControlContainer.GetElement());
            this.AddMyControls(tW, tH, pTRF);
            cde.MyBaseAssets.RegisterEvent("ThemeSwitched", function () {
                _this.SetImg();
            });
            this.SetImg();
            return true;
        };
        ctrlImageSlider2.prototype.SetImg = function () {
            var bWasSet = false;
            if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme) {
                if (this.GetProperty("LiteSource")) {
                    this.myImage.SetProperty("Source", this.GetProperty("LiteSource"));
                    bWasSet = true;
                }
            }
            else {
                if (this.GetProperty("DarkSource")) {
                    this.myImage.SetProperty("Source", this.GetProperty("DarkSource"));
                    bWasSet = true;
                }
            }
            if (!bWasSet && this.GetProperty("Source")) {
                this.myImage.SetProperty("Source", this.GetProperty("Source"));
            }
        };
        ctrlImageSlider2.prototype.AddMyControls = function (tWidth, tHeight, pTRF) {
            var _this = this;
            this.myGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.myControlContainer, { TRF: pTRF });
            this.myGroup.SetProperty("ClassName", "cIBGroup");
            this.myImage = cdeNMI.ctrlZoomImage.Create(this.myGroup);
            this.myImage.SetProperty("ControlTW", tWidth);
            this.myImage.SetProperty("ControlTH", tHeight);
            this.myImage.SetProperty("Z-Index", 50);
            this.myImage.SetProperty("IsAbsolute", true);
            this.myImage.SetProperty("Style", "pointer-events: none");
            var tImg = this.GetSetting("Source");
            if (tImg)
                this.myImage.SetProperty("Source", tImg);
            this.myBar = cdeNMI.ctrlBarChart.Create(this.myGroup, pTRF);
            this.myBar.SetProperty("ControlTW", tWidth);
            this.myBar.SetProperty("ControlTH", tHeight);
            this.myBar.SetProperty("IsAbsolute", true);
            this.myBar.SetProperty("iValue", this.GetSetting("Value"));
            cdeNMI.TheNMIBaseControl.SetPropertiesFromBag(this.myBar, this.myPropertyBag);
            this.myBar.RegisterEvent("OnValueChanged", function (pBar, evt, pVal) {
                _this.SetProperty("Value", pVal[1]);
            });
        };
        ctrlImageSlider2.prototype.ApplySkin = function () {
            //overrided if necessary
        };
        return ctrlImageSlider2;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlImageSlider2 = ctrlImageSlider2;
    var ctrlToggleButton2 = /** @class */ (function (_super) {
        __extends(ctrlToggleButton2, _super);
        function ctrlToggleButton2(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyCheckBox = null;
            _this.IsCustomCheck = false;
            _this.MyLabel = null;
            _this.MyToggleSwitch = null;
            _this.MyCheckBoxSwitch = null;
            _this.InnerToggleDiv = null;
            return _this;
        }
        ctrlToggleButton2.CreateOLD = function (pTarget, pScreenID, pTRF, IsChecked, pTitle, pIsOverLay, pClassName) {
            var tTile = new ctrlCheckBox(pTRF);
            tTile.InitControl(pTarget, pTRF, null, pScreenID);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            tTile.SetProperty("iValue", IsChecked);
            if (cde.CBool(pIsOverLay))
                tTile.SetProperty("IsOverlay", pIsOverLay);
            if (pTitle)
                tTile.SetProperty("Title", pTitle);
            return tTile;
        };
        ctrlToggleButton2.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.SingleCheck;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyCheckBox = document.createElement("div");
            this.MyCheckBox.className = "cdeToggleSwitch";
            this.MyCheckBox.style.height = (cdeNMI.GetSizeFromTile(1)) + "px";
            this.MyCheckBox.style.width = (cdeNMI.GetSizeFromTile(1)) + "px";
            this.MyLabel = document.createElement("label");
            this.MyLabel.className = "cdeSwitchLabel";
            this.MyLabel.style.maxWidth = (cdeNMI.GetSizeFromTile(1)) + "px";
            var tL = this.GetSetting("Label");
            this.MyLabel.innerHTML = tL ? tL : (cde.CBool(this.GetSetting("IsInTable")) === true ? "" : "&nbsp;");
            this.MyToggleSwitch = document.createElement("label");
            this.MyToggleSwitch.className = "cdeSwitch";
            this.MyCheckBoxSwitch = document.createElement("input");
            this.MyCheckBoxSwitch.type = "checkbox";
            this.MyCheckBoxSwitch.className = "cdeCheckboxInput";
            this.MyToggleSwitch.appendChild(this.MyCheckBoxSwitch);
            this.MyCheckBox.appendChild(this.MyLabel);
            this.MyCheckBox.appendChild(this.MyToggleSwitch);
            this.InnerToggleDiv = document.createElement("div");
            this.InnerToggleDiv.className = "cdeCheckboxInnerDiv";
            this.MyToggleSwitch.appendChild(this.InnerToggleDiv);
            var tHeader = this.GetSetting("Title");
            if (tHeader) {
                this.SetProperty("Title", tHeader);
            }
            this.IsCustomCheck = true;
            this.SetElement(this.MyCheckBox, true);
            this.SetProperty("Disabled", (!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0));
            if (cde.CBool(this.GetSetting("DefaultValue"))) {
                this.SetProperty("iValue", true);
            }
            else {
                this.SetProperty("iValue", false);
            }
            this.EnableDisable(cde.CBool(this.GetProperty("Disabled")));
            return true;
        };
        ctrlToggleButton2.prototype.SetProperty = function (pName, pValue) {
            if (pName === "Value" || pName === "iValue") {
                if (cde.CBool(this.GetProperty("IsChecked")) !== cde.CBool(pValue))
                    this.IsDirty = true;
                if (cde.CBool(pValue)) {
                    this.SetProperty("IsChecked", true);
                    this.MyCheckBox.classList.add("toggleChecked");
                }
                else {
                    this.SetProperty("IsChecked", false);
                    this.MyCheckBox.classList.remove("toggleChecked");
                }
            }
            else if (pName === "Label") {
                this.MyLabel.textContent = pValue;
            }
            else if (pName === "HideLabel") {
                this.MyLabel.style.display = "none";
            }
            else if (pName === "TileHeight" || pValue === "ControlTH") {
                var tfy = cde.CInt(this.GetProperty("TileFactorY"));
                if (tfy === 0)
                    tfy = 1;
                this.MyCheckBox.style.height = (cdeNMI.GetSizeFromTile(cde.CInt(pValue)) / tfy) + "px";
            }
            else if (pName === "TileFactorY") {
                var tfy = cde.CInt(pValue);
                if (tfy < 1)
                    tfy = 1;
                var th = cde.CInt(this.GetProperty("TileHeight"));
                if (th === 0)
                    th = 1;
                this.MyCheckBox.style.height = (cdeNMI.GetSizeFromTile(th) / tfy) + "px";
                if (tfy > 1)
                    this.MyLabel.style.display = "none";
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            //if (this.MyCheckBox) {
            //    var t = this.MyCheckBox.style.height;
            //}
        };
        ctrlToggleButton2.prototype.PostCreate = function (pTE) {
            var _this = this;
            if (!cde.CBool(pTE.GetProperty("IsInTable"))) {
                this.SetProperty("IsHitTestDisabled", true);
                this.SetProperty("NoClick", true);
            }
            if ((this.MyFieldInfo.Flags & 2) !== 0)
                pTE.MyTEContainer.SetProperty("OnClick", function (sender, evt) {
                    if (!evt.AYSFired && _this.GetProperty("AreYouSure")) {
                        if (cdeNMI.MyPopUp)
                            cdeNMI.MyPopUp.Show(_this.GetProperty("AreYouSure"), false, null, 1, function () {
                                _this.ToggleCheck(null);
                            });
                    }
                    else
                        _this.ToggleCheck(evt);
                });
            else {
                this.SetProperty("Disabled", true);
            }
        };
        ctrlToggleButton2.prototype.EnableDisable = function (IsDisabled) {
            var _this = this;
            this.UnregisterEvent("PointerUp");
            if (!IsDisabled) {
                this.RegisterEvent("PointerUp", function (sender, evt) {
                    if (_this.GetProperty("NoClick") !== true) {
                        if (_this.GetProperty("AreYouSure")) {
                            if (cdeNMI.MyPopUp)
                                cdeNMI.MyPopUp.Show(_this.GetProperty("AreYouSure"), false, null, 1, function () {
                                    _this.ToggleCheck(null);
                                });
                        }
                        else
                            _this.ToggleCheck(evt);
                    }
                });
            }
        };
        // Sets IsChecked properties and transforms UX toggle based on state
        ctrlToggleButton2.prototype.ToggleCheck = function (pEvent) {
            if (!cde.CBool(this.GetProperty("IsChecked"))) {
                this.SetProperty("IsChecked", true);
                this.MyCheckBox.classList.add("toggleChecked");
            }
            else {
                this.SetProperty("IsChecked", false);
                this.MyCheckBox.classList.remove("toggleChecked");
            }
            if (this.GetProperty("NoClick") === true || this.GetProperty("UpdateTable") === true) {
                this.SetProperty("Value", cde.CBool(this.GetProperty("IsChecked")));
            }
            else {
                this.SetProperty("iValue", cde.CBool(this.GetProperty("IsChecked")));
            }
        };
        //backward compat
        ctrlToggleButton2.Create = function (pTarget, pScreenID, pTRF, IsChecked, pTitle, pIsOverLay, pClassName) {
            var tTile = new ctrlCheckBox(pTRF);
            tTile.InitControl(pTarget, pTRF, null, pScreenID);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            tTile.SetProperty("iValue", IsChecked);
            if (cde.CBool(pIsOverLay))
                tTile.SetProperty("IsOverlay", pIsOverLay);
            if (pTitle)
                tTile.SetProperty("Title", pTitle);
            return tTile;
        };
        return ctrlToggleButton2;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlToggleButton2 = ctrlToggleButton2;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
         * Creates a new Drawing Canvas (HTML5 Canvas Element)
          *ctrlCanvasDraw is the base OBject for other controls:
          * 34: BarChart
          * 33: Slider
          * 38: DrawOverlay
          * This control is NOT and input control for Form or Table
         * (4.1 Ready!)
         */
    var ctrlCanvasDraw = /** @class */ (function (_super) {
        __extends(ctrlCanvasDraw, _super);
        function ctrlCanvasDraw(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.bgcanvas = null;
            _this.fgcanvas = null;
            _this.bgctx = null;
            _this.fgctx = null;
            _this.redrawPending = false;
            _this.foregroundPolylines = new Array();
            _this.mBaseDiv = null;
            _this.WidthRatio = 1;
            _this.HeightRatio = 1;
            _this.MyWidth = 0;
            _this.MyHeight = 0;
            _this.tObjPointer = -1;
            _this.tStrokePointer = 0;
            _this.tAsyncStrokes = null;
            _this.MyFirstPoint = null;
            return _this;
        }
        ctrlCanvasDraw.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.CanvasDraw;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            var tBase = null;
            if (this.MyTarget)
                this.mBaseDiv = this.MyTarget.GetContainerElement();
            else {
                this.mBaseDiv = document.createElement("div");
                tBase = this.mBaseDiv;
            }
            if (!this.DoesSupportsCanvas) {
                var nocanvas = document.createElement("div");
                nocanvas.style.position = "absolute";
                nocanvas.appendChild(document.createTextNode("Canvas drawing is not supported for your browser."));
                this.mBaseDiv.appendChild(nocanvas);
                return true;
            }
            if (!cde.CBool(this.GetSetting("NoBackBuffer"))) {
                this.bgcanvas = document.createElement("canvas");
                this.bgcanvas.width = 0;
                this.bgcanvas.height = 0;
                this.bgctx = this.bgcanvas.getContext("2d");
                if (!tBase)
                    this.bgcanvas.style.position = "relative";
                this.bgcanvas.style.top = "0px";
                this.bgcanvas.style.left = "0px";
                this.mBaseDiv.appendChild(this.bgcanvas);
            }
            this.fgcanvas = document.createElement("canvas");
            this.fgctx = this.fgcanvas.getContext("2d");
            this.fgcanvas.width = 0;
            this.fgcanvas.height = 0;
            this.fgcanvas.style.position = "absolute";
            this.fgcanvas.style.top = "0px";
            this.fgcanvas.style.left = "0px";
            this.SetProperty("Foreground", "#000000");
            this.mBaseDiv.appendChild(this.fgcanvas);
            this.PreventManipulation = true;
            this.SetElement(tBase ? tBase : this.fgcanvas);
            return true;
        };
        ctrlCanvasDraw.prototype.SetProperty = function (pName, pValue) {
            var bDrawCanvas = false;
            var tShape = null;
            if (pName === "DataContextSilent") {
                _super.prototype.SetProperty.call(this, "DataContext", pValue);
            }
            else {
                if (pName === "Style") {
                    if (this.bgcanvas)
                        this.bgcanvas.style.cssText += pValue;
                    if (this.fgcanvas)
                        this.fgcanvas.style.cssText += pValue;
                }
                else {
                    _super.prototype.SetProperty.call(this, pName, pValue);
                }
            }
            if (pName === "OnPointerDown") {
                if (pValue) {
                    this.PreventDefault = true;
                    this.HookEvents(false);
                }
                this.RegisterEvent("PointerDown", pValue);
            }
            else if (pName === "OnPointerMove") {
                if (pValue) {
                    this.PreventDefault = true;
                    this.HookEvents(false);
                }
                this.RegisterEvent("PointerMove", pValue);
            }
            else if (pName === "OnPointerUp") {
                if (pValue) {
                    this.PreventDefault = true;
                    this.HookEvents(false);
                }
                this.RegisterEvent("PointerUp", pValue);
            }
            else if (pName === "OnPointerCancel") {
                if (pValue) {
                    this.PreventDefault = true;
                    this.HookEvents(false);
                }
                this.RegisterEvent("PointerCancel", pValue);
            }
            else if (pName === "OnKeyDown") {
                if (pValue) {
                    this.PreventDefault = true;
                    this.HookEvents(false);
                }
                this.RegisterEvent("KeyDown", pValue);
            }
            else if (pName === "OnKeyUp") {
                if (pValue) {
                    this.PreventDefault = true;
                    this.HookEvents(false);
                }
                this.RegisterEvent("KeyUp", pValue);
            }
            else if (pName === "IsVertical") {
                if (typeof pValue === "undefined" || cde.CBool(pValue)) {
                    pValue = true;
                    _super.prototype.SetProperty.call(this, "IsVertical", pValue);
                }
                this.DrawCanvasBackground();
            }
            else if (pName === "IsInverted") {
                if (typeof pValue === "undefined" || cde.CBool(pValue)) {
                    pValue = true;
                    _super.prototype.SetProperty.call(this, "IsInverted", pValue);
                }
                this.DrawCanvasBackground();
            }
            else if (pName === "Background") {
                this.DrawCanvasBackground();
            }
            else if (pName === "AddShape") {
                try {
                    tShape = JSON.parse(pValue);
                    if (tShape) {
                        this.AddDrawingObject(tShape);
                        bDrawCanvas = true;
                    }
                }
                catch (error) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:ctrlCanvasDraw", "DrawCanvas-AddShape :" + error);
                }
            }
            else if (pName === "DrawShapes" && pValue) {
                try {
                    var tShapes = JSON.parse(pValue);
                    for (var i = 0; i < tShapes.length; i++) {
                        this.AddDrawingObject(tShapes[i], tShapes[i].ID + i.toString(), i < tShapes.length - 1);
                    }
                    bDrawCanvas = true;
                }
                catch (error) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:ctrlCanvasDraw", "DrawCanvas-DrawShapes :" + error);
                }
            }
            else if (pName === "DrawShape" && pValue) {
                try {
                    tShape = JSON.parse(pValue);
                    if (tShape) {
                        this.AddDrawingObject(tShape, tShape.ID);
                        bDrawCanvas = true;
                    }
                }
                catch (error) {
                    cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:ctrlCanvasDraw", "DrawCanvas-DrawShape :" + error);
                }
            }
            else if (pName === "SetShape") {
                if (pValue) {
                    this.ClearPicture();
                    try {
                        tShape = JSON.parse(pValue);
                        if (tShape) {
                            this.AddDrawingObject(tShape);
                            bDrawCanvas = true;
                        }
                    }
                    catch (error) {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "cdeNMI:ctrlCanvasDraw", "DrawCanvas-SetShape :" + error);
                    }
                }
            }
            else if (pName === "TileFactorX") {
                var tFX = cde.CInt(pValue);
                if (tFX > 1) {
                    pValue = cde.CInt(this.GetProperty("ControlTW"));
                    if (pValue === 0)
                        pValue = 1;
                    pValue = cdeNMI.GetSizeFromTile(pValue);
                    this.SetProperty("AbsWidth", pValue / tFX);
                }
            }
            else if (pName === "TileFactorY") {
                var tFX = cde.CInt(pValue);
                if (tFX > 1) {
                    pValue = cde.CInt(this.GetProperty("ControlTH"));
                    if (pValue === 0)
                        pValue = 1;
                    pValue = cdeNMI.GetSizeFromTile(pValue);
                    this.SetProperty("AbsHeight", pValue / tFX);
                }
            }
            else if (pName === "DrawMargin") {
                var tMarg = cde.CDbl(pValue);
                var tHe = this.MyHeight - (tMarg * 2);
                var tWi = this.MyWidth - (tMarg * 2);
                if (this.bgcanvas) {
                    this.bgcanvas.style.top = tMarg.toString() + "px";
                    this.bgcanvas.style.left = tMarg.toString() + "px";
                    this.bgcanvas.style.height = tHe + "px";
                    this.bgcanvas.height = tHe;
                    this.bgcanvas.style.width = tWi + "px";
                    this.bgcanvas.width = tWi;
                }
                if (this.fgcanvas) {
                    this.fgcanvas.style.top = tMarg.toString() + "px";
                    this.fgcanvas.style.left = tMarg.toString() + "px";
                    this.fgcanvas.style.height = tHe + "px";
                    this.fgcanvas.height = tHe;
                    this.fgcanvas.style.width = tWi + "px";
                    this.fgcanvas.width = tWi;
                }
            }
            else if (pName === "ControlTW") {
                var tFX = cde.CInt(this.GetProperty("TileFactorX"));
                if (tFX === 0)
                    tFX = 1;
                pValue = cde.CInt(pValue);
                if (pValue === 0)
                    pValue = 1;
                pValue = cdeNMI.GetSizeFromTile(pValue);
                this.SetProperty("AbsWidth", pValue / tFX);
            }
            else if (pName === "ControlTH") {
                var tFX = cde.CInt(this.GetProperty("TileFactorY"));
                if (tFX === 0)
                    tFX = 1;
                pValue = cde.CInt(pValue);
                if (pValue === 0)
                    pValue = 1;
                pValue = cdeNMI.GetSizeFromTile(pValue);
                this.SetProperty("AbsHeight", pValue / tFX);
            }
            else if (pName === "CanvasHeight") {
                pValue = cde.CInt(pValue);
                if (this.fgcanvas && this.fgcanvas.height !== pValue) {
                    this.fgcanvas.height = pValue;
                }
                if (this.bgcanvas && this.bgcanvas.height !== pValue) {
                    this.bgcanvas.height = pValue;
                }
                this.HeightRatio = cde.CDbl(pValue) / this.MyHeight;
                bDrawCanvas = true;
            }
            else if (pName === "CanvasWidth") {
                pValue = cde.CInt(pValue);
                if (this.fgcanvas && this.fgcanvas.width !== pValue) {
                    this.fgcanvas.width = pValue;
                }
                if (this.bgcanvas && this.bgcanvas.width !== pValue) {
                    this.bgcanvas.width = pValue;
                }
                this.WidthRatio = pValue / this.MyWidth;
                bDrawCanvas = true;
            }
            else if (pName === "AbsHeight") {
                pValue = cde.CInt(pValue);
                if (this.fgcanvas && this.fgcanvas.height !== pValue) {
                    this.fgcanvas.style.height = pValue + "px";
                    this.fgcanvas.height = pValue;
                }
                if (this.bgcanvas && this.bgcanvas.height !== pValue) {
                    this.bgcanvas.style.height = pValue + "px";
                    this.bgcanvas.height = pValue;
                }
                this.MyHeight = pValue;
                this.HeightRatio = 1;
                bDrawCanvas = true;
            }
            else if (pName === "AbsWidth") {
                pValue = cde.CInt(pValue);
                if (this.fgcanvas && this.fgcanvas.width !== pValue) {
                    this.fgcanvas.style.width = pValue + "px";
                    this.fgcanvas.width = pValue;
                }
                if (this.bgcanvas && this.bgcanvas.width !== pValue) {
                    this.bgcanvas.style.width = pValue + "px";
                    this.bgcanvas.width = pValue;
                }
                this.MyWidth = pValue;
                this.WidthRatio = 1;
                bDrawCanvas = true;
            }
            else if (pName === "YRatio" && this.fgcanvas) {
                var tRat = cde.CDbl(this.fgcanvas.style.width.substr(0, this.fgcanvas.style.width.length - 2)) / cde.CDbl(pValue);
                this.fgcanvas.style.height = tRat + "px";
                this.MyHeight = tRat;
            }
            if (!bDrawCanvas && pName === "DataContextSilent")
                bDrawCanvas = false;
            else
                bDrawCanvas = true;
            if (bDrawCanvas) {
                this.RequestRedraw();
            }
        };
        ctrlCanvasDraw.prototype.ApplySkin = function () {
            this.ResizeCanvas();
        };
        ctrlCanvasDraw.prototype.ResizeCanvas = function () {
            if (this.mBaseDiv.clientWidth === 0 || this.mBaseDiv.clientHeight === 0)
                return;
            if (cde.CBool(this.GetProperty("AutoAdjust")) || this.MyWidth === 0 || this.MyHeight === 0) {
                if (this.MyWidth !== this.mBaseDiv.clientWidth) {
                    this.MyWidth = this.mBaseDiv.clientWidth;
                    this.SetProperty("AbsWidth", this.MyWidth);
                }
                if (this.MyHeight !== this.mBaseDiv.clientHeight) {
                    this.MyHeight = this.mBaseDiv.clientHeight;
                    this.SetProperty("AbsHeight", this.MyHeight);
                }
            }
        };
        ctrlCanvasDraw.prototype.DoesSupportsCanvas = function () {
            return !!document.createElement('canvas').getContext;
        };
        ctrlCanvasDraw.prototype.GetPNG = function () {
            if (!this.bgcanvas)
                return "";
            return this.bgcanvas.toDataURL("image/png");
        };
        ctrlCanvasDraw.prototype.GetBGRenderContext = function () {
            return this.bgcanvas.getContext('2d');
        };
        ctrlCanvasDraw.prototype.AddDrawingObject = function (pObject, id, drawLater) {
            var tDrawingObjects = this.GetProperty("DataContext");
            if (!tDrawingObjects)
                tDrawingObjects = [];
            if (id)
                tDrawingObjects[id] = pObject;
            else
                tDrawingObjects[cdeNMI.MyNMISettings.IDCounter++] = pObject;
            this.SetProperty("DataContext", tDrawingObjects);
            if (!drawLater)
                this.RequestRedraw();
        };
        ctrlCanvasDraw.prototype.DrawCanvasBackground = function () {
            if (!this.bgctx)
                return;
            if (this.bgctx.canvas.height === 0 || this.bgctx.canvas.width === 0)
                this.ResizeCanvas();
            this.bgctx.globalAlpha = 1;
            if (this.GetProperty("ForegroundOpacity"))
                this.fgctx.globalAlpha = parseFloat(this.GetProperty("ForegroundOpacity"));
            var tIsTrans = false;
            if (this.GetProperty("Background")) {
                this.bgctx.fillStyle = ctrlCanvasDraw.ProcessColor(this, this.bgctx, this.GetProperty("Background"));
                if (this.GetProperty("Background").toLowerCase() === "transparent")
                    tIsTrans = true;
            }
            else {
                this.bgctx.fillStyle = "transparent";
                tIsTrans = true;
            }
            if (tIsTrans)
                this.bgctx.clearRect(0, 0, this.bgctx.canvas.width, this.bgctx.canvas.height);
            else
                this.bgctx.fillRect(0, 0, this.bgctx.canvas.width, this.bgctx.canvas.height);
            if (this.GetProperty("Playback") === true) {
                this.tObjPointer = 0;
                this.tAsyncStrokes = this.MyBackDrawObjects;
                this.tStrokePointer = 0;
                this.DrawLinesAsync(this, this.bgctx);
            }
            else {
                for (var id in this.MyBackDrawObjects) {
                    if (this.MyBackDrawObjects[id].Visibility && this.MyBackDrawObjects[id].HasEnded) {
                        this.DrawObject(this.bgctx, this.MyBackDrawObjects[id]);
                    }
                }
            }
        };
        ctrlCanvasDraw.prototype.ClearPicture = function () {
            this.MyBackDrawObjects = [];
            if (this.bgctx)
                this.bgctx.clearRect(0, 0, this.bgctx.canvas.width, this.bgctx.canvas.height);
            if (this.fgctx)
                this.fgctx.clearRect(0, 0, this.fgctx.canvas.width, this.fgctx.canvas.height);
            this.foregroundPolylines = [];
            this.DrawCanvasBackground();
            this.SetProperty("DataContext", null);
        };
        ctrlCanvasDraw.prototype.RedrawForeground = function () {
            this.redrawPending = false;
            if (!cde.CBool(this.GetProperty("Playback")) && !cde.CBool(this.GetProperty("NoClear")))
                this.fgctx.clearRect(0, 0, this.fgctx.canvas.width, this.fgctx.canvas.height);
            var tDrawingObjects = this.GetProperty("DataContext");
            if (!tDrawingObjects)
                tDrawingObjects = [];
            var id;
            for (id in this.foregroundPolylines) {
                if (this.foregroundPolylines[id].HasEnded) {
                    tDrawingObjects.push(this.foregroundPolylines[id]);
                    delete this.foregroundPolylines[id.toString()];
                }
                else
                    this.DrawPolyline(this.fgctx, this.foregroundPolylines[id].ComplexData, this.foregroundPolylines[id].Foreground, this.foregroundPolylines[id].Fill);
            }
            if (tDrawingObjects.length > 0 && this.GetProperty("Playback") === true) {
                for (id in tDrawingObjects) {
                    if (!this.MyBackDrawObjects)
                        this.MyBackDrawObjects = [];
                    if (!tDrawingObjects[id].IsTemp)
                        this.MyBackDrawObjects.push(tDrawingObjects[id]);
                    delete tDrawingObjects[id];
                }
                this.DrawCanvasBackground();
            }
            else {
                for (id in tDrawingObjects) {
                    if (tDrawingObjects[id].Visibility) {
                        this.DrawObject(cde.CBool(tDrawingObjects[id].HasEnded) && this.bgctx ? this.bgctx : this.fgctx, tDrawingObjects[id]);
                    }
                    if (tDrawingObjects[id].HasEnded || tDrawingObjects[id].Type !== 2) {
                        if (!this.MyBackDrawObjects)
                            this.MyBackDrawObjects = [];
                        if (!tDrawingObjects[id].IsTemp)
                            this.MyBackDrawObjects.push(tDrawingObjects[id]);
                        delete tDrawingObjects[id];
                    }
                }
            }
            this.SetProperty("DataContextSilent", tDrawingObjects);
        };
        ctrlCanvasDraw.prototype.DrawObject = function (pctx, tDrawingObjects) {
            switch (tDrawingObjects.Type) {
                case 1: //Rectangle
                    pctx.fillStyle = ctrlCanvasDraw.ProcessColor(this, pctx, tDrawingObjects.Fill);
                    pctx.fillRect(tDrawingObjects.Left, tDrawingObjects.Top, tDrawingObjects.Width, tDrawingObjects.Height);
                    break;
                case 2: //Polyline
                    this.DrawPolyline(tDrawingObjects.HasEnded && this.bgctx ? this.bgctx : pctx, tDrawingObjects.ComplexData, tDrawingObjects.Foreground, tDrawingObjects.Fill);
                    break;
                case 3: //Text
                    if (!tDrawingObjects.ComplexData)
                        return;
                    if (tDrawingObjects.ComplexData.Font)
                        pctx.font = tDrawingObjects.ComplexData.Font;
                    pctx.strokeStyle = ctrlCanvasDraw.ProcessColor(this, pctx, tDrawingObjects.Fill);
                    pctx.strokeText(tDrawingObjects.ComplexData.Text, tDrawingObjects.Left, tDrawingObjects.Top);
                    break;
                case 4: //Filled Cicrle
                    pctx.beginPath();
                    pctx.arc(tDrawingObjects.Left, tDrawingObjects.Top, tDrawingObjects.Width, 0, 2 * Math.PI, false);
                    pctx.fillStyle = ctrlCanvasDraw.ProcessColor(this, pctx, tDrawingObjects.Fill);
                    pctx.fill();
                    break;
                case 5: //Empty Circle
                    pctx.beginPath();
                    pctx.arc(tDrawingObjects.Left, tDrawingObjects.Top, tDrawingObjects.Width, 0, 2 * Math.PI, false);
                    pctx.lineWidth = tDrawingObjects.StrokeThickness;
                    pctx.strokeStyle = ctrlCanvasDraw.ProcessColor(this, pctx, tDrawingObjects.Fill);
                    pctx.stroke();
                    break;
                case 6: //Image Draw
                    {
                        var tIMG = document.createElement("img");
                        tIMG.src = "data:image/jpeg;base64," + tDrawingObjects.ComplexData;
                        pctx.drawImage(tIMG, tDrawingObjects.Left, tDrawingObjects.Top);
                    }
                    break;
                case 7: //drawIcon
                    try {
                        if (jdenticon) {
                            pctx.setTransform(1, 0, 0, 1, tDrawingObjects.Left, tDrawingObjects.Top);
                            jdenticon.drawIcon(pctx, tDrawingObjects.ComplexData, tDrawingObjects.Width);
                        }
                    }
                    catch (_a) {
                        //ignored
                    }
                    break;
            }
        };
        ctrlCanvasDraw.prototype.RequestRedraw = function () {
            var _this = this;
            if (!this.redrawPending) {
                this.redrawPending = true;
                if (window.requestAnimationFrame) {
                    window.requestAnimationFrame(function () {
                        _this.RedrawForeground();
                    });
                }
                else {
                    if (window.webkitRequestAnimationFrame)
                        window.webkitRequestAnimationFrame(function () {
                            _this.RedrawForeground();
                        });
                    else
                        window.setTimeout(function () {
                            _this.RedrawForeground();
                        }, Math.floor(1000 / 60));
                }
            }
        };
        ctrlCanvasDraw.prototype.DrawPolyline = function (ctx, pPoints, pColor, pFillColor) {
            if (pPoints.length === 1) {
                ctx.beginPath();
                ctx.arc(pPoints[0].PO.x, pPoints[0].PO.y, 10, 0, Math.PI, true);
                ctx.arc(pPoints[0].PO.x, pPoints[0].PO.y, 10, Math.PI, Math.PI * 2, true);
                if (pColor)
                    ctx.fillStyle = pColor;
                ctx.globalAlpha = 0.5;
                ctx.fill();
            }
            else if (pPoints.length > 1) {
                for (var i = 1; i < pPoints.length; ++i) {
                    ctx.beginPath();
                    ctx.moveTo(pPoints[i - 1].PO.x, pPoints[i - 1].PO.y);
                    ctx.lineCap = "round";
                    ctx.strokeStyle = pColor;
                    ctx.globalAlpha = 1;
                    ctx.lineTo(pPoints[i].PO.x, pPoints[i].PO.y);
                    var pStrokeThickness = pPoints[i].PO.t;
                    if (pStrokeThickness < 1)
                        pStrokeThickness = 1;
                    ctx.lineWidth = pStrokeThickness * cdeNMI.MyNMISettings.StrokeSize;
                    ctx.stroke();
                }
                if (pFillColor) {
                    ctx.fillStyle = pFillColor;
                    ctx.globalAlpha = 0.3;
                    ctx.fill();
                }
            }
        };
        ctrlCanvasDraw.prototype.DrawLinesAsync = function (thisObj, ctx) {
            if (!thisObj.tAsyncStrokes || thisObj.tObjPointer < 0 || thisObj.tAsyncStrokes.length <= thisObj.tObjPointer)
                return;
            var tStrokeP = thisObj.tAsyncStrokes[thisObj.tObjPointer].ComplexData;
            thisObj.tStrokePointer++;
            if (thisObj.tStrokePointer >= tStrokeP.length) {
                if (thisObj.tAsyncStrokes[thisObj.tObjPointer].Fill) {
                    ctx.fillStyle = thisObj.tAsyncStrokes[thisObj.tObjPointer].Fill;
                    ctx.globalAlpha = 0.3;
                    ctx.fill();
                }
                thisObj.tObjPointer++;
                if (thisObj.tObjPointer < thisObj.tAsyncStrokes.length) {
                    tStrokeP = thisObj.tAsyncStrokes[thisObj.tObjPointer].ComplexData;
                    thisObj.tStrokePointer = 1;
                }
                else {
                    thisObj.tObjPointer = -1;
                    thisObj.tStrokePointer = -1;
                    thisObj.SetProperty("Playback", false);
                    return;
                }
            }
            ctx.beginPath();
            ctx.moveTo(tStrokeP[thisObj.tStrokePointer - 1].PO.x, tStrokeP[thisObj.tStrokePointer - 1].PO.y);
            ctx.lineCap = "round";
            ctx.strokeStyle = thisObj.tAsyncStrokes[thisObj.tObjPointer].Foreground;
            ctx.globalAlpha = 1;
            ctx.lineTo(tStrokeP[thisObj.tStrokePointer].PO.x, tStrokeP[thisObj.tStrokePointer].PO.y);
            var pStrokeThickness = tStrokeP[thisObj.tStrokePointer].PO.t;
            if (pStrokeThickness < 1)
                pStrokeThickness = 1;
            ctx.lineWidth = pStrokeThickness * cdeNMI.MyNMISettings.StrokeSize;
            ctx.stroke();
            var tDelay = tStrokeP[thisObj.tStrokePointer].DT - tStrokeP[thisObj.tStrokePointer - 1].DT;
            if (thisObj.tStrokePointer < 2)
                tDelay = tStrokeP[1].DT;
            setTimeout(thisObj.DrawLinesAsync, tDelay, thisObj, ctx);
        };
        ctrlCanvasDraw.prototype.BeginPolyline = function (pTarget, pEvent, pPointer) {
            var tCanvDraw = pTarget;
            if (tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()])
                tCanvDraw.EndPolyline(pTarget, pEvent, pPointer);
            var tColor = pTarget.GetProperty("Foreground");
            if (pTarget.GetProperty("UseRandomColor") === true)
                tColor = cdeNMI.CColorToHex('rgb(' + Math.floor(Math.random() * 180) + ',' + Math.floor(Math.random() * 180) + ',' + Math.floor(Math.random() * 180) + ')');
            var tSt = new cdeNMI.TheStrokePoint();
            tSt.DT = Math.ceil((new Date()).getTime() - (new Date(2014, 4, 1)).getTime());
            tSt.PG = pPointer.Identifier.toString();
            tSt.PO = pPointer.AdjPosition;
            tCanvDraw.MyFirstPoint = new cdeNMI.TheDrawingPoint(pPointer.Position.x, pPointer.Position.y);
            tCanvDraw.MyFirstPoint.t = pPointer.Buttons;
            tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()] = {
                Type: 2,
                Visibility: true,
                ComplexData: [tSt],
                Foreground: tColor
            };
            tCanvDraw.RequestRedraw();
        };
        ctrlCanvasDraw.prototype.ExtendPolylineTo = function (pTarget, pEvent, pPointer) {
            var tCanvDraw = pTarget;
            if (tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()]) {
                var polyline = tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()];
                var p0 = polyline.ComplexData[0];
                var tSt = new cdeNMI.TheStrokePoint();
                tSt.DT = Math.ceil((new Date()).getTime() - (new Date(2014, 4, 1)).getTime()) - p0.DT;
                tSt.PG = pPointer.Identifier.toString();
                tSt.PO = pPointer.AdjPosition;
                tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()].ComplexData.push(tSt);
            }
            tCanvDraw.RequestRedraw();
        };
        ctrlCanvasDraw.prototype.EndPolyline = function (pTarget, pEvent, pPointer) {
            var tCanvDraw = pTarget;
            if (tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()]) {
                var polyline = tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()];
                var p0 = polyline.ComplexData[0];
                var tSt = new cdeNMI.TheStrokePoint();
                tSt.DT = Math.ceil((new Date()).getTime() - (new Date(2014, 4, 1)).getTime()) - p0.DT;
                tSt.PG = pPointer.Identifier.toString();
                tSt.PO = pPointer.AdjPosition;
                tCanvDraw.foregroundPolylines[pPointer.Identifier.toString()].ComplexData.push(tSt);
                if (polyline) {
                    var distance = cdeNMI.Vector2Distance(p0.PO, tSt.PO);
                    if (tCanvDraw.GetProperty("FillDistance") && distance < tCanvDraw.GetProperty("FillDistance")) {
                        polyline.Fill = polyline.Foreground;
                    }
                    polyline.HasEnded = true;
                    tCanvDraw.RequestRedraw();
                    tCanvDraw.FireEvent(false, "OnDrawEnd", pPointer, polyline);
                    var tTargetCtrl = cdeNMI.GetControlFromPoint(tCanvDraw.MyFirstPoint.x, tCanvDraw.MyFirstPoint.y);
                    if (tTargetCtrl) {
                        if (tCanvDraw.MyFirstPoint.t > 1 && distance < 5) {
                            tTargetCtrl.FireEvent(true, "NMI_SHAPE_RECOGNIZED", "rightmouse", 10);
                        }
                        else if (cdeNMI.MyShapeRecognizer && cde.CBool(pTarget.GetProperty("EnableRecognizer"))) {
                            var tRes = cdeNMI.MyShapeRecognizer.RecogizeShape(polyline, 0);
                            if (tRes && tTargetCtrl)
                                tTargetCtrl.FireEvent(true, "NMI_SHAPE_RECOGNIZED", tRes.Name, tRes.Score);
                        }
                    }
                }
            }
        };
        ctrlCanvasDraw.ProcessColor = function (pThis, pgbctx, tFill) {
            var tCmd = tFill.substr(0, 3);
            switch (tCmd) {
                case "SVG": //Syntax: "SVG:<svgCode>"
                    {
                        var data = tFill.substr(4);
                        var DOMURL = self.URL || self.webkitURL || self;
                        var svg = new Blob([data], { type: "image/svg+xml;charset=utf-8" });
                        var url = DOMURL.createObjectURL(svg);
                        var img = new Image();
                        img.crossOrigin = 'Anonymous';
                        img.src = url; // data
                        pgbctx.drawImage(img, 100, 100);
                    }
                    return "transparent";
                case "HUE":
                    {
                        var gradient = null;
                        if (pThis.GetProperty("IsVertical"))
                            gradient = pgbctx.createLinearGradient(0, 0, 0, pgbctx.canvas.height);
                        else
                            gradient = pgbctx.createLinearGradient(0, 0, pgbctx.canvas.width, 0);
                        if (pThis.GetProperty("IsInverted")) {
                            gradient.addColorStop(0, "#FF0000");
                            gradient.addColorStop(0.17, "#FF00FF");
                            gradient.addColorStop(0.33, "#0000FF");
                            gradient.addColorStop(0.50, "#00FFFF");
                            gradient.addColorStop(0.67, "#00FF00");
                            gradient.addColorStop(0.83, "#FFFF00");
                            gradient.addColorStop(1, "#FF0000");
                        }
                        else {
                            gradient.addColorStop(0, "#FF0000");
                            gradient.addColorStop(0.17, "#FFFF00");
                            gradient.addColorStop(0.33, "#00FF00");
                            gradient.addColorStop(0.50, "#00FFFF");
                            gradient.addColorStop(0.67, "#0000FF");
                            gradient.addColorStop(0.83, "#FF00FF");
                            gradient.addColorStop(1, "#FF0000");
                        }
                        return gradient;
                    }
                default:
                    {
                        var tBar = void 0;
                        if (tFill.length > 9 && tFill.toLowerCase().substr(0, 9) === "gradient(") {
                            tBar = tFill.substr(9, tFill.length - 10).split(',');
                            var tMode = 1;
                            if (pThis.GetProperty("IsVertical"))
                                tMode = 2;
                            return ctrlCanvasDraw.CreateGradient(pgbctx, tBar, tMode, cde.CBool(pThis.GetProperty("IsInverted")));
                        }
                        else if (tFill.length > 10 && tFill.toLowerCase().substr(0, 10) === "gradientc(") {
                            tBar = tFill.substr(10, tFill.length - 11).split(',');
                            return ctrlCanvasDraw.CreateGradient(pgbctx, tBar, 0, cde.CBool(pThis.GetProperty("IsInverted")));
                        }
                        else if (tFill.toLowerCase() === "transparent")
                            tFill = "rgba(0,0,0,0)";
                    }
                    break;
            }
            return tFill;
        };
        ctrlCanvasDraw.CreateGradient = function (pgbctx, tBar, pMode, bInverted) {
            var gradient;
            switch (pMode) {
                default:
                    gradient = pgbctx.createRadialGradient(pgbctx.canvas.width / 2, pgbctx.canvas.height / 2, 1, pgbctx.canvas.width / 2, pgbctx.canvas.height / 2, pgbctx.canvas.height / 2);
                    break;
                case 1:
                    gradient = pgbctx.createLinearGradient(0, 0, pgbctx.canvas.width, 0);
                    break;
                case 2:
                    gradient = pgbctx.createLinearGradient(0, 0, 0, pgbctx.canvas.height);
                    break;
            }
            var i;
            if (bInverted) {
                for (i = 0; i < tBar.length; i++) {
                    gradient.addColorStop(i, tBar[i]);
                }
            }
            else {
                for (i = 0; i < tBar.length; i++) {
                    gradient.addColorStop(i, tBar[(tBar.length - 1) - i]);
                }
            }
            return gradient;
        };
        return ctrlCanvasDraw;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlCanvasDraw = ctrlCanvasDraw;
    /**
    * Creates a Canvas with Touch and Pen sensitve area
    *
    * (4.1 Ready!)
    */
    var ctrlTouchDraw = /** @class */ (function (_super) {
        __extends(ctrlTouchDraw, _super);
        function ctrlTouchDraw(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.drawingTarget = null; // target of the actual drawing
            _this.mBaseDiv = null;
            _this.mTextFld = null;
            _this.mStrokes = new Array();
            _this.mIsTextFldVisible = false;
            _this.mIsSynced = false;
            _this.mTextToggleButton = null;
            _this.mSaveButton = null;
            _this.mClearButton = null;
            _this.mPlayButton = null;
            _this.tBlack = null;
            _this.tRed = null;
            _this.tGreen = null;
            _this.tYellow = null;
            _this.tBlue = null;
            _this.tPink = null;
            return _this;
        }
        ctrlTouchDraw.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.TouchDraw;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            if (this.MyFieldInfo) {
                this.mIsSynced = cde.CBool(this.GetSetting("IsSynced"));
            }
            this.mBaseDiv = cdeNMI.MyTCF.CreateBaseControl().Create(pTargetControl, { TRF: this.MyTRF });
            this.mBaseDiv.SetElement(document.createElement("div"));
            this.mBaseDiv.SetInitialSize(1);
            this.drawingTarget = cdeNMI.MyTCF.CreateBaseControl().Create(this.mBaseDiv);
            this.drawingTarget.SetElement(document.createElement("div"));
            this.drawingTarget.GetElement().style.cursor = "default";
            this.drawingTarget.GetElement().style.width = "inherit";
            this.drawingTarget.GetElement().style.height = "inherit";
            this.mBaseDiv.AppendChild(this.drawingTarget);
            var holder = this.mBaseDiv.GetElement();
            holder.ondragover = function () {
                _this.drawingTarget.GetElement().style.borderLeftWidth = "5px";
                _this.drawingTarget.GetElement().style.borderLeftColor = "red";
                return false;
            };
            holder.ondragend = function () {
                _this.drawingTarget.GetElement().style.borderLeftWidth = "0px";
                return false;
            };
            holder.ondragleave = function () {
                _this.drawingTarget.GetElement().style.borderLeftWidth = "0px";
                return false;
            };
            holder.ondrop = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this.drawingTarget.GetElement().style.borderLeftWidth = "0px";
                _this.ProcessFiles(e.dataTransfer.files);
            };
            this.MyDrawingObject = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CanvasDraw).Create(this.drawingTarget, { TRF: pTRF }); // ctrlCanvasDraw.Create(this.drawingTarget, pTRF);
            this.MyDrawingObject.SetProperty("FillDistance", 25);
            if (!this.MyFieldInfo || !this.MyFieldInfo.Flags || (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) !== 0)) {
                this.MyDrawingObject.SetProperty("OnPointerDown", this.MyDrawingObject.BeginPolyline);
                this.MyDrawingObject.SetProperty("OnPointerMove", this.MyDrawingObject.ExtendPolylineTo);
                this.MyDrawingObject.SetProperty("OnPointerUp", this.MyDrawingObject.EndPolyline);
                this.MyDrawingObject.SetProperty("OnPointerCancel", this.MyDrawingObject.EndPolyline);
                this.MyDrawingObject.RegisterEvent("OnDrawEnd", function (thisObj, pPointer, polyline) {
                    var pPointerID = pPointer.Identifier;
                    _this.mStrokes.push(polyline);
                    _this.SetProperty("Value", JSON.stringify(_this.mStrokes));
                    if (_this.mIsSynced && _this.MyTRF && cdeNMI.MyEngine) {
                        cdeNMI.MyEngine.GetBaseEngine().PublishCentral("NEWDRAWOBJECT:" + _this.MyTRF.GetHash() + ":REMOTE_" + pPointerID, JSON.stringify(polyline));
                    }
                });
                if (this.mIsSynced)
                    this.RegisterSyncEvents();
                var tButLoc = 0;
                this.mClearButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Clear", "Style=position:absolute; right:0px;background-color:white; background-image:none; top:0px"] }); //TODO: Convert Style to ClassName!
                this.mClearButton.SetProperty("OnClick", function () {
                    _this.ClearPicture();
                    _this.SetProperty("Value", "");
                    _this.FireEvent(false, "OnClearPicture");
                    if (_this.mIsSynced && _this.MyTRF && cdeNMI.MyEngine)
                        cdeNMI.MyEngine.GetBaseEngine().PublishCentral("CLEARCANVAS:" + _this.MyTRF.GetHash());
                    return false;
                });
                this.mClearButton.SetProperty("TileTop", tButLoc++);
                this.mClearButton.SetProperty("Foreground", "black");
                if (cde.CBool(this.GetSetting("HideClear")))
                    this.mClearButton.SetProperty("Visibility", false);
                this.mSaveButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Save", "Style=position:absolute; right:0px;background-color:white; background-image:none;"] }); //TODO: Convert Style to ClassName!
                this.mSaveButton.SetProperty("OnClick", function (sender, e, tPs) {
                    var imageData;
                    var fileExt = ".PNG";
                    if (e.button === 2 || tPs > 1 || (_this.GetProperty("FileFormat") && _this.GetProperty("FileFormat").toString().length > 0)) {
                        imageData = JSON.stringify(_this.mStrokes);
                        var tExt = _this.GetProperty("FileFormat");
                        if (!tExt)
                            tExt = "ink2me";
                        fileExt = "." + tExt;
                        if (cde.MyContentEngine)
                            cde.MyContentEngine.SaveFile(imageData, cdeNMI.DateToMini(new Date()) + fileExt, "image/png", false);
                    }
                    else {
                        imageData = _this.MyDrawingObject.GetPNG();
                        var tRaw = cdeNMI.convertBase64ToBinary(imageData);
                        if (cde.MyContentEngine)
                            cde.MyContentEngine.SaveFile(tRaw, cdeNMI.DateToMini(new Date()) + fileExt, "image/png", false);
                    }
                    _this.FireEvent(false, "OnSavePicture", imageData);
                    if (_this.mIsSynced && imageData.length > 1) {
                        cdeNMI.ShowToastMessage("Drawing sent to owner");
                        if (cde.MyContentEngine) {
                            if (_this.MyFieldInfo)
                                cde.MyContentEngine.PublishToNode(_this.MyFieldInfo.cdeN, "CDE_FILEPUSH:IMG" + cdeNMI.DateToMini(new Date()) + fileExt, imageData);
                            else
                                cde.MyContentEngine.PublishToService("CDE_FILEPUSH:IMG" + cdeNMI.DateToMini(new Date()) + fileExt, imageData);
                        }
                    }
                    return false;
                });
                this.mSaveButton.SetProperty("TileTop", tButLoc++);
                this.mSaveButton.SetProperty("Foreground", "black");
                this.mSaveButton.SetProperty("Visibility", this.mIsSynced);
                this.mPlayButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Play", "Style=position:absolute; right:0px;background-color:white; background-image:none;"] }); //TODO: Convert Style to ClassName!
                this.mPlayButton.SetProperty("OnClick", function () {
                    _this.MyDrawingObject.SetProperty("Playback", true);
                    _this.MyDrawingObject.DrawCanvasBackground();
                    if (_this.mIsSynced && _this.MyTRF && cdeNMI.MyEngine)
                        cdeNMI.MyEngine.GetBaseEngine().PublishCentral("PLAYBOARD:" + _this.MyTRF.GetHash());
                    return false;
                });
                this.mPlayButton.SetProperty("TileTop", tButLoc++);
                this.mPlayButton.SetProperty("Foreground", "black");
                if (!cde.CBool(this.GetSetting("ShowPlay")))
                    this.mPlayButton.SetProperty("Visibility", false);
                if ((this.MyFieldInfo && (this.MyFieldInfo.Flags & 32) !== 0) || (this.GetProperty("Value") && this.GetProperty("Value").substring(0, 2) !== "[{")) {
                    this.ShowTextField(this.GetProperty("Value"), false);
                    this.mTextToggleButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mBaseDiv, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Enter Text", "Style=position:absolute; right:0px"] }); //TODO: Convert Style to ClassName!
                    this.mTextToggleButton.SetProperty("OnClick", function () {
                        if (_this.mIsTextFldVisible) {
                            _this.mIsTextFldVisible = false;
                            _this.drawingTarget.SetProperty("Visibility", true);
                            _this.mTextFld.SetProperty("Visibility", false);
                            _this.mTextToggleButton.SetProperty("Text", "Enter Text");
                            _this.mSaveButton.SetProperty("Disabled", false);
                        }
                        else {
                            _this.mIsTextFldVisible = true;
                            _this.drawingTarget.SetProperty("Visibility", false);
                            _this.mTextFld.SetProperty("Visibility", true);
                            _this.mTextToggleButton.SetProperty("Text", "Draw");
                            _this.mSaveButton.SetProperty("Disabled", true);
                        }
                        return false;
                    });
                    this.mTextToggleButton.SetProperty("TileTop", 2);
                    this.mTextToggleButton.SetProperty("Foreground", "black");
                }
                else {
                    this.tBlack = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Black", "Style=position:absolute; right:0px; background-color:black; background-image:none;"] }); //TODO: Convert Style to ClassName!
                    this.tBlack.SetProperty("OnClick", function () {
                        _this.MyDrawingObject.SetProperty("Foreground", "#000000");
                        return false;
                    });
                    this.tBlack.SetProperty("TileTop", tButLoc++);
                    if (!cde.CBool(this.GetSetting["ShowColors"]))
                        this.tBlack.SetProperty("Visibility", false);
                    this.tRed = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Red", "Style=position:absolute; right:0px; background-color:#FF0000; background-image:none;"] }); //TODO: Convert Style to ClassName!
                    this.tRed.SetProperty("OnClick", function () {
                        _this.MyDrawingObject.SetProperty("Foreground", "#FF0000");
                        return false;
                    });
                    this.tRed.SetProperty("TileTop", tButLoc++);
                    if (!cde.CBool(this.GetSetting["ShowColors"]))
                        this.tRed.SetProperty("Visibility", false);
                    this.tGreen = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Green", "Style=position:absolute; right:0px; background-color:#00FF00; background-image:none;"] }); //TODO: Convert Style to ClassName!
                    this.tGreen.SetProperty("OnClick", function () {
                        _this.MyDrawingObject.SetProperty("Foreground", "#00FF00");
                        return false;
                    });
                    this.tGreen.SetProperty("TileTop", tButLoc++);
                    if (!cde.CBool(this.GetSetting["ShowColors"]))
                        this.tGreen.SetProperty("Visibility", false);
                    this.tYellow = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Yellow", "Style=position:absolute; right:0px; background-color:#FFFF00; background-image:none;"] }); //TODO: Convert Style to ClassName!
                    this.tYellow.SetProperty("OnClick", function () {
                        _this.MyDrawingObject.SetProperty("Foreground", "#FFFF00");
                        return false;
                    });
                    this.tYellow.SetProperty("TileTop", tButLoc++);
                    if (!cde.CBool(this.GetSetting["ShowColors"]))
                        this.tYellow.SetProperty("Visibility", false);
                    this.tBlue = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Blue", "Style=position:absolute; right:0px; background-color:#0000FF; background-image:none;"] }); //TODO: Convert Style to ClassName!
                    this.tBlue.SetProperty("OnClick", function () {
                        _this.MyDrawingObject.SetProperty("Foreground", "#0000FF");
                        return false;
                    });
                    this.tBlue.SetProperty("TileTop", tButLoc++);
                    if (!cde.CBool(this.GetSetting["ShowColors"]))
                        this.tBlue.SetProperty("Visibility", false);
                    this.tPink = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.drawingTarget, { PostInitBag: ["TileWidth=1", "TileHeight=1", "Text=Pink", "Style=position:absolute; right:0px; background-color:#FF00FF; background-image:none;"] }); //TODO: Convert Style to ClassName!
                    this.tPink.SetProperty("OnClick", function () {
                        _this.MyDrawingObject.SetProperty("Foreground", "#FF00FF");
                        return false;
                    });
                    this.tPink.SetProperty("TileTop", tButLoc++);
                    if (!cde.CBool(this.GetSetting["ShowColors"]))
                        this.tPink.SetProperty("Visibility", false);
                }
            }
            if (window.addEventListener) {
                window.addEventListener("resize", function () { _this.ResizeEventHandler(); }, false);
            }
            this.SetElement(this.mBaseDiv.GetElement());
            if (!this.MyFieldInfo || (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) !== 0)) {
                this.PreventDefaultManipulationAndMouseEvent(null);
            }
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ResizeEventHandler(); });
            }
            this.MyDrawingObject.ApplySkin();
            pTargetControl.RegisterEvent("OnLoaded", function () {
                _this.ResizeEventHandler();
            });
            return true;
        };
        ctrlTouchDraw.prototype.SetProperty = function (pName, pValue) {
            if (pName === "iValue") {
                if (pValue === this.GetProperty("Value"))
                    return;
                this.mStrokes = new Array();
                this.ClearPicture();
                if (!pValue || pValue === '') {
                    if (this.MyDrawingObject)
                        this.MyDrawingObject.SetProperty("DataContext", null);
                }
                else {
                    if (pValue.substring(0, 2) === "[{") {
                        if (this.MyDrawingObject) {
                            var pObjects = void 0;
                            try {
                                pObjects = JSON.parse(pValue);
                                this.MyDrawingObject.SetProperty("DataContext", pObjects);
                            }
                            catch (e) {
                                this.MyDrawingObject.SetProperty("DataContext", null);
                            }
                        }
                    }
                    else {
                        if (!this.mTextFld)
                            this.ShowTextField(pValue, true);
                        else
                            this.mTextFld.SetProperty("Value", pValue);
                    }
                }
            }
            else if (pName === "IsSynced") {
                pValue = cde.CBool(pValue);
                if (this.mIsSynced === false && pValue)
                    this.RegisterSyncEvents();
                this.mIsSynced = pValue;
                if (this.mSaveButton)
                    this.mSaveButton.SetProperty("Visibility", this.mIsSynced);
            }
            else if (pName === "ShowSave") {
                this.mSaveButton.SetProperty("Visibility", cde.CBool(pValue));
            }
            else if (pName === "ShowPlay") {
                this.mPlayButton.SetProperty("Visibility", cde.CBool(pValue));
            }
            else if (pName === "ShowColors") {
                this.tBlack.SetProperty("Visibility", cde.CBool(pValue));
                this.tBlue.SetProperty("Visibility", cde.CBool(pValue));
                this.tGreen.SetProperty("Visibility", cde.CBool(pValue));
                this.tPink.SetProperty("Visibility", cde.CBool(pValue));
                this.tRed.SetProperty("Visibility", cde.CBool(pValue));
                this.tYellow.SetProperty("Visibility", cde.CBool(pValue));
            }
            else if (pName === "IsAbsolute") {
                if (cde.CBool(pValue)) {
                    this.mBaseDiv.GetElement().style.position = "absolute";
                    this.drawingTarget.GetElement().style.position = "absolute";
                }
                else {
                    this.mBaseDiv.GetElement().style.position = "relative";
                    this.drawingTarget.GetElement().style.position = "relative";
                }
            }
            else if (pName === "IsOverlay") {
                pValue = cde.CBool(pValue);
                this.tBlack.SetProperty(pName, pValue);
                this.tYellow.SetProperty(pName, pValue);
                this.tGreen.SetProperty(pName, pValue);
                this.tRed.SetProperty(pName, pValue);
                this.tBlue.SetProperty(pName, pValue);
                this.tPink.SetProperty(pName, pValue);
                this.mSaveButton.SetProperty(pName, pValue);
                this.mPlayButton.SetProperty(pName, pValue);
                this.mClearButton.SetProperty(pName, pValue);
            }
            if (this.MyDrawingObject && pName !== "Style") {
                this.MyDrawingObject.SetProperty(pName, pValue);
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "AutoAdjust") {
                this.ResizeEventHandler();
            }
        };
        ctrlTouchDraw.prototype.GetProperty = function (pName) {
            if (pName === "Value" && this.MyFieldInfo && (this.MyFieldInfo.Flags & 1) === 0) {
                if (this.mIsTextFldVisible)
                    return this.mTextFld.GetProperty("Value");
            }
            return _super.prototype.GetProperty.call(this, pName);
        };
        ctrlTouchDraw.prototype.ProcessFiles = function (pFileList) {
            var _this = this;
            if (!pFileList || !pFileList.length)
                return;
            var file = pFileList[0];
            if (file.name.length > 8 && file.name.substr(file.name.length - 7, 7) === ".ink2me") {
                var reader_2 = new FileReader();
                reader_2.onload = function () {
                    var tres = reader_2.result;
                    _this.SetProperty("iValue", tres);
                    if (_this.mIsSynced && _this.MyTRF && cdeNMI.MyEngine) {
                        cdeNMI.MyEngine.GetBaseEngine().PublishCentral("SCREENSYNC:" + _this.MyTRF.GetHash(), tres);
                    }
                };
                reader_2.readAsText(file);
            }
        };
        ctrlTouchDraw.prototype.PostCreate = function (pTE) {
            var _this = this;
            this.RegisterEvent("OnSavePicture", function (thisObj, pData) {
                if (cde.MyContentEngine) {
                    if (_this.MyFieldInfo)
                        cde.MyContentEngine.PublishToNode(_this.MyFieldInfo.cdeN, "CDE_FILEPUSH:IMG" + cdeNMI.DateToMini(new Date()) + ".PNG", pData);
                    else
                        cde.MyContentEngine.PublishToService("CDE_FILEPUSH:IMG" + cdeNMI.DateToMini(new Date()) + ".PNG", pData);
                }
            });
        };
        ctrlTouchDraw.prototype.RegisterSyncEvents = function () {
            var _this = this;
            this.RegisterIncomingMessage(cdeNMI.eTheNMIEngine, function (thisObj, pMSG) {
                var tCmd = pMSG.Message.TXT.split(':');
                if (tCmd[1] === thisObj.MyTRF.GetHash()) {
                    switch (tCmd[0]) {
                        case "CLEARCANVAS":
                            thisObj.MyDrawingObject.ClearPicture();
                            break;
                        case "NEWDRAWOBJECT":
                            thisObj.MyDrawingObject.AddDrawingObject(JSON.parse(pMSG.Message.PLS), tCmd[2]);
                            break;
                        case "PLAYBOARD":
                            _this.MyDrawingObject.SetProperty("Playback", true);
                            _this.MyDrawingObject.DrawCanvasBackground();
                            break;
                        case "SCREENSYNC":
                            _this.SetProperty("iValue", pMSG.Message.PLS);
                            break;
                        default:
                            break;
                    }
                }
            });
        };
        ctrlTouchDraw.prototype.AddDrawingObject = function (pObject, id) {
            this.MyDrawingObject.AddDrawingObject(pObject, id);
        };
        ctrlTouchDraw.prototype.SetMsgsAndTargetWidth = function (tEle) {
            if (!this.MyTarget)
                return;
            var multidrawWidth = tEle.offsetWidth;
            var multidrawHeight = tEle.offsetHeight;
            if (multidrawWidth > 0 && this.drawingTarget) {
                this.drawingTarget.GetElement().style.width = multidrawWidth.toString() + "px";
            }
            if (multidrawHeight > 0 && this.drawingTarget)
                this.drawingTarget.GetElement().style.height = multidrawHeight.toString() + "px";
            this.MyDrawingObject.ApplySkin();
            this.MyDrawingObject.DrawCanvasBackground();
            this.MyDrawingObject.RequestRedraw();
        };
        ctrlTouchDraw.prototype.ClearPicture = function () {
            if (this.mTextFld)
                this.mTextFld.SetProperty("Value", "");
            if (this.MyDrawingObject)
                this.MyDrawingObject.ClearPicture();
        };
        ctrlTouchDraw.prototype.ResizeEventHandler = function () {
            this.mBaseDiv.GetElement().style.width = "inherit";
            this.mBaseDiv.GetElement().style.height = "inherit";
            this.MyDrawingObject.ApplySkin();
            this.SetMsgsAndTargetWidth(this.MyTarget.GetElement());
        };
        ctrlTouchDraw.prototype.ShowTextField = function (pContent, bShowRightAway) {
            if (!this.mBaseDiv)
                return;
            var tFldInfo = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.TextArea, 8, "");
            if (this.MyFieldInfo) {
                tFldInfo.Flags = this.MyFieldInfo.Flags;
                tFldInfo.FormID = this.MyFieldInfo.FormID;
            }
            this.mTextFld = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleEnded).Create(null, { TRF: new cdeNMI.TheTRF("", 0, tFldInfo), PostInitBag: ["iValue=" + pContent] }); //  cdeNMI.ctrlEditBox.Create(null, null, new TheTRF("", 0, tFldInfo), pContent);
            this.mTextFld.SetProperty("Rows", 10);
            this.mBaseDiv.AppendChild(this.mTextFld);
            if (bShowRightAway)
                this.drawingTarget.SetProperty("Visibility", false);
            else
                this.mTextFld.SetProperty("Visibility", false);
        };
        //legacy support
        ctrlTouchDraw.Create = function (pTarget, pTRF, pUseAbsolute, pXL, pYL, pFldContent) {
            var tTile = new cdeNMI.ctrlTouchDraw(pTRF);
            tTile.InitControl(pTarget, pTRF);
            if (pFldContent)
                tTile.SetProperty("iValue", pFldContent);
            return tTile;
        };
        return ctrlTouchDraw;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTouchDraw = ctrlTouchDraw;
    /**
    * Creates A draw Overlay ontop of another Control
    * The pTargetControl will be overlayed by the ctrlDrawOverlay
    * pTRF is handed to ctrlTouchDraw
    *
    * This control is NOT and input control for Form or Table
    *
    * (4.1 Ready!)
    */
    var ctrlDrawOverlay = /** @class */ (function (_super) {
        __extends(ctrlDrawOverlay, _super);
        function ctrlDrawOverlay(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divTiles = null;
            _this.mDrawCanvas = null;
            _this.CurrentControl = null;
            _this.WasTouchedDownOn = false; //Workaround for Chrome
            return _this;
        }
        ctrlDrawOverlay.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.DrawOverlay;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.divTiles = document.createElement('div');
            this.divTiles.style.position = "absolute";
            this.divTiles.style.top = "0px";
            this.divTiles.style.left = "0px";
            if (pTargetControl) {
                this.divTiles.style.width = pTargetControl.GetContainerElement().clientWidth - 5 + "px"; //-5 required to avoid scrollbars
                this.divTiles.style.height = pTargetControl.GetContainerElement().clientHeight - 5 + "px";
            }
            this.divTiles.id = "cdeOverlay";
            this.divTiles.className = "cdeDrawOverlay";
            this.SetElement(this.divTiles, false);
            this.PreventDefault = true;
            this.PreventManipulation = true;
            this.PreventDefaultManipulationAndMouseEvent(null);
            this.mDrawCanvas = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TouchDraw).Create(this, { TRF: (this.MyTRF ? this.MyTRF : new cdeNMI.TheTRF("", 0, this.MyFieldInfo)) }); // .ctrlTouchDraw.Create(this, pTRF);
            //this.mDrawCanvas.RegisterEvent("NMI_SHAPE_RECOGNIZED", (sender: INMIControl, pName: string, pScore: number) => {
            //    this.FireEvent(true, "NMI_SHAPE_RECOGNIZED", pName, pScore);
            //})
            this.CurrentControl = this.mDrawCanvas;
            this.HookEvents(false);
            return true;
        };
        ctrlDrawOverlay.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if (pName === "AutoAdjust") {
                _super.prototype.SetProperty.call(this, pName, pValue);
                if (window.addEventListener) {
                    window.addEventListener("resize", function () { _this.ResizeEventHandler(); }, false);
                }
                this.ResizeEventHandler();
            }
            this.mDrawCanvas.SetProperty(pName, pValue);
        };
        ctrlDrawOverlay.prototype.ResizeEventHandler = function () {
            var w = window.innerWidth
                || document.documentElement.clientWidth
                || document.body.clientWidth;
            var h = window.innerHeight
                || document.documentElement.clientHeight
                || document.body.clientHeight;
            this.divTiles.style.width = w + "px";
            this.divTiles.style.height = h + "px";
        };
        //Legacy Support
        ctrlDrawOverlay.Create = function (pTargetControl, pTRF, pClassName) {
            var t = new ctrlDrawOverlay(pTRF);
            t.InitControl(pTargetControl, pTRF);
            if (pClassName)
                t.SetProperty("ClassName", pClassName);
            return t;
        };
        return ctrlDrawOverlay;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlDrawOverlay = ctrlDrawOverlay;
    /**
* Creates a vertical or horizontal bar Chart
*
* (4.1 Ready!)
*/
    var ctrlHashIcon = /** @class */ (function (_super) {
        __extends(ctrlHashIcon, _super);
        function ctrlHashIcon(pTRF) {
            return _super.call(this, null, pTRF) || this;
        }
        ctrlHashIcon.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.BarChart;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mBaseCtrl = cdeNMI.MyTCF.CreateBaseControl().Create(pTargetControl, { TRF: this.MyTRF });
            this.mBaseCtrl.SetElement(document.createElement("div"));
            this.mBaseCtrl.SetInitialSize(1);
            this.mBaseCtrl.GetElement().style.position = "relative";
            this.mCanvas = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CanvasDraw).Create(this.mBaseCtrl, { TRF: pTRF });
            this.SetElement(this.mBaseCtrl.GetElement(), true);
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            return true;
        };
        ctrlHashIcon.prototype.ApplySkin = function () {
            this.UpdateBar(this.GetProperty("Value"));
        };
        ctrlHashIcon.prototype.UpdateBar = function (pValue) {
            if (!this.mCanvas)
                return;
            this.mCanvas.ApplySkin();
            if (this.mCanvas.MyHeight === 0 || this.mCanvas.MyWidth === 0) {
                this.mCanvas.ResizeCanvas();
                if (this.mCanvas.MyHeight === 0 || this.mCanvas.MyWidth === 0)
                    return;
            }
            this.tIcon = new cdeNMI.TheDrawingObject();
            this.tIcon.Type = 7;
            this.tIcon.Visibility = true;
            this.tIcon.ComplexData = pValue;
            this.tIcon.Width = cdeNMI.GetSizeFromTile(cde.CInt(this.GetProperty("TileWidth"))) - 8;
            this.tIcon.Left = 4;
            this.tIcon.Top = 4;
            this.mRectangle = [];
            this.mRectangle.push(this.tIcon);
            this.mCanvas.SetProperty("DataContext", this.mRectangle);
        };
        ctrlHashIcon.prototype.SetProperty = function (pName, pValue) {
            if (pName === "iValue" || pName === "Value") {
                this.UpdateBar(pValue);
            }
            else if ((pName === "ControlTW" || pName === "ControlTH" || pName === "DrawMargin") && this.mCanvas) {
                pValue = cde.CInt(pValue);
                this.mCanvas.SetProperty(pName, pValue);
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        return ctrlHashIcon;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlHashIcon = ctrlHashIcon;
    /**
* Creates a vertical or horizontal bar Chart
*
* (4.1 Ready!)
*/
    var ctrlBarChart = /** @class */ (function (_super) {
        __extends(ctrlBarChart, _super);
        function ctrlBarChart(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.wasDrawnOnce = false;
            _this.mBarColor = "#52D0EB";
            _this.mMaxValue = 100;
            _this.mMinValue = 0;
            _this.IsPointerDown = false;
            _this.PointerID = 0;
            return _this;
        }
        ctrlBarChart.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.BarChart;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                this.mBarColor = 'rgba(82,208,235,0.9)';
            else
                this.mBarColor = 'rgba(29,163,209,0.9)';
            this.mBaseCtrl = cdeNMI.MyTCF.CreateBaseControl().Create(pTargetControl, { TRF: this.MyTRF });
            this.mBaseCtrl.SetElement(document.createElement("div"));
            this.mBaseCtrl.SetInitialSize(1);
            this.mBaseCtrl.GetElement().className = "ctrlBarChart";
            this.mBaseCtrl.GetElement().style.position = "relative";
            this.mCanvas = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CanvasDraw).Create(this.mBaseCtrl, { TRF: pTRF }); // ctrlCanvasDraw.Create(this.mBaseCtrl, pTRF);
            this.SetElement(this.mBaseCtrl.GetElement(), true);
            this.SetProperty("Disabled", (!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0));
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            cde.MyBaseAssets.RegisterEvent("ThemeSwitched", function () {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                    _this.mBarColor = 'rgba(82,208,235,0.9)';
                else
                    _this.mBarColor = 'rgba(29,163,209,0.9)';
                _this.UpdateBar(_this.GetProperty("Value"));
            });
            return true;
        };
        ctrlBarChart.prototype.SetProperty = function (pName, pValue) {
            var isDirty = false;
            if (pName === "iValue" || pName === "Value") {
                if (!cde.IsNotSet(this.GetProperty("Format")))
                    pValue = parseFloat(pValue).toFixed(parseInt(this.GetProperty("Format")));
            }
            else if (pName === "Disabled") {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.EnableDisable(cde.CBool(pValue));
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            var tStyle;
            if (pName === "Foreground") {
                tStyle = document.createElement("span");
                tStyle.style.color = pValue;
                this.mBarColor = tStyle.style.color;
                isDirty = true;
            }
            else if (pName === "Value" || pName === "iValue") {
                this.FireEvent(true, "BarChanged", "SetProperty", pValue);
                isDirty = true;
            }
            else if (pName === "MaxValue") {
                this.mMaxValue = cde.CDbl(pValue);
                isDirty = true;
            }
            else if (pName === "MinValue") {
                this.mMinValue = cde.CDbl(pValue);
                isDirty = true;
            }
            else if (pName === "MainBackground") {
                this.mBaseCtrl.GetElement().style.backgroundColor = pValue;
                isDirty = true;
            }
            else if (pName === "Background") {
                if (cde.CInt(pValue) > 0) {
                    tStyle = document.createElement("span");
                    tStyle.style.color = pValue;
                    this.mCanvas.SetProperty("Background", tStyle.style.color);
                }
                else
                    this.mCanvas.SetProperty("Background", pValue);
                isDirty = true;
            }
            else if (pName === "ForegroundOpacity") {
                this.mCanvas.SetProperty("Opacity", pValue);
                isDirty = true;
            }
            else if (pName === "LabelColor") {
                isDirty = true;
            }
            else if (pName === "IsVertical") {
                pValue = cde.CBool(pValue);
                if (pValue) {
                    _super.prototype.SetProperty.call(this, "IsVertical", pValue);
                }
                this.mCanvas.SetProperty("IsVertical", pValue);
                isDirty = true;
            }
            else if (pName === "IsInverted") {
                pValue = cde.CBool(pValue);
                if (cde.CBool(pValue)) {
                    _super.prototype.SetProperty.call(this, "IsInverted", pValue);
                }
                this.mCanvas.SetProperty("IsInverted", pValue);
                isDirty = true;
            }
            else if ((pName === "ControlTW" || pName === "ControlTH" || pName === "DrawMargin" || pName === "TileFactorX" || pName === "TileFactorY") && this.mCanvas) {
                pValue = cde.CInt(pValue);
                this.mCanvas.SetProperty(pName, pValue);
                isDirty = true;
            }
            else if (pName === "BarColorChanged") {
                this.RegisterEvent(pName, pValue);
            }
            if (isDirty)
                this.UpdateBar(this.GetProperty("Value"));
        };
        ctrlBarChart.prototype.ApplySkin = function () {
            this.UpdateBar(this.GetProperty("Value"));
        };
        ctrlBarChart.prototype.UpdateBar = function (pValue) {
            if (!this.mCanvas)
                return;
            this.mCanvas.ApplySkin();
            if (this.mCanvas.MyHeight === 0 || this.mCanvas.MyWidth === 0) {
                this.mCanvas.ResizeCanvas();
                if (this.mCanvas.MyHeight === 0 || this.mCanvas.MyWidth === 0)
                    return;
            }
            this.wasDrawnOnce = true;
            this.tText = new cdeNMI.TheDrawingObject();
            this.tText.Type = 3;
            this.tText.Visibility = true;
            this.tRect = new cdeNMI.TheDrawingObject();
            this.tRect.Type = 1;
            if (this.GetProperty("IsVertical") === true) {
                this.tRect.Left = 0;
                this.tText.Left = 12;
                this.tRect.Width = this.mCanvas.MyWidth;
                if (this.GetProperty("IsInverted") === true) {
                    this.tRect.Top = 0;
                    this.tRect.Height = (this.mCanvas.MyHeight / (this.mMaxValue - this.mMinValue) * (parseFloat(pValue) - this.mMinValue));
                    this.tText.Top = this.tRect.Height + 12;
                }
                else {
                    this.tRect.Top = this.mCanvas.MyHeight - (this.mCanvas.MyHeight / (this.mMaxValue - this.mMinValue) * (parseFloat(pValue) - this.mMinValue));
                    this.tRect.Height = this.mCanvas.MyHeight;
                    this.tText.Top = this.tRect.Top - 12;
                }
                this.tRect.Fill = this.mBarColor;
            }
            else {
                this.tRect.Top = 0;
                this.tText.Top = 12;
                if (this.GetProperty("IsInverted") === true) {
                    this.tRect.Left = this.mCanvas.MyWidth - (this.mCanvas.MyWidth / (this.mMaxValue - this.mMinValue) * (cde.CDbl(pValue) - this.mMinValue));
                    this.tRect.Width = this.mCanvas.MyWidth;
                    this.tText.Left = this.tRect.Left + 12;
                }
                else {
                    this.tRect.Left = 0;
                    this.tRect.Width = (this.mCanvas.MyWidth / (this.mMaxValue - this.mMinValue) * (cde.CDbl(pValue) - this.mMinValue));
                    this.tText.Left = this.tRect.Width + 12;
                }
                this.tRect.Height = this.mCanvas.MyHeight;
                this.tRect.Fill = this.mBarColor;
            }
            if (cde.CBool(this.GetProperty("AutoAdjust"))) {
                if (cde.CDbl(pValue) > this.mMaxValue)
                    this.mMaxValue = parseFloat(pValue);
                if (cde.CDbl(pValue) < this.mMinValue)
                    this.mMinValue = parseFloat(pValue);
            }
            this.tRect.Visibility = true;
            this.tRect.IsTemp = true;
            this.mRectangle = [];
            this.mRectangle.push(this.tRect);
            this.tText.ComplexData = {};
            this.tText.ComplexData.Text = cde.CDbl(pValue).toFixed(0);
            this.tText.ComplexData.Font = "8pt Roboto";
            if (this.GetProperty("LabelColor"))
                this.tText.Fill = this.GetProperty("LabelColor");
            else
                this.tText.Fill = "black";
            this.tText.IsTemp = true;
            this.mRectangle.push(this.tText);
            this.mCanvas.SetProperty("DataContext", this.mRectangle);
        };
        ctrlBarChart.prototype.CreateClip = function (pCanvas) {
            var ctx = pCanvas.getContext('2d');
            // Create a shape, of some sort
            ctx.beginPath();
            ctx.moveTo(10, 10);
            ctx.lineTo(100, 30);
            ctx.lineTo(180, 10);
            ctx.lineTo(200, 60);
            ctx.arcTo(222, 70, 120, 0, 10);
            ctx.lineTo(200, 180);
            ctx.lineTo(100, 150);
            ctx.lineTo(70, 180);
            ctx.lineTo(20, 130);
            ctx.lineTo(50, 70);
            ctx.closePath();
            // Clip to the current path
            ctx.clip();
        };
        ctrlBarChart.prototype.EnableDisable = function (IsDisabled) {
            var _this = this;
            if (IsDisabled) {
                this.UnregisterEvent("PointerDown");
                this.UnregisterEvent("PointerMove");
                this.UnregisterEvent("PointerUp");
                this.UnregisterEvent("PointerCancel");
                this.PreventManipulation = false;
                this.PreventDefault = false;
            }
            else {
                this.RegisterEvent("PointerDown", function (sender, evt, pt) { _this.sinkPointerDown(sender, evt, pt); });
                this.RegisterEvent("PointerMove", function (sender, evt, pt) { _this.sinkTranslate(sender, evt, pt); });
                this.RegisterEvent("PointerUp", function (sender, evt, pt) { _this.sinkPointerUp(sender, evt, pt); });
                this.RegisterEvent("PointerCancel", function (sender, evt, pt) { _this.sinkPointerCancel(sender, evt, pt); });
                this.PreventManipulation = true;
                this.PreventDefault = true;
            }
            this.PreventDefaultManipulationAndMouseEvent(null);
        };
        ctrlBarChart.prototype.sinkPointerCancel = function (pTarget, pEvent, pPointer) {
            if (this.GetProperty("Disabled") === true)
                return;
            var thisObj = pTarget;
            if (cde.CBool(thisObj.GetProperty("AllowSetOnCancel")) && (pPointer.pointerType !== cdeNMI.cdeInputEventType.MOUSE || cdeNMI.IsMouseDown)) {
                thisObj.sinkPointerUp(pTarget, pEvent, pPointer);
            }
            else
                thisObj.UpdateBar(thisObj.GetProperty("Value"));
        };
        ctrlBarChart.prototype.sinkPointerUp = function (pTarget, pEvent, pPointer) {
            if (pTarget.GetProperty("Disabled") === true)
                return;
            var thisObj = pTarget;
            thisObj.IsPointerDown = false;
            thisObj.PointerID = 0;
            if (pPointer.pointerEvent === cdeNMI.cdeInputEvent.END)
                thisObj.CalcNewPos(pPointer.AdjPosition.x, pPointer.AdjPosition.y, 1);
        };
        ctrlBarChart.prototype.sinkPointerDown = function (pTarget, pEvent, pPointer) {
            if (pTarget.GetProperty("Disabled") === true)
                return;
            var thisObj = pTarget;
            if (!thisObj.IsPointerDown && thisObj.GetProperty("Disabled") !== true) {
                thisObj.IsPointerDown = true;
                thisObj.PointerID = pPointer.Identifier;
                thisObj.CalcNewPos(pPointer.AdjPosition.x, pPointer.AdjPosition.y, 0);
            }
        };
        ctrlBarChart.prototype.sinkTranslate = function (pTarget, pEvent, pPointer) {
            if (pTarget.GetProperty("Disabled") === true)
                return;
            var thisObj = pTarget;
            var tPS = thisObj.GetProperty("TouchPoints");
            if (tPS > 1)
                thisObj.CalcNewPos(pPointer.AdjPosition.x, pPointer.AdjPosition.y, 2);
            else
                thisObj.CalcNewPos(pPointer.AdjPosition.x, pPointer.AdjPosition.y, 0);
        };
        ctrlBarChart.prototype.CalcNewPos = function (pX, pY, bSetVal) {
            if (!this.mCanvas)
                return;
            if (this.mCanvas.MyHeight === 0 || this.mCanvas.MyWidth === 0) {
                this.mCanvas.ResizeCanvas();
                if (this.mCanvas.MyHeight === 0 || this.mCanvas.MyWidth === 0)
                    return;
            }
            var tVal = this.GetProperty("Value");
            var tNewVal;
            if (this.GetProperty("IsVertical") === true) {
                if (this.GetProperty("IsInverted") !== true)
                    tNewVal = ((this.mCanvas.MyHeight - pY) * ((this.mMaxValue - this.mMinValue) / this.mCanvas.MyHeight)) + this.mMinValue;
                else
                    tNewVal = ((pY) * ((this.mMaxValue - this.mMinValue) / this.mCanvas.MyHeight)) + this.mMinValue;
            }
            else {
                if (this.GetProperty("IsInverted") !== true)
                    tNewVal = ((pX) * ((this.mMaxValue - this.mMinValue) / this.mCanvas.MyWidth)) + this.mMinValue;
                else
                    tNewVal = ((this.mCanvas.MyWidth - pX) * ((this.mMaxValue - this.mMinValue) / this.mCanvas.MyWidth)) + this.mMinValue;
            }
            if (!cde.CBool(this.GetProperty("UseFloat")))
                tNewVal = Math.round(tNewVal);
            if (tVal !== tNewVal && tNewVal !== -1) {
                if (bSetVal > 0) {
                    if (bSetVal === 1 || Math.abs(tNewVal - tVal) > 10) {
                        this.SetProperty("Value", tNewVal);
                        this.FireEvent(false, "ValueSet", { x: pX, y: pY });
                        if (this.MyFieldInfo && cde.CBool(this.GetProperty("SendColor")) === true) {
                            var ctx = this.mCanvas.GetBGRenderContext();
                            var colorData = ctx.getImageData(pX, pY, 1, 1).data;
                            var tColor = "rgb(" + colorData[0] + "," + colorData[1] + "," + colorData[2] + ")";
                            this.FireEvent(false, "BarColorChanged", this.rgbToHex(tColor));
                        }
                    }
                    if (bSetVal === 1) {
                        var MatTouch = new cdeNMI.TheMaterialTouch();
                        MatTouch.ShowWave(this.GetElement(), { x: pX, y: pY });
                    }
                }
                else {
                    this.FireEvent(true, "BarChanged", "CalcNewPos", tNewVal);
                    this.UpdateBar(tNewVal);
                }
            }
        };
        ctrlBarChart.prototype.hexToRgb = function (hex) {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return "rgb(" + parseInt(result[1], 16) + "," + parseInt(result[2], 16) + "," + parseInt(result[3], 16) + ")";
        };
        ctrlBarChart.prototype.rgbToHex = function (rgb) {
            var result = rgb.match(/\d+/g);
            function hex(x) {
                var digits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];
                return isNaN(x) ? "00" : digits[(x - x % 16) / 16] + digits[x % 16];
            }
            return "#" + hex(result[0]) + hex(result[1]) + hex(result[2]);
        };
        //Backwards Compat
        ctrlBarChart.Create = function (pTarget, pTRF) {
            var t = new ctrlBarChart(pTRF);
            t.InitControl(pTarget, pTRF);
            return t;
        };
        return ctrlBarChart;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlBarChart = ctrlBarChart;
    /**
     * Creates a vertical or horizontal slider looking like a rubber band
     * TODO: MultiTouch Scroll increases Value 5x Touchpoint - but Bar should not scroll differently!
     * (4.1 Ready!)
    **/
    var ctrlEndlessSlider = /** @class */ (function (_super) {
        __extends(ctrlEndlessSlider, _super);
        function ctrlEndlessSlider(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mCanvas = null;
            _this.LastMiniValue = 0;
            _this.mBaseCtrl = null;
            _this.mDebugLabel = null;
            _this.mDebugLabel2 = null;
            _this.mRangeSet = "";
            _this.mAllowRollover = false;
            _this.mAllowOffBelowMin = false;
            _this.mMinVal = 0;
            _this.mMaxVal = 1000;
            _this.mSnapper = 0;
            _this.mRoundTo = 1;
            _this.mStepFactor = 10;
            _this.mLines = 15;
            _this.mLineWidth = 10;
            _this.mLineGap = 40;
            _this.mIsVertical = false;
            _this.mIsInverted = false;
            _this.mReturnDeltaOnly = false;
            _this.mLineColor = "black";
            _this.Is10x = false;
            _this.TranslateSpeed = 1;
            _this.IsPointerDown = false;
            _this.LastMousePositionX = 0;
            _this.LastMousePositionY = 0;
            _this.ScrollValueTemp = 0;
            _this.mLastScrollValue = 0;
            _this.PointerID = 0;
            return _this;
        }
        ctrlEndlessSlider.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Slider;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mBaseCtrl = cdeNMI.MyTCF.CreateBaseControl().Create(pTargetControl, { TRF: this.MyTRF });
            this.mBaseCtrl.SetElement(document.createElement("div"));
            this.mBaseCtrl.SetInitialSize(1);
            this.mBaseCtrl.GetElement().className = "ctrlEndlessSlider";
            this.mBaseCtrl.GetElement().style.position = "relative";
            this.mCanvas = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CanvasDraw).Create(this.mBaseCtrl, { TRF: pTRF });
            this.SetProperty("iValue", 0);
            this.CreateLines();
            this.SetElement(this.mBaseCtrl.GetElement(), true);
            this.SetProperty("Disabled", !this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0);
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            return true;
        };
        ctrlEndlessSlider.prototype.SetProperty = function (pName, pValue) {
            if (pName === "Disabled") {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.EnableDisable(cde.CBool(pValue));
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            var UpdateLines = true;
            if (pName === "Foreground") {
                this.mLineColor = pValue;
            }
            else if (pName === "iValue") {
                this.mLastScrollValue = cde.CDbl(pValue) / this.mStepFactor;
                _super.prototype.SetProperty.call(this, "iValue", cde.CDbl(pValue));
                UpdateLines = false;
                this.CreateLines();
                this.RepositionLines();
            }
            else if (pName === "Value") {
                _super.prototype.SetProperty.call(this, "iValue", cde.CDbl(pValue));
                this.ScrollValueTemp = cde.CDbl(pValue) / this.mStepFactor;
                this.internalValueChanged(this.ScrollValueTemp, true);
                this.mLastScrollValue = this.ScrollValueTemp;
                UpdateLines = false;
                this.IsDirty = true;
            }
            else if (pName === "MaxValue") {
                this.mMaxVal = cde.CDbl(pValue);
                UpdateLines = false;
            }
            else if (pName === "MinValue") {
                this.mMinVal = cde.CDbl(pValue);
                UpdateLines = false;
            }
            else if (pName === "StepFactor") {
                this.mStepFactor = cde.CDbl(pValue);
                UpdateLines = false;
            }
            else if (pName === "AllowRollover") {
                this.mAllowRollover = cde.CBool(pValue);
                UpdateLines = false;
            }
            else if (pName === "IsVertical") {
                this.mIsVertical = cde.CBool(pValue);
            }
            else if (pName === "Background") {
                this.mCanvas.SetProperty("Background", pValue);
                this.mCanvas.RequestRedraw();
            }
            else if (pName === "MainBackground") {
                this.mBaseCtrl.GetElement().style.backgroundColor = pValue;
                this.mCanvas.RequestRedraw();
            }
            else if (pName === "LineWidth") {
                this.mLineWidth = cde.CInt(pValue);
            }
            else if (pName === "LineGap") {
                this.mLineGap = cde.CInt(pValue);
            }
            else if ((pName === "ControlTW" || pName === "ControlTH") && this.mCanvas) {
                this.mCanvas.SetProperty(pName, cde.CInt(pValue));
                UpdateLines = true;
            }
            if (UpdateLines) {
                this.ApplySkin();
            }
        };
        ctrlEndlessSlider.prototype.ApplySkin = function () {
            this.CreateLines();
            this.RepositionLines();
        };
        ctrlEndlessSlider.prototype.EnableDisable = function (IsDisabled) {
            if (IsDisabled) {
                this.UnregisterEvent("PointerDown");
                this.UnregisterEvent("PointerMove");
                this.UnregisterEvent("PointerUp");
                this.PreventManipulation = false;
                this.PreventDefault = false;
            }
            else {
                this.RegisterEvent("PointerDown", this.sinkPointerDown);
                this.RegisterEvent("PointerMove", this.sinkTranslate);
                this.RegisterEvent("PointerUp", this.sinkPointerUp);
                this.PreventManipulation = true;
                this.PreventDefault = true;
            }
            this.PreventDefaultManipulationAndMouseEvent(null);
        };
        ctrlEndlessSlider.prototype.sinkPointerUp = function (pTarget) {
            var thisObj = pTarget;
            thisObj.IsPointerDown = false;
            thisObj.PointerID = 0;
            thisObj.OnJumpBack();
        };
        ctrlEndlessSlider.prototype.sinkPointerDown = function (pTarget, pEvent, pPointer) {
            var thisObj = pTarget;
            if (!thisObj.IsPointerDown && thisObj.GetProperty("Disabled") !== true) {
                thisObj.LastMousePositionX = pPointer.AdjPosition.x;
                thisObj.LastMousePositionY = pPointer.AdjPosition.y;
                thisObj.IsPointerDown = true;
                thisObj.PointerID = pPointer.Identifier;
            }
        };
        ctrlEndlessSlider.prototype.sinkTranslate = function (pTarget, pEvent, pPointer) {
            var thisObj = pTarget;
            var tTrans = thisObj.TranslateSpeed;
            var tPS = thisObj.GetProperty("TouchPoints");
            if (thisObj.MyFieldInfo && (thisObj.MyFieldInfo.Flags & 2) === 0)
                return;
            if (tPS > 1)
                tTrans *= (5 * tPS);
            if (thisObj.IsPointerDown && pPointer.Identifier === thisObj.PointerID && thisObj.mCanvas) {
                if (thisObj.mIsVertical)
                    thisObj.internalValueChanged(thisObj.mLastScrollValue + ((((thisObj.LastMousePositionY - pPointer.AdjPosition.y) * (thisObj.Is10x ? tTrans * 10 : tTrans))) / thisObj.mCanvas.MyHeight), true);
                else
                    thisObj.internalValueChanged(thisObj.mLastScrollValue - ((((thisObj.LastMousePositionX - pPointer.AdjPosition.x) * (thisObj.Is10x ? tTrans * 10 : tTrans))) / thisObj.mCanvas.MyWidth), true);
                if (!thisObj.mReturnDeltaOnly)
                    thisObj.mLastScrollValue = thisObj.ScrollValueTemp;
                thisObj.LastMousePositionX = pPointer.AdjPosition.x;
                thisObj.LastMousePositionY = pPointer.AdjPosition.y;
            }
        };
        ctrlEndlessSlider.prototype.internalValueChanged = function (value, DoFireEvent) {
            var tRoundTo = this.mRoundTo;
            var tStepFactor = this.mStepFactor;
            var tVal = value * tStepFactor;
            var tSnap = this.mSnapper;
            if (this.mRangeSet) {
                for (var i = 0; i < this.mRangeThreshhold.length; i++) {
                    if (tVal > this.mRangeThreshhold[i]) {
                        this.TranslateSpeed = this.mRangeSpeed[i];
                        tRoundTo = this.mRangeRounder[i];
                        tSnap = this.mRangeSnapper[i];
                    }
                }
            }
            var tt;
            if (tSnap > 0 && this.LastMiniValue > 0) {
                tt = Math.floor(this.LastMiniValue * 1000);
                var tS = Math.floor(tSnap * 1000);
                if ((tt % tS) < 5 && Math.abs(value - this.ScrollValueTemp) < 0.003) {
                    this.RepositionLines();
                    return this.LastMiniValue;
                }
            }
            if (tRoundTo > 0) {
                tt = Math.floor(tVal / tRoundTo);
                tVal = tt * tRoundTo;
            }
            var tMini = tVal;
            if (this.mAllowRollover) {
                var diff = this.mMaxVal - this.mMinVal;
                tMini = tVal - this.mMinVal;
                tMini %= diff;
                if (tMini < 0)
                    tMini = this.mMaxVal + tMini;
                if (tMini > this.mMaxVal)
                    tMini -= this.mMaxVal;
                tMini += this.mMinVal;
            }
            else {
                if (tMini < this.mMinVal) {
                    if (this.mAllowOffBelowMin && (this.mLastScrollValue >= 0)) {
                        if (this.mLastScrollValue === 0 && value > 0)
                            tMini = this.mMinVal;
                        else
                            tMini = 0;
                    }
                    else
                        tMini = this.mMinVal;
                    value = tMini / tStepFactor;
                    this.mLastScrollValue = value;
                }
                if (tMini > this.mMaxVal) {
                    tMini = this.mMaxVal;
                    value = tMini / tStepFactor;
                    this.mLastScrollValue = value;
                }
            }
            this.LastMiniValue = tMini;
            if (isNaN(this.ScrollValueTemp))
                this.ScrollValueTemp = value;
            this.SetProperty("iValue", tMini);
            if (DoFireEvent) {
                this.FireEvent(false, "OniValueChanged", "iValChanged", tMini);
                this.FireEvent(true, "BarChanged", "iValChanged", tMini);
            }
            this.ScrollValueTemp = value;
            return tMini;
        };
        ctrlEndlessSlider.prototype.OnJumpBack = function () {
            this.SetProperty("iValue", this.LastMiniValue);
            this.IsDirty = true;
            this.FireEvent(true, "OnValueChanged", "OnJumpBack", this.LastMiniValue, this.MyTRF);
            if (!this.mReturnDeltaOnly)
                this.mLastScrollValue = this.ScrollValueTemp;
        };
        ctrlEndlessSlider.prototype.CreateLines = function () {
            if (!this.mCanvas)
                return;
            this.mCanvas.ApplySkin();
            if (this.mIsVertical)
                this.mLines = this.mCanvas.MyHeight / this.mLineGap;
            else
                this.mLines = this.mCanvas.MyWidth / this.mLineGap;
            this.mGripLines = [];
            for (var i = 0; i < this.mLines; i++) {
                var r = new cdeNMI.TheDrawingObject();
                r.Type = 1;
                r.StrokeThickness = 0;
                r.Fill = this.mLineColor;
                r.Width = this.mLineWidth;
                r.Height = this.mCanvas.MyHeight;
                r.Left = 0;
                r.Top = 0;
                r.IsTemp = true;
                if (this.mIsVertical) {
                    r.Width = this.mCanvas.MyWidth;
                    r.Height = this.mLineWidth;
                }
                this.mGripLines.push(r);
            }
        };
        ctrlEndlessSlider.prototype.RepositionLines = function () {
            if (!this.mCanvas || !this.mGripLines)
                return;
            for (var i = 0; i < this.mGripLines.length; i++) {
                var x = void 0;
                if (this.mIsVertical)
                    x = (this.ScrollValueTemp / (this.Is10x ? this.TranslateSpeed * 10 : this.TranslateSpeed) * this.mCanvas.MyHeight * 0.9) % this.mLineGap + i * this.mLineGap;
                else
                    x = (this.ScrollValueTemp / (this.Is10x ? this.TranslateSpeed * 10 : this.TranslateSpeed) * this.mCanvas.MyWidth * 0.9) % this.mLineGap + i * this.mLineGap;
                var tSize = this.mCanvas.MyWidth;
                if (this.mIsVertical)
                    tSize = this.mCanvas.MyHeight;
                if (x >= 0 && x < tSize) {
                    if (this.mIsVertical) {
                        if (!this.mIsInverted)
                            this.mGripLines[i].Top = this.mCanvas.MyHeight - x;
                        else
                            this.mGripLines[i].Top = x;
                    }
                    else
                        this.mGripLines[i].Left = x;
                    this.mGripLines[i].Visibility = true;
                }
                else
                    this.mGripLines[i].Visibility = false;
            }
            this.tText = new cdeNMI.TheDrawingObject(12, 12);
            this.tText.Type = 3;
            this.tText.Visibility = true;
            this.tText.ComplexData = {};
            this.tText.ComplexData.Text = cde.CDbl(this.LastMiniValue).toFixed(0);
            this.tText.ComplexData.Font = "8pt Roboto";
            if (this.GetProperty("LabelColor"))
                this.tText.Fill = this.GetProperty("LabelColor");
            else
                this.tText.Fill = "black";
            this.tText.IsTemp = true;
            this.mGripLines.push(this.tText);
            this.mCanvas.SetProperty("DataContext", this.mGripLines);
        };
        return ctrlEndlessSlider;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlEndlessSlider = ctrlEndlessSlider;
    /**
* Creates a Canvas Based Shape
     *
     * This control is NOT and input control for Form or Table
* (4.1 Ready!)
*/
    var ctrlShape = /** @class */ (function (_super) {
        __extends(ctrlShape, _super);
        function ctrlShape(pTRF) {
            return _super.call(this, null, pTRF) || this;
        }
        ctrlShape.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Shape;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mBaseCtrl = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup); // new cdeNMI.ctrlTileGroup(pTRF);
            this.mBaseCtrl.InitControl(pTargetControl, this.MyTRF);
            this.mBaseCtrl.SetInitialSize(1);
            this.mBaseCtrl.SetProperty("ClassName", "ctrlShape");
            this.mBaseCtrl.SetProperty("Style", "position:relative;background-color:transparent");
            this.mCanvas = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CanvasDraw);
            this.mCanvas.SetProperty("NoBackBuffer", true);
            this.mCanvas.InitControl(this.mBaseCtrl);
            if (!this.MyFieldInfo || (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) !== 0)) {
                this.mCanvas.SetProperty("OnPointerDown", function (evt, pT, pP) { _this.SendPointer(evt, pT, pP); });
                if (cde.CBool(this.GetProperty("EnableMouseMove")))
                    this.mCanvas.SetProperty("OnPointerMove", function (evt, pT, pP) { _this.SendPointer(evt, pT, pP); });
                this.mCanvas.SetProperty("OnPointerUp", function (evt, pT, pP) { _this.SendPointer(evt, pT, pP); });
                this.mCanvas.SetProperty("OnPointerCancel", function (evt, pT, pP) { _this.SendPointer(evt, pT, pP); });
                this.mCanvas.SetProperty("OnKeyUp", function (evt) { _this.SendKey(evt); });
                this.mCanvas.SetProperty("OnKeyDown", function (evt) { _this.SendKey(evt); });
            }
            this.SetElement(this.mBaseCtrl.GetElement());
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            return true;
        };
        ctrlShape.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if (pName === "Background") {
                this.mCanvas.SetProperty(pName, pValue);
            }
            else if (pName === "AddShape" || pName === "DrawShapes" || pName === "DrawShape" || pName === "AllowMoveWithoutDown" || pName === "Playback" || pName === "NoClear") {
                this.mCanvas.SetProperty(pName, pValue);
            }
            else if (pName === "SetShape" || pName === "Value" || pName === "iValue") {
                this.mCanvas.SetProperty("SetShape", pValue);
            }
            else if (pName === "EnableMouseMove") {
                if (cde.CBool(pValue))
                    this.mCanvas.SetProperty("OnPointerMove", function (evt, pT, pP) { _this.SendPointer(evt, pT, pP); });
                else
                    this.mCanvas.SetProperty("OnPointerMove", null);
            }
            else if (pName === "YRatio" && this.mBaseCtrl) {
                var tEle = this.mBaseCtrl.GetElement();
                if (tEle.style.width !== "inherit") {
                    var tRat = cde.CDbl(tEle.style.width.substr(0, tEle.style.width.length - 2)) / cde.CDbl(pValue);
                    tEle.style.height = tRat + "px";
                    tEle.style.maxHeight = tRat + "px";
                }
                this.mCanvas.SetProperty(pName, pValue);
            }
            else if ((pName === "ControlTW" || pName === "ControlTH" || pName === "DataContext" || pName === "CanvasWidth" || pName === "CanvasHeight" || pName === "TileFactorX" || pName === "TileFactorY") && this.mCanvas) {
                this.mCanvas.SetProperty(pName, pValue);
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlShape.prototype.ApplySkin = function () {
            this.mCanvas.ApplySkin();
            if (this.GetProperty("Value"))
                this.SetProperty("iValue", this.GetProperty("Value"));
        };
        ctrlShape.prototype.SendKey = function (pEvent) {
            if (cde.CBool(this.GetProperty("SendPointer"))) {
                var tEng = cdeNMI.eTheNMIEngine;
                if (this.GetProperty("EngineName"))
                    tEng = this.GetProperty("EngineName");
                var tKey = new cdeNMI.TheKey(pEvent);
                if (cde.MyBaseAssets.MyEngines[tEng]) {
                    if (this.MyFieldInfo)
                        cde.MyBaseAssets.MyEngines[tEng].PublishToNode(this.MyFieldInfo.cdeN, "UPDATE_KEY:" + this.GetProperty("MyThing"), JSON.stringify(tKey));
                    else
                        cde.MyBaseAssets.MyEngines[tEng].PublishToService("UPDATE_KEY:" + this.GetProperty("MyThing"), JSON.stringify(tKey));
                }
            }
        };
        ctrlShape.prototype.SendPointer = function (pTarget, pEvent, pPointer) {
            if (cde.CBool(this.GetProperty("SendPointer"))) {
                this.mCanvas.GetElement().setAttribute('tabindex', '0');
                this.mCanvas.GetElement().focus();
                var tEng = cdeNMI.eTheNMIEngine;
                if (this.GetProperty("EngineName"))
                    tEng = this.GetProperty("EngineName");
                pPointer.AdjPosition.x *= this.mCanvas.WidthRatio;
                pPointer.AdjPosition.y *= this.mCanvas.HeightRatio;
                if (cde.MyBaseAssets.MyEngines[tEng]) {
                    if (this.MyFieldInfo)
                        cde.MyBaseAssets.MyEngines[tEng].PublishToNode(this.MyFieldInfo.cdeN, "UPDATE_POINTER:" + this.GetProperty("MyThing"), JSON.stringify(pPointer));
                    else
                        cde.MyBaseAssets.MyEngines[tEng].PublishToService("UPDATE_POINTER:" + this.GetProperty("MyThing"), JSON.stringify(pPointer));
                }
            }
        };
        return ctrlShape;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlShape = ctrlShape;
    /*************************************************

* Creates a Circular Gauge with a start and end angle. By default white on 50% opacity as a full circle starting with zero at the StartAngle
*
* (4.3 Ready!)
*/
    var ctrlCircularGauge2 = /** @class */ (function (_super) {
        __extends(ctrlCircularGauge2, _super);
        function ctrlCircularGauge2() {
            var _this = _super.call(this, null, null) || this;
            _this.containerTileGroup = null;
            _this.canvas = null;
            _this.context = null;
            _this.tempValue = 0;
            return _this;
        }
        ctrlCircularGauge2.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.containerTileGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetControl);
            //this.containerTileGroup.InitControl(pTargetControl);
            var tMax = cde.CInt(this.GetProperty("MaxValue"));
            if (tMax === cde.CInt(this.GetProperty("MinValue")))
                tMax = 100;
            this.SetProperty("MaxValue", tMax);
            if (this.GetProperty("MainBackground"))
                this.containerTileGroup.SetProperty("Background", this.GetProperty("MainBackground"));
            this.canvas = document.createElement("canvas");
            this.containerTileGroup.GetElement().appendChild(this.canvas);
            var tW = cde.CInt(this.GetSetting("ControlTW"));
            var tH = cde.CInt(this.GetSetting("ControlTH"));
            this.canvas.width = 0;
            this.canvas.height = 0;
            this.context = this.canvas.getContext("2d");
            if (tW > 0) {
                this.containerTileGroup.SetProperty("TileWidth", tW);
                this.canvas.width = cdeNMI.GetSizeFromTile(this.containerTileGroup.GetProperty("TileWidth"));
            }
            if (tH > 0) {
                this.containerTileGroup.SetProperty("TileHeight", tH);
                this.canvas.height = cdeNMI.GetSizeFromTile(this.containerTileGroup.GetProperty("TileHeight"));
            }
            cde.MyBaseAssets.RegisterEvent("ThemeSwitched", function () {
                _this.DoRedraw();
            });
            this.DoRedraw();
            this.AnimateFrame(true);
            _super.prototype.SetElement.call(this, this.containerTileGroup.GetElement());
            return true;
        };
        ctrlCircularGauge2.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            var bIsDirty = false;
            if (pName === "MainBackground") {
                if (!this.containerTileGroup)
                    return;
                this.containerTileGroup.SetProperty("Background", pValue);
            }
            else if (pName === "Background") {
                bIsDirty = true;
            }
            else if (pName === "ControlTW" && this.context) {
                this.containerTileGroup.SetProperty("TileWidth", pValue);
                this.canvas.width = cdeNMI.GetSizeFromTile(this.containerTileGroup.GetProperty("TileWidth"));
                bIsDirty = true;
            }
            else if (pName === "ControlTH" && this.context) {
                this.containerTileGroup.SetProperty("TileHeight", pValue);
                this.canvas.height = cdeNMI.GetSizeFromTile(this.containerTileGroup.GetProperty("TileHeight"));
                bIsDirty = true;
            }
            else if (pName === "StartAngle" || pName === "EndAngle") {
                bIsDirty = true;
            }
            else if (pName === "PlotBand") {
                this.myPlotBand = JSON.parse(pValue);
                bIsDirty = true;
            }
            if (pName === "iValue" || pName === "Value") {
                this.savedInt = pValue;
                bIsDirty = true;
            }
            if (pName === "MaxValue" || pName === "MinValue" || pName === "Foreground") {
                bIsDirty = true;
            }
            if (bIsDirty && this.context)
                this.AnimateFrame(true);
        };
        ctrlCircularGauge2.prototype.DoRedraw = function () {
            if (!this.context || this.canvas.width === 0 || this.canvas.height === 0)
                return;
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height); // to clear canvas
            // circle
            var thick = (this.canvas.width / 7);
            var radius = (this.canvas.width / 2) - thick;
            if (this.canvas.height < this.canvas.width) {
                thick = (this.canvas.height / 7);
                radius = (this.canvas.height / 2) - thick;
            }
            this.context.beginPath();
            this.context.textAlign = 'center';
            this.context.strokeStyle = this.GetProperty("Foreground");
            var upperLimit = cde.CInt(this.GetProperty("UpperLimit"));
            var lowerLimit = cde.CInt(this.GetProperty("LowerLimit"));
            var maxValue = cde.CInt(this.GetProperty("MaxValue"));
            var minValue = cde.CInt(this.GetProperty("MinValue"));
            //arc
            var x = this.canvas.width / 2;
            var y = this.canvas.height / 2;
            var counterClockwise = cde.CBool(this.GetProperty("IsInverted"));
            var tSetStartAngle = cde.CInt(this.GetProperty("StartAngle")) - 90;
            if (tSetStartAngle < 0)
                tSetStartAngle += 360;
            var fullEndAngle = 360;
            if (this.GetProperty("EndAngle"))
                fullEndAngle = cde.CInt(this.GetProperty("EndAngle"));
            var tSetEndAngle;
            if (counterClockwise) {
                tSetEndAngle = fullEndAngle - tSetStartAngle;
                if (tSetEndAngle < 0)
                    tSetEndAngle += 360;
            }
            else {
                tSetEndAngle = fullEndAngle + tSetStartAngle;
                if (tSetEndAngle > 360)
                    tSetEndAngle -= 360;
            }
            var newAngVal = cdeNMI.cdeMinMax(this.tempValue, minValue, maxValue, fullEndAngle, 0);
            var startAngle = (Math.PI / 180) * tSetStartAngle;
            //Back Circle
            this.context.beginPath();
            this.context.arc(x, y, radius, startAngle, tSetEndAngle * (Math.PI / 180), counterClockwise);
            this.context.lineWidth = thick;
            if (this.GetProperty("Background"))
                this.context.strokeStyle = ctrlCanvasDraw.ProcessColor(this, this.context, this.GetProperty("Background"));
            else {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                    this.context.strokeStyle = "rgba(80, 80, 80, 0.1)";
                else
                    this.context.strokeStyle = "rgba(80, 80, 80, 0.5)";
            }
            this.context.stroke();
            //Value Circle
            var endAngle = 0;
            if (counterClockwise)
                endAngle = (Math.PI / 180) * (newAngVal + tSetStartAngle); //this is the point where the arc stops
            else
                endAngle = (Math.PI / 180) * ((fullEndAngle - newAngVal) + tSetStartAngle); //this is the point where the arc stops
            var whitePart;
            if (this.GetProperty("Foreground"))
                whitePart = ctrlCanvasDraw.ProcessColor(this, this.context, this.GetProperty("Foreground"));
            else {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                    whitePart = 'rgba(82,208,235,0.9)';
                else
                    whitePart = 'rgba(29,163,209,0.9)';
            }
            this.context.beginPath();
            this.context.arc(x, y, radius, startAngle, endAngle, counterClockwise);
            this.context.lineWidth = thick;
            this.context.strokeStyle = whitePart;
            this.context.stroke();
            var context = this.context;
            var gradient = context.createLinearGradient(x, y, this.canvas.width, this.canvas.height / 2);
            gradient.addColorStop(0.2, 'rgba(255,50,50,0.302)');
            gradient.addColorStop(.6, 'rgba(255,0,0,.549)');
            gradient.addColorStop(.6, 'rgba(255,0,0,1.0)');
            //Limit Shaders
            if (upperLimit > minValue) {
                var valMaxLim = cdeNMI.cdeMinMax(upperLimit, maxValue, minValue, fullEndAngle, 0);
                //if (this.tempValue > upperLimit)
                {
                    context.beginPath();
                    context.lineWidth = thick;
                    context.strokeStyle = gradient;
                    context.arc(x, y, radius, (valMaxLim + tSetStartAngle) * (Math.PI / 180), tSetEndAngle * (Math.PI / 180), counterClockwise);
                    context.stroke();
                }
            }
            if (lowerLimit > minValue) {
                var valLowLim = cdeNMI.cdeMinMax(lowerLimit, maxValue, minValue, fullEndAngle, 0);
                //if (this.tempValue < lowerLimit)
                {
                    context.beginPath();
                    context.lineWidth = thick;
                    context.strokeStyle = gradient;
                    if (!counterClockwise)
                        endAngle = (Math.PI / 180) * (valLowLim + tSetStartAngle); //this is the point where the arc stops
                    else
                        endAngle = (Math.PI / 180) * ((fullEndAngle - valLowLim) + tSetStartAngle); //this is the point where the arc stops
                    context.arc(x, y, radius, startAngle, endAngle, counterClockwise);
                    context.stroke();
                }
            }
            if (this.myPlotBand) {
                for (var idx in this.myPlotBand) {
                    var tFrom = cdeNMI.cdeMinMax(this.myPlotBand[idx].from, maxValue, minValue, fullEndAngle, 0);
                    var tTo = cdeNMI.cdeMinMax(this.myPlotBand[idx].to, maxValue, minValue, fullEndAngle, 0);
                    context.beginPath();
                    context.lineWidth = thick * .4;
                    context.strokeStyle = this.myPlotBand[idx].color;
                    if (!counterClockwise)
                        endAngle = (Math.PI / 180) * (tTo + tSetStartAngle); //this is the point where the arc stops
                    else
                        endAngle = (Math.PI / 180) * ((fullEndAngle - tTo) + tSetStartAngle); //this is the point where the arc stops
                    context.arc(x, y, radius * .88, (Math.PI / 180) * (tFrom + tSetStartAngle), endAngle, counterClockwise);
                    context.stroke();
                }
            }
            //text
            //RobotoLight
            this.context.font = thick + 'pt Roboto';
            if (this.GetProperty("Foreground"))
                this.context.fillStyle = this.GetProperty("Foreground");
            else
                this.context.fillStyle = whitePart;
            var tLabel;
            if (cde.CBool(this.GetProperty("DontAnimate")) === false) {
                if (this.GetProperty("Format"))
                    tLabel = this.tempValue.toFixed(cde.CInt(this.GetProperty("Format")));
                else
                    tLabel = Math.floor(this.tempValue).toString();
            }
            else {
                if (this.GetProperty("Format"))
                    tLabel = cde.CDbl(this.GetProperty("Value")).toFixed(cde.CInt(this.GetProperty("Format")));
                else
                    tLabel = Math.floor(cde.CDbl(this.GetProperty("Value"))).toString();
            }
            //centering canvas text
            this.context.fillText(tLabel, x, y + (thick / 2));
            //SubTitle Text
            if (this.GetProperty("SubTitle")) {
                context.font = '16pt Roboto';
                context.fillStyle = whitePart;
                context.fillText(this.GetProperty("SubTitle"), x, y + (thick * 2));
            }
        };
        ctrlCircularGauge2.prototype.AnimateFrame = function (pForce) {
            var _this = this;
            this.myframe = requestAnimationFrame(function () { _this.AnimateFrame(false); });
            if (cde.CBool(this.GetProperty("DontAnimate")) === true) {
                cancelAnimationFrame(this.myframe);
                this.tempValue = cde.CDbl(this.GetProperty("Value"));
                this.DoRedraw();
                return;
            }
            var tDbl;
            if (cde.CDbl(this.GetProperty("Value")) < this.tempValue) {
                tDbl = (this.tempValue - cde.CDbl(this.GetProperty("Value"))) / 20;
                this.tempValue -= tDbl;
                if (!pForce && (cde.CDbl(this.GetProperty("Value")) > this.tempValue || Math.abs(tDbl) < 0.001)) {
                    cancelAnimationFrame(this.myframe);
                    this.tempValue = cde.CDbl(this.GetProperty("Value"));
                }
            }
            else {
                tDbl = (cde.CDbl(this.GetProperty("Value")) - this.tempValue) / 20;
                this.tempValue += tDbl;
                if (!pForce && (cde.CDbl(this.GetProperty("Value")) < this.tempValue || Math.abs(tDbl) < 0.001)) {
                    cancelAnimationFrame(this.myframe);
                    this.tempValue = cde.CDbl(this.GetProperty("Value"));
                }
            }
            this.DoRedraw();
        };
        return ctrlCircularGauge2;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlCircularGauge2 = ctrlCircularGauge2;
    /**
* Creates a
*
* (4.3 Ready)
*/
    var ctrlSmartGauge2 = /** @class */ (function (_super) {
        __extends(ctrlSmartGauge2, _super);
        function ctrlSmartGauge2() {
            var _this = _super.call(this, null, null) || this;
            _this.GaugeShell = null;
            _this.tempValue = 0;
            _this.whiteRGBA = 'rgba(255,255,255,0.5)';
            _this.blackRGBA = 'rgba(0,0,0,0.5)';
            _this.darkslategrayRGBA = 'rgba(47,79,79,.5)';
            _this.mBackground = 'rgba(80,80,80,0.5)';
            _this.mycanvas = null;
            _this.mycontext = null;
            _this.startAngle = 0;
            _this.endAngle = 0;
            _this.counterClockwise = false;
            _this.mWidth = 0;
            _this.mHeight = 0;
            return _this;
        }
        ctrlSmartGauge2.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.GaugeShell = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetControl);
            this.GaugeShell.GetElement().style.width = "inherit";
            this.GaugeShell.GetElement().style.height = "inherit";
            this.mycanvas = document.createElement("Canvas");
            this.GaugeShell.GetElement().appendChild(this.mycanvas);
            this.mycontext = this.mycanvas.getContext('2d');
            if (cde.CInt(this.GetProperty("MaxValue")) === 0)
                this.SetProperty("MaxValue", 100);
            this.startAngle = (1 * Math.PI);
            this.endAngle = 0 * Math.PI;
            this.counterClockwise = false;
            this.SetElement(this.GaugeShell.GetElement());
            this.AnimateFrame(true);
            if (cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFieldInfo.FormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            cde.MyBaseAssets.RegisterEvent("ThemeSwitched", function () {
                _this.DoRender();
            });
            return true;
        };
        ctrlSmartGauge2.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            var bIsDirty = false;
            if (pName === "Value" || pName === "iValue" || pName === "Foreground" || pName === "Title" || pName === "SubTitle") {
                bIsDirty = true;
            }
            else if (pName === "MainBackground" && this.GaugeShell) {
                this.GaugeShell.SetProperty("Background", pValue);
            }
            else if (pName === "Background" && this.GaugeShell) {
                this.mBackground = pValue;
                this.IsDirty = true;
            }
            else if (pName === "Title") {
                bIsDirty = true;
            }
            else if (pName === "SubTitle" || pName === "LowerLimit" || pName === "UpperLimit") {
                bIsDirty = true;
            }
            if (bIsDirty)
                this.AnimateFrame(true);
        };
        ctrlSmartGauge2.prototype.ApplySkin = function () {
            if (!this.GaugeShell.GetElement())
                return;
            this.mWidth = this.GaugeShell.GetElement().clientWidth;
            this.mycanvas.width = this.mWidth;
            this.mHeight = this.GaugeShell.GetElement().clientHeight;
            this.mycanvas.height = this.mHeight;
            if (this.mHeight > 0 && this.mWidth > 0)
                this.AnimateFrame(true);
        };
        ctrlSmartGauge2.prototype.DoRender = function () {
            if (!this.mycanvas || this.mWidth === 0 || this.mHeight === 0)
                return;
            //var tHei: number = cde.CInt(this.GetProperty("ControlTH"));
            //if (tHei == 0) tHei = 1;
            var context = this.mycontext;
            var canvas = this.mycanvas;
            var x = this.mycanvas.width / 2;
            var y = this.mycanvas.height - 16;
            var radius = x - (y * .20);
            context.clearRect(0, 0, canvas.width, canvas.height);
            if (!this.GetProperty("Background")) {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                    this.mBackground = "rgba(80, 80, 80, 0.1)";
                else
                    this.mBackground = "rgba(80, 80, 80, 0.5)";
            }
            context.beginPath();
            context.arc(x, y, radius, this.startAngle, this.endAngle, this.counterClockwise);
            context.lineWidth = y * 0.01;
            context.strokeStyle = this.mBackground;
            context.fillStyle = this.mBackground;
            context.stroke();
            //context.fill();
            var myBlue = this.GetProperty("Foreground");
            if (!myBlue) {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                    myBlue = 'rgba(82,208,235,0.9)';
                else
                    myBlue = 'rgba(29,163,209,0.9)';
            }
            var upperLimit = cde.CInt(this.GetProperty("UpperLimit"));
            var lowerLimit = cde.CInt(this.GetProperty("LowerLimit"));
            var myValue = cde.CDbl(this.tempValue);
            if (!cde.CBool(this.GetProperty("UseFloat")))
                myValue = Math.floor(myValue);
            var maxValue = cde.CInt(this.GetProperty("MaxValue"));
            var minValue = cde.CInt(this.GetProperty("MinValue"));
            if (myValue > maxValue)
                myValue = maxValue;
            context.clearRect(0, canvas.height - 12, canvas.width, 12);
            var valAngle = cdeNMI.cdeMinMax(myValue, maxValue, minValue, 180, 0);
            if (valAngle < 0)
                valAngle = 0;
            //value visual
            context.beginPath();
            context.arc(x, y, radius, this.startAngle, this.startAngle + (valAngle * (Math.PI / 180)), this.counterClockwise);
            context.lineWidth = y * .15;
            context.strokeStyle = myBlue;
            context.stroke();
            //value text
            //small RED  value visual to the right
            var gradient = context.createLinearGradient(x, y, canvas.width, canvas.height / 2);
            gradient.addColorStop(0.2, 'rgba(255,50,50,0.302)');
            gradient.addColorStop(.6, 'rgba(255,0,0,.549)');
            gradient.addColorStop(.6, 'rgba(255,0,0,1.0)');
            var whitePart;
            if (this.GetProperty("LabelForeground"))
                whitePart = ctrlCanvasDraw.ProcessColor(this, context, this.GetProperty("LabelForeground"));
            else {
                if (!cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme)
                    whitePart = 'rgba(82,208,235,0.9)';
                else
                    whitePart = 'rgba(29,163,209,0.9)';
            }
            //Title Text
            if (this.GetProperty("Title") && cde.CBool(this.GetProperty("NoTE"))) {
                context.font = '16pt Roboto';
                context.fillStyle = whitePart;
                context.fillText(this.GetProperty("Title"), x - context.measureText(this.GetProperty("Title")).width / 2, 18);
            }
            //SubTitle Text
            if (this.GetProperty("SubTitle")) {
                context.font = '16pt Roboto';
                context.fillStyle = whitePart;
                context.fillText(this.GetProperty("SubTitle"), x - context.measureText(this.GetProperty("SubTitle")).width / 2, y + 10);
            }
            if (upperLimit > minValue) {
                var valMaxLim = cdeNMI.cdeMinMax(upperLimit, maxValue, minValue, 180, 0);
                if (myValue > upperLimit) {
                    context.beginPath();
                    context.lineWidth = 10;
                    context.strokeStyle = gradient;
                    context.arc(x, y, radius * .90, this.startAngle + (valMaxLim * (Math.PI / 180)), this.startAngle + (valAngle * (Math.PI / 180)), this.counterClockwise);
                    context.stroke();
                }
                //upper limit TEXT
                context.font = '10pt Roboto';
                context.fillStyle = 'rgb(255,192,0)';
                context.fillText(upperLimit.toString(), x * 1.20, y * 0.95);
                //upper limit 
                context.beginPath();
                context.arc(x, y, radius - 3, this.startAngle + ((valMaxLim - 1) * (Math.PI / 180)), this.startAngle + ((valMaxLim + 1) * (Math.PI / 180)), this.counterClockwise);
                context.lineWidth = y * .2;
                context.strokeStyle = 'rgba(255,192,0,.8)';
                context.stroke();
            }
            if (lowerLimit > minValue) {
                var valLowLim = cdeNMI.cdeMinMax(lowerLimit, maxValue, minValue, 180, 0);
                if (myValue < lowerLimit) {
                    context.beginPath();
                    context.lineWidth = 10;
                    context.strokeStyle = gradient;
                    context.arc(x, y, radius * .90, this.startAngle + (valAngle * (Math.PI / 180)), this.startAngle + (valLowLim * (Math.PI / 180)), this.counterClockwise);
                    context.stroke();
                }
                //lower limit text
                context.font = '10pt Roboto';
                context.fillStyle = 'rgb(255,192,0)';
                context.fillText(lowerLimit.toString(), x * .70, y * .95);
                //lower limit
                context.beginPath();
                context.arc(x, y, radius - 3, this.startAngle + ((valLowLim - 1) * (Math.PI / 180)), this.startAngle + ((valLowLim + 1) * (Math.PI / 180)), this.counterClockwise);
                context.lineWidth = y * .2;
                context.strokeStyle = 'rgba(255,192,0,.8)';
                context.stroke();
            }
            /////////////////////white line/////////this must change with background color
            context.strokeStyle = this.mBackground;
            context.lineWidth = 1;
            context.beginPath();
            context.arc(x, y, radius, this.startAngle, this.startAngle + (valAngle * (Math.PI / 180)), this.counterClockwise);
            context.stroke();
            var fontHeight = cde.CDbl(this.GetProperty("LabelFontSize"));
            if (fontHeight === 0)
                fontHeight = this.mycanvas.height * 0.25;
            context.font = fontHeight + 'pt Roboto';
            var myLabCol = this.GetProperty("LabelColor");
            if (!myLabCol)
                myLabCol = whitePart;
            if (myValue < lowerLimit && lowerLimit > minValue) {
                context.fillStyle = 'red';
            }
            else if (myValue > upperLimit && upperLimit > minValue) {
                context.fillStyle = 'red';
            }
            else
                context.fillStyle = myLabCol;
            //centering canvas text
            if (cde.CBool(this.GetProperty("AnimateValue")))
                context.fillText(myValue.toString(), x - context.measureText(myValue.toString()).width / 2, y * 0.85);
            else
                context.fillText(cde.CDbl(this.GetProperty("Value")).toString(), x - context.measureText(cde.CDbl(this.GetProperty("Value")).toString()).width / 2, y * 0.85);
            //min-value(0) text
            context.fillStyle = myLabCol;
            context.font = '10pt Roboto';
            context.fillText(minValue.toString(), x - radius, y + 11);
            //max-value(0) text
            context.font = '10pt Roboto';
            context.fillText(maxValue.toString(), (x + radius) - (radius * .15), y + 11);
        };
        ctrlSmartGauge2.prototype.AnimateFrame = function (bForceDraw) {
            var _this = this;
            this.myframe = requestAnimationFrame(function () { _this.AnimateFrame(false); });
            var tDbl;
            if (cde.CDbl(this.GetProperty("Value")) < this.tempValue) {
                tDbl = (this.tempValue - cde.CDbl(this.GetProperty("Value"))) / 20;
                this.tempValue -= tDbl;
                if (!bForceDraw && (cde.CDbl(this.GetProperty("Value")) > this.tempValue || Math.abs(tDbl) < 0.001)) {
                    cancelAnimationFrame(this.myframe);
                    this.tempValue = cde.CDbl(this.GetProperty("Value"));
                    //return;
                }
            }
            else {
                tDbl = (cde.CDbl(this.GetProperty("Value")) - this.tempValue) / 20;
                this.tempValue += tDbl;
                if (!bForceDraw && (cde.CDbl(this.GetProperty("Value")) < this.tempValue || Math.abs(tDbl) < 0.001)) {
                    cancelAnimationFrame(this.myframe);
                    this.tempValue = cde.CDbl(this.GetProperty("Value"));
                    //return;
                }
            }
            this.DoRender();
        };
        return ctrlSmartGauge2;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlSmartGauge2 = ctrlSmartGauge2;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
* Creates an edit field for many different cdeControlTypes:
* 1: SingleLine
* 5: TextArea
* 10: Password (shows as ****)
* 12: Number
* 16: eMail
* 17: ComboOption
* 31: URL
* 32: currency
* (4.1 Ready!)
*/
    var ctrlEditBox = /** @class */ (function (_super) {
        __extends(ctrlEditBox, _super);
        function ctrlEditBox(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyEditBox = null;
            _this.MyConfirmBox = null;
            _this.MyCombo = null;
            _this.EnterButton = null;
            _this.DropButton = null;
            _this.MyMotLockButton = null;
            _this.MyMotLockButton2 = null;
            _this.MyTextArea = null;
            _this.mFrameDiv = null;
            _this.mMotLoc = null;
            _this.mMotLoc2 = null;
            _this.mUpdButton = null;
            _this.mBackDiv = null;
            _this.JustIn = false;
            _this.JustInC = false;
            _this.RequiresUpdateButton = false;
            return _this;
        }
        ctrlEditBox.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.SingleEnded;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.RequiresUpdateButton = cde.CBool(this.GetProperty("RequireUpdateButton"));
            this.mFrameDiv = document.createElement("div");
            //this.mFrameDiv.style.margin = "auto";
            this.mFrameDiv.style.width = "inherit";
            this.mFrameDiv.style.height = "inherit";
            this.mFrameDiv.className = "ctrlInput";
            this.SetElement(this.mFrameDiv);
            if (this.MyFieldInfo && this.MyFieldInfo.Type === cdeNMI.cdeControlType.TextArea) //Text Area
             {
                this.MyTextArea = document.createElement("textarea");
                this.MyTextArea.className = "ctrlTextArea";
                this.MyTextArea.style.cssFloat = "left";
                this.mFrameDiv.appendChild(this.MyTextArea);
                this.MyTextArea.onblur = function () { return _this.EditElement("13", _this.MyTextArea); };
            }
            else {
                if (this.MyFieldInfo && (this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption) && cde.CInt(this.GetProperty("MultiLines")) > 1) {
                    this.MyTextArea = document.createElement("textarea");
                    this.MyTextArea.className = "ctrlTextArea";
                    this.MyTextArea.style.cssFloat = "left";
                    this.mFrameDiv.appendChild(this.MyTextArea);
                    var tR = cde.CInt(this.GetProperty("MultiLines"));
                    if (tR < 2)
                        tR = 2;
                    if (cde.CInt(this.GetSetting("TileFactorY")) > 1 && !this.MyTextArea.classList.contains("cdeSmall"))
                        this.MyTextArea.classList.add("cdeSmall");
                    this.MyTextArea.rows = tR;
                }
                else {
                    this.MyEditBox = document.createElement("input");
                    this.MyEditBox.style.cssFloat = "left";
                    if (!cde.CBool(this.GetProperty("EnableAutoFill")) && !cde.CBool(this.GetProperty("InTemplate"))) {
                        this.MyEditBox.name = "EB" + cde.GuidToString(this.MyFieldInfo.cdeMID) + "_" + Math.floor((Math.random() * 1000) + 1);
                        this.MyEditBox.autocomplete = "new-password";
                    }
                    this.mFrameDiv.appendChild(this.MyEditBox);
                    if (this.MyFieldInfo && this.MyFieldInfo.Type === 12)
                        this.MyEditBox.className = "cdeInputNumber";
                    else
                        this.MyEditBox.className = "cdeInput";
                    if (cde.CInt(this.GetSetting("TileFactorY")) > 1 && !this.MyEditBox.classList.contains("cdeSmall"))
                        this.MyEditBox.classList.add("cdeSmall");
                }
                var tAddEnter = false;
                if (this.MyFieldInfo) {
                    switch (this.MyFieldInfo.Type) {
                        case cdeNMI.cdeControlType.Password:
                            tAddEnter = false;
                            this.MyBaseType = cdeNMI.cdeControlType.Password;
                            this.MyEditBox.type = "password";
                            this.MyEditBox.addEventListener("focusin", function () {
                                _this.JustIn = true;
                            });
                            if (!cde.CBool(this.GetProperty("HideMTL"))) {
                                this.mMotLoc = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.MuTLock).Create(this, { ScreenID: pScreenID, TRF: this.MyTRF });
                                this.mMotLoc.SetProperty("PassField", this);
                                this.mMotLoc.SetProperty("Visibility", cde.CBool(this.GetProperty("AutoShowMTL")));
                                this.mMotLoc.SetProperty("Style", "position:fixed;margin-top:" + cdeNMI.GetSizeFromTile(1) + "px");
                                this.MyMotLockButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-2x'>&#xf00A;</span>", "ClassName=cdeMTL"] });
                                this.MyMotLockButton.SetProperty("Cookie", this);
                                this.MyMotLockButton.SetProperty("OnClick", function (pSender, evt) {
                                    var tEd = pSender.GetProperty("Cookie");
                                    cdeNMI.StopPointerEvents(evt);
                                    if (tEd.mMotLoc.Visibility) {
                                        tEd.mMotLoc.SetProperty("Visibility", false);
                                        if (tEd.MyEditBox.value.length > 0 && cdeNMI.Key13Event)
                                            cdeNMI.Key13Event(evt);
                                    }
                                    else {
                                        tEd.mMotLoc.SetProperty("Visibility", true);
                                        tEd.ShowHideMTL(true);
                                    }
                                });
                                this.SetProperty("ShowOverflow", true);
                                this.ShowHideMTL(cde.CBool(this.GetProperty("AutoShowMTL")));
                            }
                            if (cde.CBool(this.GetProperty("EnforceAndConfirm"))) {
                                this.MyConfirmBox = document.createElement("input");
                                this.MyConfirmBox.style.cssFloat = "left";
                                this.MyConfirmBox.className = "cdeInput";
                                this.MyConfirmBox.type = "password";
                                if (!cde.CBool(this.GetProperty("EnableAutoFill")) && !cde.CBool(this.GetProperty("InTemplate"))) {
                                    this.MyConfirmBox.name = "EB" + cde.GuidToString(this.MyFieldInfo.cdeMID) + "_" + Math.floor((Math.random() * 1000) + 1);
                                    this.MyConfirmBox.autocomplete = "new-password";
                                }
                                this.MyConfirmBox.addEventListener("focusin", function () {
                                    _this.JustInC = true;
                                });
                                this.mFrameDiv.appendChild(this.MyConfirmBox);
                                if (!cde.CBool(this.GetProperty("HideMTL"))) {
                                    this.mMotLoc2 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.MuTLock).Create(this, { ScreenID: pScreenID, TRF: this.MyTRF });
                                    this.mMotLoc2.SetProperty("PassField", this);
                                    this.mMotLoc2.SetProperty("Visibility", false);
                                    this.mMotLoc2.SetProperty("Style", "position:fixed;margin-top:" + cdeNMI.GetSizeFromTile(2) + "px");
                                    this.MyMotLockButton2 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-2x'>&#xf00A;</span>", "ClassName=cdeMTL"] });
                                    this.MyMotLockButton2.SetProperty("Cookie", this);
                                    this.MyMotLockButton2.SetProperty("OnClick", function (pSender, evt) {
                                        var tEd = pSender.GetProperty("Cookie");
                                        cdeNMI.StopPointerEvents(evt);
                                        if (tEd.mMotLoc2.Visibility) {
                                            tEd.mMotLoc2.SetProperty("Visibility", false);
                                            if (tEd.MyConfirmBox.value.length > 0 && cdeNMI.Key13Event)
                                                cdeNMI.Key13Event(evt);
                                        }
                                        else {
                                            tEd.mMotLoc2.SetProperty("Visibility", true);
                                            tEd.ShowHideMTL(true, true);
                                        }
                                    });
                                    this.SetProperty("ShowOverflow", true);
                                }
                                if (this.RequiresUpdateButton === true) {
                                    this.mUpdButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this, { PreInitBag: ["ControlTW=3", "ControlTH=1"], PostInitBag: ["Title=Set Password", "ClassName=cdePWDUpdateButton"] });
                                    this.mUpdButton.SetProperty("Cookie", this);
                                    this.mUpdButton.SetProperty("OnClick", function (pSender, evt) {
                                        var tEd = pSender.GetProperty("Cookie");
                                        cdeNMI.StopPointerEvents(evt);
                                        tEd.CheckAndWriteValue(tEd.MyEditBox, false);
                                    });
                                }
                            }
                            break;
                        case cdeNMI.cdeControlType.Number:
                            this.MyEditBox.type = "number";
                            this.MyBaseType = cdeNMI.cdeControlType.Number;
                            break;
                        case cdeNMI.cdeControlType.URL:
                            this.MyEditBox.type = "url";
                            this.MyBaseType = cdeNMI.cdeControlType.URL;
                            break;
                        case cdeNMI.cdeControlType.eMail:
                            this.MyEditBox.type = "email";
                            this.MyBaseType = cdeNMI.cdeControlType.eMail;
                            break;
                        case cdeNMI.cdeControlType.ComboOption: //With Combo
                            {
                                this.MyBaseType = cdeNMI.cdeControlType.ComboOption;
                                var tOptions = this.MyFieldInfo["Options"];
                                if (this.MyTRF.ModelID || (tOptions && tOptions.indexOf("PROPERTYPICKER") < 0)) {
                                    var tGR = cdeNMI.MyTCF.CreateBaseControl().Create(this, { TRF: pTRF });
                                    var tDiv = document.createElement("div");
                                    tDiv.style.width = "inherit";
                                    tDiv.style.height = "0";
                                    tDiv.id = cde.GuidToString(this.MyTRF.FldInfo.cdeMID) + "_CBODIV";
                                    tGR.SetElement(tDiv);
                                    this.DropButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-3x'>&#xf03a;</span>"] });
                                    if (cde.CInt(this.GetProperty("TileFactorY")) > 1)
                                        this.DropButton.SetProperty("TileFactorY", cde.CInt(this.GetProperty("TileFactorY")));
                                    this.DropButton.SetProperty("OnClick", function (pSender, evt) {
                                        cdeNMI.StopPointerEvents(evt);
                                        try {
                                            _this.MyFieldInfo["OptionsLive"] = cdeNMI.GenerateFinalString(_this.MyFieldInfo["Options"], cdeNMI.MyNMIModels[_this.MyTRF.ModelID].MyStorageMirror[_this.MyTRF.TableName][_this.MyTRF.RowNo]);
                                        }
                                        catch (e) {
                                            //ignored
                                        }
                                        _this.MyCombo.ShowComboPicker();
                                    });
                                    this.MyTRF.FldInfo["HideInput"] = true;
                                    this.MyCombo = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.ComboBox).Create(tGR, { ScreenID: pScreenID, TRF: this.MyTRF, PostInitBag: ["ClassName=cdeInvisible", "iValue=" + this.GetProperty("Value")] });
                                    this.MyCombo.RegisterEvent("OnValueChanged", function (pCtrl, evt, pVal) {
                                        if (pVal !== "" && pVal !== "CDE_NOP")
                                            _this.SetProperty("Value", pVal);
                                    });
                                    this.SetProperty("OnValueChanged", function (sender, evt, pval) {
                                        if (pval)
                                            _this.MyCombo.SetProperty("iValue", pval);
                                    });
                                    if (!cde.CBool(this.MyFieldInfo["IsOverlay"]) && !cde.CBool(this.MyFieldInfo["IsInTable"])) {
                                        if (this.MyTextArea)
                                            this.MyTextArea.onblur = function () { return _this.EditElement("13", _this.MyTextArea); };
                                        else
                                            this.MyEditBox.onblur = function () { return _this.EditElement("13", _this.MyEditBox); };
                                    }
                                }
                            }
                            break;
                        default:
                            if ((this.MyFieldInfo.Flags & 1) !== 0) {
                                this.MyEditBox.type = "password";
                                this.MyEditBox.addEventListener("focusin", function () {
                                    _this.MyEditBox.value = "";
                                });
                            }
                            else
                                this.MyEditBox.type = "text";
                            break;
                    }
                }
                if (tAddEnter) {
                    this.EnterButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-3x'>&#xf058;</span>"] });
                    this.EnterButton.SetProperty("OnClick", function (pSender, evt) {
                        cdeNMI.StopPointerEvents(evt);
                        _this.CheckAndWriteValue(_this.MyEditBox, false);
                    });
                    this.EnterButton.SetProperty("Visibility", false);
                }
                if (!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) !== 0) {
                    if (this.MyTextArea) {
                        this.MyTextArea.onkeypress = function (evt) { return _this.EditElement(evt, _this.MyEditBox); };
                        this.MyTextArea.onfocus = function () {
                            cdeNMI.DisableKey36Event = true;
                        };
                    }
                    else {
                        this.MyEditBox.onkeypress = function (evt) { return _this.EditElement(evt, _this.MyEditBox); };
                        this.MyEditBox.onfocus = function () {
                            cdeNMI.DisableKey36Event = true;
                        };
                    }
                    if (this.MyConfirmBox) {
                        this.MyConfirmBox.onkeypress = function (evt) { return _this.EditElement(evt, _this.MyConfirmBox); };
                        this.MyConfirmBox.onfocus = function () {
                            cdeNMI.DisableKey36Event = true;
                        };
                    }
                }
            }
            this.SetProperty("iValue", _super.prototype.GetProperty.call(this, "Value"));
            if (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) === 0)
                this.SetProperty("Disabled", true);
            this.SetProperty("IsOverlay", cde.CBool(this.MyFieldInfo["IsOverlay"]) || cde.CBool(this.MyFieldInfo["IsInTable"]) || cde.CBool(this.GetProperty("AutoShowMTL")));
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            return true;
        };
        ctrlEditBox.prototype.OnUnload = function () {
            //New in 4.202.3: Disable any controls under a closed Collapsible Group
            this.SetProperty("Disabled", true);
            _super.prototype.OnUnload.call(this);
        };
        ctrlEditBox.prototype.OnLoad = function () {
            var tW = this.mFrameDiv.clientWidth;
            var setSize = false;
            if (tW > 0) {
                if (this.GetProperty("TileFactorX")) {
                    tW -= (20 / cde.CInt(this.GetProperty("TileFactorX")));
                }
                else
                    tW -= 20;
                setSize = (this.MyBaseType !== cdeNMI.cdeControlType.ComboOption);
                if (setSize === true && ((!cde.CBool(this.GetProperty("HideMTL")) && this.MyBaseType === cdeNMI.cdeControlType.Password)))
                    setSize = false;
            }
            var tEnable = !(!this.MyTRF || !this.MyTRF.FldInfo || (this.MyTRF.FldInfo.Flags & 2) !== 0);
            this.SetProperty("Disabled", tEnable);
            if (this.MyEditBox) {
                if (setSize)
                    this.MyEditBox.style.width = tW + "px";
            }
            if (this.MyConfirmBox) {
                if (setSize)
                    this.MyConfirmBox.style.width = tW + "px";
            }
            if (this.MyTextArea) {
                if (setSize)
                    this.MyTextArea.style.width = tW + "px";
            }
            _super.prototype.OnLoad.call(this);
        };
        ctrlEditBox.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if ((pName === "Value" || pName === "iValue") && (this.MyEditBox || this.MyTextArea)) {
                if (this.MyFieldInfo && (!pValue || pValue === "" || pValue === "-")) {
                    if (this.MyFieldInfo.Type === 31 && this.MyFieldInfo["DefaultValue"] === "") {
                        pValue = "http://";
                    }
                    else {
                        if (this.MyFieldInfo["DefaultValue"])
                            pValue = this.MyFieldInfo["DefaultValue"];
                        else {
                            if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.Number)
                                pValue = 0;
                            else
                                pValue = "";
                        }
                    }
                    if (this.MyEditBox && cdeNMI.HasPlaceholderSupport) {
                        var tHelpText = this.MyFieldInfo["HelpText"];
                        if (!tHelpText)
                            tHelpText = this.MyFieldInfo["EditPlaceholder"];
                        if (tHelpText)
                            this.MyEditBox.placeholder = tHelpText;
                    }
                }
                //if (this.MyFieldInfo && this.MyFieldInfo.Type === cdeControlType.ComboOption)
                //    pValue = pValue;
                if (this.MyCombo)
                    this.MyCombo.SetProperty("iValue", pValue);
                if (this.MyTextArea)
                    this.MyTextArea.value = pValue;
                else {
                    this.MyEditBox.value = pValue;
                    if (this.MyConfirmBox)
                        this.MyConfirmBox.value = pValue;
                }
            }
            else if (pName === "EditPlaceholder" && this.MyEditBox) {
                this.MyEditBox.placeholder = pValue;
            }
            else if (pName === "Disabled" && this.MyEditBox) {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.MyEditBox.disabled = cde.CBool(pValue);
                if (this.MyConfirmBox)
                    this.MyConfirmBox.disabled = cde.CBool(pValue);
            }
            else if (pName === "Disabled" && this.MyTextArea) {
                if ((!this.MyFieldInfo || (this.MyFieldInfo.Flags & 2) === 0))
                    pValue = true;
                this.MyTextArea.disabled = cde.CBool(pValue);
            }
            else if (pName === "Rows" && this.MyTextArea) {
                pValue = cde.CInt(pValue);
                this.MyTextArea.rows = pValue;
            }
            else if (pName === "Background") {
                if (this.MyTextArea)
                    this.MyTextArea.style.background = pValue;
                if (this.MyEditBox)
                    this.MyEditBox.style.background = pValue;
                if (this.MyConfirmBox)
                    this.MyConfirmBox.style.background = pValue;
            }
            else if (pName === "Foreground") {
                if (this.MyTextArea)
                    this.MyTextArea.style.color = pValue;
                if (this.MyEditBox)
                    this.MyEditBox.style.color = pValue;
                if (this.MyConfirmBox)
                    this.MyConfirmBox.style.color = pValue;
            }
            else if (pName === "ControlTW") {
                if (this.MyFieldInfo && ((this.MyFieldInfo.Type === cdeNMI.cdeControlType.Password && !cde.CBool(this.GetProperty("HideMTL"))) || this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption)) {
                    if (this.MyTextArea)
                        this.MyTextArea.style.width = (cdeNMI.GetSizeFromTile(pValue - 1) - 6) + "px";
                    if (this.MyEditBox)
                        this.MyEditBox.style.width = (cdeNMI.GetSizeFromTile(pValue - 1) - 6) + "px";
                    if (this.MyConfirmBox)
                        this.MyConfirmBox.style.width = (cdeNMI.GetSizeFromTile(pValue - 1) - 6) + "px";
                }
            }
            else if (pName === "TileFactorY" && this.MyEditBox) {
                this.MyEditBox.style.height = (50 / cde.CInt(pValue)) + "px";
                if (cde.CInt(pValue) > 1) {
                    if (this.MyEditBox && !this.MyEditBox.classList.contains("cdeSmall"))
                        this.MyEditBox.classList.add("cdeSmall");
                    if (this.MyTextArea && !this.MyTextArea.classList.contains("cdeSmall"))
                        this.MyTextArea.classList.add("cdeSmall");
                }
            }
            else if (pName === "Z-Index" && this.MyCombo) {
                pValue = cde.CInt(pValue);
                this.MyCombo.SetProperty("Z-Index", pValue);
                this.DropButton.SetProperty("Z-Index", pValue);
            }
            else if (pName === "IsOverlay") {
                if (this.MyTextArea)
                    cdeNMI.SetZIndex(this.MyTextArea, cde.CBool(pValue) ? 1300 : 0);
                if (this.MyEditBox)
                    cdeNMI.SetZIndex(this.MyEditBox, cde.CBool(pValue) ? 1300 : 0);
                if (this.MyConfirmBox)
                    cdeNMI.SetZIndex(this.MyConfirmBox, cde.CBool(pValue) ? 1300 : 0);
                if (this.mMotLoc) {
                    this.ShowHideMTL(pValue);
                }
                if (this.mMotLoc2) {
                    this.ShowHideMTL(pValue, true);
                }
                if (this.DropButton)
                    cdeNMI.SetZIndex(this.DropButton.GetElement(), cde.CBool(pValue) ? 1300 : 0);
                if (this.MyCombo)
                    cdeNMI.SetZIndex(this.MyCombo.GetElement(), cde.CBool(pValue) ? 1300 : 0);
                if (cde.CBool(pValue)) {
                    if (this.EnterButton)
                        this.EnterButton.SetProperty("Visibility", true);
                    if (this.MyEditBox) {
                        cdeNMI.Key27Event = function (evt) { return _this.EditRestore(evt, _this.MyEditBox); };
                        cdeNMI.Key13Event = function (evt) { return _this.EditElement(evt, _this.MyEditBox); };
                        if (cdeNMI.MyTouchOverlay)
                            this.MyEditBox.focus();
                    }
                    if (this.MyTextArea) {
                        cdeNMI.Key27Event = function (evt) { return _this.EditRestore(evt, _this.MyTextArea); };
                        cdeNMI.Key13Event = function (evt) { return _this.EditElement(evt, _this.MyTextArea); };
                        if (cdeNMI.MyTouchOverlay)
                            this.MyTextArea.focus();
                    }
                    if (this.MyConfirmBox) {
                        cdeNMI.Key27Event = function (evt) { return _this.EditRestore(evt, _this.MyConfirmBox); };
                        cdeNMI.Key13Event = function (evt) { return _this.EditElement(evt, _this.MyConfirmBox); };
                    }
                }
                else {
                    if (!this.MyFieldInfo || (!cde.CBool(this.MyFieldInfo["InTemplate"]) && this.MyFieldInfo.Type !== cdeNMI.cdeControlType.ComboOption)) {
                        if (this.MyEditBox)
                            this.MyEditBox.onchange = function () { return _this.EditElement("13", _this.MyEditBox); };
                        if (this.MyConfirmBox)
                            this.MyConfirmBox.onchange = function () { return _this.EditElement("13", _this.MyConfirmBox); };
                        if (this.MyTextArea)
                            this.MyTextArea.onchange = function () { return _this.EditElement("13", _this.MyTextArea); };
                    }
                }
                if (this.EnterButton)
                    cdeNMI.SetZIndex(this.EnterButton.GetElement(), cde.CBool(pValue) ? 1300 : 0);
            }
            else if (pName === "InnerClassName") {
                if (this.MyEditBox)
                    this.MyEditBox.className = pValue;
                if (this.MyConfirmBox)
                    this.MyConfirmBox.className = pValue;
                if (this.MyTextArea)
                    this.MyTextArea.className = pValue;
            }
            else if (pName === "InnerStyle") {
                if (this.MyEditBox)
                    this.MyEditBox.style.cssText = pValue;
                if (this.MyConfirmBox)
                    this.MyConfirmBox.style.cssText = pValue;
                if (this.MyTextArea)
                    this.MyTextArea.style.cssText = pValue;
            }
            else if (pName === "TabIndex") {
                if (this.MyEditBox)
                    this.MyEditBox.tabIndex = pValue;
                if (this.MyConfirmBox)
                    this.MyConfirmBox.tabIndex = pValue;
                if (this.MyTextArea)
                    this.MyTextArea.tabIndex = pValue;
            }
            else if (pName === "LiveOptions" && this.MyCombo) {
                this.MyCombo.SetProperty(pName, pValue);
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ctrlEditBox.prototype.ShowHideMTL = function (pValue, IsSecond) {
            if (IsSecond === void 0) { IsSecond = false; }
            if (cde.CBool(IsSecond) === true) {
                if (this.MyMotLockButton2) {
                    cdeNMI.SetZIndex(this.MyMotLockButton2.GetElement(), cde.CBool(pValue) ? 1300 : 0);
                    this.mMotLoc2.SetProperty("IsOverlay", pValue);
                }
            }
            else {
                cdeNMI.SetZIndex(this.MyMotLockButton.GetElement(), cde.CBool(pValue) ? 1300 : 0);
                this.mMotLoc.SetProperty("IsOverlay", pValue);
            }
        };
        ctrlEditBox.prototype.SetTE = function (pTE) {
            _super.prototype.SetTE.call(this, pTE);
            if (this.MyCombo)
                this.MyCombo.SetTE(pTE);
        };
        ctrlEditBox.prototype.EditRestore = function (pEvent, pEle) {
            var tModel = cdeNMI.MyNMIModels[this.MyScreenID];
            cdeNMI.ResetKeyCorder();
            if (this.MyTRF && this.MyTRF.TableName && this.MyTRF.TableName !== "" && tModel) {
                var tFldContent = cdeNMI.GetFldContent(tModel.MyStorageMirror[this.MyTRF.TableName][this.MyTRF.RowNo], this.MyFieldInfo, false, false);
                this.FireEvent(false, "OnValueChanged", pEvent, tFldContent, this.MyTRF);
            }
        };
        ctrlEditBox.prototype.EditElement = function (pEvent, pEle) {
            var chCode;
            if (typeof pEvent === 'string')
                chCode = cde.CInt(pEvent);
            else
                chCode = ('keyCode' in pEvent) ? pEvent.keyCode : pEvent.charCode;
            //cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "KeyCode:HandleEvent", chCode);
            if (chCode === 13) {
                cdeNMI.StopPointerEvents(pEvent);
                this.CheckAndWriteValue(pEle, this.RequiresUpdateButton);
                cdeNMI.ResetKeyCorder();
            }
            else if (chCode === 27) {
                this.EditRestore(pEvent, pEle);
            }
            else if (this.JustIn && pEle === this.MyEditBox) {
                this.JustIn = false;
                this.MyEditBox.value = ""; // pEvent.key;
            }
            else if (this.JustInC && pEle === this.MyConfirmBox) {
                this.JustInC = false;
                this.MyConfirmBox.value = ""; // pEvent.key;
            }
        };
        ctrlEditBox.prototype.CheckAndWriteValue = function (pEle, pValidateOnly) {
            if (pValidateOnly === void 0) { pValidateOnly = false; }
            switch (this.MyFieldInfo.Type) {
                case cdeNMI.cdeControlType.Number:
                    if (cde.CInt(this.GetProperty("MaxValue")) > 0 && cde.CInt(pEle.value) > cde.CInt(this.GetProperty("MaxValue"))) {
                        cdeNMI.ShowToastMessage("Entry is too High. Max Value=" + cde.CInt(this.GetProperty("MaxValue")));
                        this.SetProperty("iValue", _super.prototype.GetProperty.call(this, "Value"));
                        return;
                    }
                    if (cde.CInt(pEle.value) < cde.CInt(this.GetProperty("MinValue"))) {
                        cdeNMI.ShowToastMessage("Entry is too low. Min Value=" + cde.CInt(this.GetProperty("MaxValue")));
                        this.SetProperty("iValue", _super.prototype.GetProperty.call(this, "Value"));
                        return;
                    }
                    break;
                case cdeNMI.cdeControlType.eMail:
                    if (!cdeNMI.Check4ValidEmail(pEle.value)) {
                        cdeNMI.ShowToastMessage("Entry is not a valid Email Address");
                        this.SetProperty("AddClassName", "cdeValidateError");
                        return;
                    }
                    this.SetProperty("RemoveClassName", "cdeValidateError");
                    break;
                case cdeNMI.cdeControlType.IPAddress:
                    if (!cdeNMI.ValidateIPaddress(pEle.value)) {
                        cdeNMI.ShowToastMessage("Entry is not a valid IP-Address");
                        this.SetProperty("AddClassName", "cdeValidateError");
                        return;
                    }
                    this.SetProperty("RemoveClassName", "cdeValidateError");
                    break;
                case cdeNMI.cdeControlType.Password:
                    if (this.MyConfirmBox) {
                        if (!cdeNMI.IsSamePassword(this.MyEditBox.value, this.MyConfirmBox.value, true)) {
                            this.SetProperty("AddClassName", "cdeValidateError");
                            if (cdeNMI.MyToast)
                                cdeNMI.MyToast.ShowToastMessage("Passwords are not matching, please update");
                            return;
                        }
                        else if (!cdeNMI.Check4ValidPassword(this.MyEditBox.value)) {
                            this.SetProperty("AddClassName", "cdeValidateError");
                            if (cdeNMI.MyToast)
                                cdeNMI.MyToast.ShowToastMessage("Password is too short or is not strong enough. Must be at least 8 characters");
                            return;
                        }
                        this.SetProperty("RemoveClassName", "cdeValidateError");
                    }
                    break;
                default:
                    {
                        if (!pEle.value || pEle.value.length === 0 || !this.GetProperty("Validator"))
                            break;
                        var ipformat = new RegExp(this.GetProperty("Validator"));
                        if (!pEle.value.match(ipformat)) {
                            var tValText = this.GetProperty("ValidateErrorText");
                            if (!tValText)
                                tValText = "Entry does not validate. Please verify your entry";
                            cdeNMI.ShowToastMessage(tValText);
                            this.SetProperty("AddClassName", "cdeValidateError");
                            return;
                        }
                        this.SetProperty("RemoveClassName", "cdeValidateError");
                    }
                    break;
            }
            if (pValidateOnly === true)
                return;
            if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.Password && cdeNMI.MyToast)
                cdeNMI.MyToast.ShowToastMessage("Password was set successfully");
            this.IsDirty = true;
            this.FireEvent(false, "OnValueChanged", "CheckAndWriteValue", pEle.value, this.MyTRF);
            this.FireEvent(false, "OnPropertyChanged", "CheckAndWriteValue", pEle.value, "Value");
        };
        ctrlEditBox.prototype.ApplySkin = function () {
            if (this.MyFieldInfo &&
                ((this.MyFieldInfo.Type === cdeNMI.cdeControlType.Password && !cde.CBool(this.GetProperty("HideMTL"))) || this.MyFieldInfo.Type === cdeNMI.cdeControlType.ComboOption)) {
                if (this.MyTextArea && this.MyTextArea.parentElement && this.MyTextArea.parentElement.clientWidth > 0)
                    this.MyTextArea.style.width = this.MyTextArea.parentElement.clientWidth - (cdeNMI.GetSizeFromTile(1) + 6) + "px";
                if (this.MyEditBox && this.MyEditBox.parentElement && this.MyEditBox.parentElement.clientWidth > 0)
                    this.MyEditBox.style.width = this.MyEditBox.parentElement.clientWidth - (cdeNMI.GetSizeFromTile(1) + 6) + "px";
                if (this.MyConfirmBox)
                    this.MyConfirmBox.style.width = this.MyConfirmBox.parentElement.clientWidth - (cdeNMI.GetSizeFromTile(1) + 6) + "px";
            }
        };
        ctrlEditBox.prototype.GetProperty = function (pName) {
            if (pName === "Value") {
                if (this.MyEditBox)
                    return this.MyEditBox.value;
                else if (this.MyTextArea)
                    return this.MyTextArea.value;
            }
            return _super.prototype.GetProperty.call(this, pName);
        };
        //Backwards Conpat
        ctrlEditBox.Create = function (pTargetControl, pScreenID, pTRF, pContent, pShowOverlay, pClassName) {
            var tTile = new ctrlEditBox(pTRF);
            tTile.InitControl(pTargetControl, pTRF, null, pScreenID);
            if (pContent)
                tTile.SetProperty("iValue", pContent);
            if (cde.CBool(pShowOverlay))
                tTile.SetProperty("IsOverlay", true);
            else
                tTile.SetProperty("IsOverlay", false);
            if (pClassName)
                tTile.SetProperty("InnerClassName", pClassName);
            return tTile;
        };
        return ctrlEditBox;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlEditBox = ctrlEditBox;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
    * Creates a group of elements in a DIV
    * The pTargetControl will be overlayed by the ctrlDrawOverlay
    * pTRF is handed to ctrlTouchDraw
    *
    * This control is a Container Control
    * (4.1 Ready!)
    */
    var ctrlTileGroup = /** @class */ (function (_super) {
        __extends(ctrlTileGroup, _super);
        function ctrlTileGroup(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divTiles = null;
            _this.divDragContent = null;
            _this.h1Title = null;
            return _this;
        }
        ctrlTileGroup.Create = function (pTargetEleme, pTRF, pPropertyBag, pScreenID, pCaption, pClassName) {
            var t = new ctrlTileGroup(pTRF);
            t.InitControl(pTargetEleme, pTRF, pPropertyBag, pScreenID);
            if (pCaption)
                t.SetProperty("Label", pCaption);
            if (pClassName)
                t.SetProperty("ClassName", pCaption);
            return t;
        };
        ctrlTileGroup.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.TileGroup;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.divTiles = document.createElement('div');
            this.divTiles.className = "cdeTiles";
            this.divTiles.style.cssFloat = "left";
            if (pTRF && pTRF.FldInfo)
                this.divTiles.setAttribute("cdefo", cde.CStr(pTRF.FldInfo.FldOrder));
            if (cde.CBool(this.GetSetting("AllowDrag"))) {
                this.divDragContent = document.createElement('div');
                this.divDragContent.style.position = "absolute";
                this.divDragContent.style.overflow = "hidden";
                this.divTiles.style.position = "relative";
                this.divTiles.appendChild(this.divDragContent);
                this.SetElement(this.divTiles, false, this.divDragContent);
            }
            else
                this.SetElement(this.divTiles);
            return true;
        };
        ctrlTileGroup.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            _super.prototype.SetProperty.call(this, pName, pValue);
            var tWid;
            if (pName === "Caption" || pName === "Label" || pName === "Title" || pName === "Value" || pName === "iValue") {
                if (pValue) {
                    var tNewVal = pValue;
                    if (pName === "Caption" || pName === "Label" || pName === "Title")
                        tNewVal = cdeNMI.TL.T(pValue);
                    if (this.GetProperty("Format") && (pName === "Value" || pName === "iValue")) {
                        tNewVal = this.GetProperty("Format").format(pValue);
                    }
                    if (this.MyBaseType !== cdeNMI.cdeControlType.CollapsibleGroup && cde.CBool(this.GetProperty("IsDivOnly"))) {
                        if (tNewVal && tNewVal.startsWith("FA") && tNewVal.length === 8) {
                            tNewVal = "<i class='fa faIcon " + (tNewVal.substr(3, 1) === "S" ? "fa-spin " : "") + "fa-" + tNewVal.substr(2, 1) + "x'>&#x" + tNewVal.substr(4, tNewVal.length - 4) + ";</i>";
                        }
                        this.divTiles.innerHTML = tNewVal;
                        this.divTiles.style.cssFloat = "none";
                    }
                    else {
                        if (!cde.CBool(this.GetProperty("HideCaption"))) {
                            if (!this.h1Title) { //ctrlSmartLabel.Create(null, null, null, "", "h1");
                                var titleEle = "h1";
                                if (this.GetProperty("LabelElement"))
                                    titleEle = this.GetProperty("LabelElement");
                                this.h1Title = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(null, { PreInitBag: ["Element=" + titleEle] });
                                if (this.GetProperty("LabelClassName"))
                                    this.h1Title.SetProperty("ClassName", this.GetProperty("LabelClassName"));
                                else {
                                    if ((cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 5) && (this.GetProperty("IsSmall") || cde.CInt(this.GetProperty("TileFactorY")) > 1))
                                        this.h1Title.SetProperty("ClassName", "cdeTileGroupHeaderSmall");
                                    else
                                        this.h1Title.SetProperty("ClassName", "cdeTileGroupHeader");
                                }
                                this.h1Title.GetElement().style.cssFloat = null;
                                this.divTiles.appendChild(this.h1Title.GetElement());
                            }
                            this.h1Title.SetProperty("iValue", tNewVal);
                        }
                    }
                }
                else {
                    if (this.h1Title) {
                        this.h1Title.GetElement().parentElement.removeChild(this.h1Title.GetElement());
                        this.h1Title = null;
                    }
                    return;
                }
            }
            else if (pName === "HideCaption" && this.h1Title && cde.CBool(pValue)) {
                this.h1Title.GetElement().parentElement.removeChild(this.h1Title.GetElement());
                this.h1Title = null;
            }
            else if (pName === "OnClick" && pValue) {
                this.PreventManipulation = true;
                this.HookEvents(false);
                //if (pValue && (typeof (pValue) == 'string') && pValue.toString().substr(0, 4) == "TTS:")
                //    pValue = "cdeNMI.MyScreenManager.TransitToScreen('" + pValue.substr(4) + "', true)";
                //this.eventOnClick = pValue;
                this.RegisterEvent("OnClick", pValue);
                this.RegisterEvent("PointerUp", this.DoFireClick);
                //this.eventPointerUp = this.DoFireClick;
            }
            else if (pName === "OnHover" && pValue) {
                this.GetElement().addEventListener("mouseenter", function (evt) { return _this.onHover(evt); });
                this.RegisterEvent("OnHover", pValue);
            }
            else if ((pName === "TileWidth" || pName === "TileFactorX") && this.MyRootElement) {
                pValue = this.GetProperty("TileWidth");
                if (!pValue)
                    pValue = 1;
                if (cde.CInt(pValue) > 0) {
                    tWid = this.SetWidth(this.divTiles, cde.CInt(pValue), 0);
                    this.divTiles.style.maxWidth = tWid + "px";
                    if (this.divDragContent) {
                        this.divDragContent.style.width = tWid + "px";
                        this.divDragContent.style.maxWidth = tWid + "px";
                    }
                }
                else {
                    if (this.divDragContent) {
                        this.divTiles.style.width = this.divDragContent.clientWidth + "px";
                        this.divTiles.style.maxWidth = this.divDragContent.clientWidth + "px";
                    }
                    else {
                        this.divTiles.style.width = "inherit";
                        this.divTiles.style.maxWidth = "inherit";
                    }
                }
                this.SetProperty("ControlTW", pValue);
            }
            else if ((pName === "TileHeight" || pName === "TileFactorY") && this.MyRootElement) {
                pValue = this.GetProperty("TileHeight");
                if (!pValue)
                    pValue = 1;
                if (cde.CInt(pValue) > 0) {
                    tWid = this.SetHeight(this.divTiles, cde.CInt(pValue), 0);
                    this.divTiles.style.maxHeight = tWid + "px";
                    if (this.divDragContent)
                        this.divDragContent.style.height = tWid + "px";
                }
                else {
                    if (this.divDragContent) {
                        this.divTiles.style.height = this.divDragContent.clientHeight + "px";
                        this.divTiles.style.maxHeight = this.divDragContent.clientHeight + "px";
                    }
                    else {
                        this.divTiles.style.height = "inherit";
                        this.divTiles.style.maxHeight = "inherit";
                    }
                }
                this.SetProperty("ControlTH", pValue);
            }
            else if (pName === "MaxTileHeight" && this.MyRootElement) {
                if (cde.CInt(pValue) > 0) {
                    tWid = cdeNMI.GetSizeFromTile(cde.CInt(pValue));
                    if (cde.CInt(this.GetProperty("TileFactorY")) > 1)
                        tWid /= cde.CInt(this.GetProperty("TileFactorY"));
                    this.divTiles.style.maxHeight = tWid + "px";
                }
                else {
                    this.divTiles.style.maxHeight = "inherit";
                }
            }
            else if (pName === "Background" && this.MyRootElement && this.MyBaseType !== cdeNMI.cdeControlType.CollapsibleGroup) {
                this.divTiles.style.background = pValue;
            }
            else if (pName === "GroupBackground" && this.MyRootElement) {
                this.divTiles.style.background = pValue;
            }
            else if (pName === "IsVScrollable" && this.MyRootElement) {
                this.MyRootElement.style.overflowY = "auto";
            }
            else if (pName === "IsHScrollable" && this.MyRootElement) {
                this.MyRootElement.style.overflowX = "auto";
            }
            else if (pName === "Overflow" && this.MyRootElement) {
                this.MyRootElement.style.overflow = pValue;
            }
            else if (pName === "LabelClassName" && this.h1Title) {
                this.h1Title.SetProperty("ClassName", pValue);
            }
            else if (pName === "CaptionBackground" && this.h1Title) {
                this.h1Title.SetProperty("Background", pValue);
            }
            else if (pName === "LabelForeground" && this.h1Title) {
                this.h1Title.SetProperty("Foreground", pValue);
            }
            else if (pName === "LabelFontSize" && this.h1Title) {
                this.h1Title.SetProperty("FontSize", pValue);
            }
            else if (pName === "PixelHeight") {
                _super.prototype.SetProperty.call(this, "PixelHeight", pValue);
                if (this.divDragContent) {
                    if (pValue.toString().endsWith("px") || pValue.toString().endsWith("%") || pValue === "auto")
                        this.divDragContent.style.height = pValue;
                    else
                        this.divDragContent.style.height = pValue + "px";
                    this.divTiles.style.height = this.divDragContent.clientHeight + "px";
                }
            }
            else if (pName === "LabelFormat") {
                this.SetProperty("Format", pValue);
                this.SetProperty("iValue", this.GetProperty("Value"));
            }
        };
        ctrlTileGroup.prototype.onHover = function (evt) {
            this.FireEvent(true, "OnHover", evt);
        };
        ctrlTileGroup.prototype.ApplySkin = function () {
            if (this.divDragContent)
                this.divTiles.style.height = this.divDragContent.clientHeight + "px";
        };
        ctrlTileGroup.prototype.AppendChild = function (pEle) {
            try {
                this.MyChildren.push(pEle);
                if (pEle.GetElement()) {
                    if (this.GetContainerElement() !== pEle.GetElement())
                        this.GetContainerElement().appendChild(pEle.GetElement());
                    this.ApplySkin();
                }
            }
            catch (eee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TileGroup:AppendChild", eee.message + ":" + eee.stack);
            }
        };
        ctrlTileGroup.prototype.AppendElement = function (pEle) {
            this.GetContainerElement().appendChild(pEle);
            this.ApplySkin();
        };
        return ctrlTileGroup;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTileGroup = ctrlTileGroup;
    /**
    * Creates a Collapsible Tile Group allowing to structure a Form
    *
    * (4.1 Ready!)
    */
    var ctrlCollapsibleGroup = /** @class */ (function (_super) {
        __extends(ctrlCollapsibleGroup, _super);
        function ctrlCollapsibleGroup(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.mHideOpenButton = null;
            _this.mExpandLeftButton = null;
            _this.mExpandRightButton = null;
            _this.mDragButton = null;
            _this.pos1 = 0;
            _this.pos2 = 0;
            _this.pos3 = 0;
            _this.pos4 = 0;
            _this.oldz = "";
            _this.oldBC = "";
            _this.IsDragging = false;
            _this.mDefaultSize = 6;
            _this.IsTesla = false;
            _this.colOpen = function (event) {
                if (event)
                    event.target.removeEventListener("transitionend", _this.colOpen);
                if (_this.mTitleGroup.GetElement().classList.contains("cdeCollapsibleOpen"))
                    _this.mTitleGroup.GetElement().classList.remove("cdeCollapsibleOpen");
                if (!_this.mTitleGroup.GetElement().classList.contains("cdeCollapsibleOpen"))
                    _this.mTitleGroup.GetElement().classList.add("cdeCollapsibleClosed");
                if (_this.mHideOpenButton)
                    _this.mHideOpenButton.SetProperty("Title", "<span class='fa fa-lg cdeFormPin'>&#xF078;<span>");
                _this.OnUnload();
            };
            return _this;
        }
        ctrlCollapsibleGroup.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            //if (pTRF && pTRF.FldInfo) pTRF.FldInfo["AllowDrag"] = true; //test of all collabsible draggable
            this.SetTRF(pTRF, pPropertyBag);
            _super.prototype.InitControl.call(this, pTargetControl, null, null, pScreenID);
            this.MyBaseType = cdeNMI.cdeControlType.CollapsibleGroup;
            _super.prototype.SetProperty.call(this, "ClassName", "cdeCollapsibleGroup");
            if (!this.GetSetting("TileWidth") && this.GetSetting("MinTileWidth"))
                this.SetProperty("TileWidth", this.GetSetting("MinTileWidth"));
            this.IsTesla = false; // (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform == 5);
            this.mTitleGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup);
            var tGrpInfo = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.TileGroup, (pTRF && pTRF.FldInfo) ? pTRF.FldInfo.Flags : 2, null);
            tGrpInfo.FldOrder = (pTRF && pTRF.FldInfo) ? pTRF.FldInfo.FldOrder : 0;
            this.mTitleGroup.InitControl(this, new cdeNMI.TheTRF(null, 0, tGrpInfo));
            this.mTitleGroup.GetElement().style.width = "100%";
            this.mTitleGroup.GetElement().style.maxWidth = "100%";
            this.mTitleGroup.GetElement().style.cssFloat = null;
            this.mTitleGroup.SetProperty("TileHeight", 1);
            this.SetGroupHeaderSize();
            this.mTitleGroup.HookEvents(false);
            this.RegisterEvent("Resize", function (sender, tNewW) {
                var tW = _this.GetElement().clientWidth / cdeNMI.GetSizeFromTile(1);
                tW = Math.floor(tW / 6) * _this.mDefaultSize;
                if (!cde.CBool(_this.GetSetting("AllowHorizontalExpand")) && tNewW !== cde.CInt(_this.GetProperty("TileWidth")))
                    return;
                if (tW > tNewW) {
                    if (!_this.GetSetting("MinTileWidth") || tNewW >= cde.CInt(_this.GetSetting("MinTileWidth"))) {
                        _this.SetProperty("TileWidth", tNewW);
                        _this.FireResize(tNewW);
                    }
                }
                else if (tW < tNewW) {
                    if (!_this.GetSetting("MaxTileWidth") || tNewW <= cde.CInt(_this.GetSetting("MaxTileWidth"))) {
                        _this.SetProperty("TileWidth", tNewW);
                        _this.FireResize(tNewW);
                    }
                }
            });
            var tContentGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup);
            tContentGroup.InitControl(this);
            tContentGroup.SetProperty("ClassName", "cdeInsideCollapsible");
            tContentGroup.GetElement().style.width = "inherit";
            var tCloseGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup);
            tCloseGroup.InitControl(this);
            tCloseGroup.GetElement().style.height = (cdeNMI.GetSizeFromTile(1) / 4) + "px";
            tCloseGroup.SetProperty("ClassName", "cdeCloseGroup");
            this.SetElement(this.GetElement(), false, tContentGroup.GetElement());
            this.mTitleGroup.RegisterEvent("PointerUp", function (pControl, evt) {
                if (evt.type === "mousedown" || _this.IsDragging)
                    return;
                if (_this.MyFieldInfo && (_this.MyFieldInfo.Flags & 2) !== 0)
                    _this.ToggleDrop(!cde.CBool(cde.CBool(_this.GetProperty("IsOpen"))), false);
            });
            var lgsize = "2x";
            if (!this.IsTesla && cde.CBool(this.GetSetting("IsSmall")))
                lgsize = "lg";
            if (cde.CBool(this.GetSetting("AllowHorizontalExpand")) === true && cde.CBool(this.GetSetting("HidePins")) !== true && this.GetSetting("MaxTileWidth")) {
                this.mExpandLeftButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mTitleGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["iValue=<span class='fa fa-" + lgsize + " cdeFormPin'>&#xF0A9;<span>"] });
                this.mExpandLeftButton.SetProperty("OnClick", function (sender, evt) {
                    var tW = _this.MyRootElement.clientWidth / cdeNMI.GetSizeFromTile(1);
                    tW = Math.floor(tW / 6) * _this.mDefaultSize;
                    if (!_this.GetProperty("MaxTileWidth") || tW <= cde.CInt(_this.GetProperty("MaxTileWidth")) - _this.mDefaultSize && cdeNMI.MyScreenManager && _this.SetWidth(null, tW + _this.mDefaultSize, 0, true) < cdeNMI.MyScreenManager.DocumentWidth && cdeNMI.MyScreenManager.DocumentWidth > 0) {
                        tW += _this.mDefaultSize;
                        _this.SetNewWidth(tW);
                        _this.ResizeParentsUp(_this, tW);
                        _this.FireResize(tW);
                    }
                    //this.HasFired = true;
                    evt.stopPropagation();
                });
                this.mExpandLeftButton.SetProperty("Float", "right");
                if (!this.IsTesla && cde.CBool(this.GetSetting("IsSmall"))) {
                    this.mExpandLeftButton.SetProperty("TileFactorX", 2);
                    this.mExpandLeftButton.SetProperty("TileFactorY", 2);
                }
                this.mExpandRightButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mTitleGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["iValue=<span class='fa fa-" + lgsize + " cdeFormPin'>&#xF0A8;<span>"] });
                this.mExpandRightButton.SetProperty("OnClick", function (sender, evt) {
                    var tW = _this.MyRootElement.clientWidth / cdeNMI.GetSizeFromTile(1);
                    tW = Math.floor(tW / 6) * _this.mDefaultSize;
                    if (tW > _this.mDefaultSize && (!_this.GetProperty("MinTileWidth") || tW >= cde.CInt(_this.GetProperty("MinTileWidth")) + _this.mDefaultSize) && !_this.IsAChildBigger(tW - _this.mDefaultSize)) {
                        tW -= _this.mDefaultSize;
                        _this.SetNewWidth(tW);
                        _this.ResizeChildrenDown(_this, tW);
                        _this.FireResize(tW);
                    }
                    //this.HasFired = true;
                    evt.stopPropagation();
                });
                this.mExpandRightButton.SetProperty("Float", "right");
                if (!this.IsTesla && cde.CBool(this.GetSetting("IsSmall"))) {
                    this.mExpandRightButton.SetProperty("TileFactorX", 2);
                    this.mExpandRightButton.SetProperty("TileFactorY", 2);
                }
            }
            if (cde.CBool(this.GetSetting("HidePins")) !== true && (!this.MyFieldInfo || this.MyFieldInfo.Flags === undefined || (this.MyFieldInfo.Flags & 2) !== 0)) {
                this.mHideOpenButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mTitleGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["iValue=<span class='fa fa-lg cdeFormPin'>&#xF078;<span>"] });
                this.mHideOpenButton.SetProperty("Float", "left");
                if (!this.IsTesla && cde.CBool(this.GetSetting("IsSmall"))) {
                    this.mHideOpenButton.SetProperty("TileFactorX", 2);
                    this.mHideOpenButton.SetProperty("TileFactorY", 2);
                }
            }
            if (cde.CBool(this.GetSetting("AllowDrag"))) {
                this.mDragButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mTitleGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["iValue=<span class='fa fa-lg cdeFormPin'>&#xF0b2;<span>"] });
                this.mDragButton.SetProperty("Float", "right");
                this.mDragButton.SetProperty("HoverClassName", "cdeDragButton");
                if (!this.IsTesla && cde.CBool(this.GetSetting("IsSmall"))) {
                    this.mDragButton.SetProperty("TileFactorX", 2);
                    this.mDragButton.SetProperty("TileFactorY", 2);
                }
                this.mDragButton.SetProperty("OnPointerDown", function (sender, e) {
                    if (_this.IsDragging) {
                        _this.closeDragElement(e);
                        return;
                    }
                    e = e || window.event;
                    e.preventDefault();
                    _this.pos3 = e.clientX;
                    _this.pos4 = e.clientY;
                    _this.IsDragging = true;
                    document.onpointerup = function (evt) { _this.closeDragElement(evt); };
                    _this.oldz = _this.MyRootElement.style.zIndex;
                    _this.MyRootElement.style.zIndex = "4000";
                    _this.oldBC = _this.GetElement().style.backgroundColor;
                    //this.GetElement().style.height = "0px"; //< simulates removal of control and reflow start
                    _this.GetElement().style.backgroundColor = "rgba(0,0,0,.4)";
                    document.onpointermove = function (evt) { _this.elementDrag(evt); };
                });
            }
            else {
                this.SetProperty("Overflow", "hidden");
            }
            this.ApplySkin();
            this.ToggleDrop(!cde.CBool(cde.CBool(this.GetProperty("DoClose"))), true);
            return true;
        };
        ctrlCollapsibleGroup.prototype.SetProperty = function (pName, pValue) {
            if (pName === "UseMargin" && cde.MyBaseAssets.MyServiceHostInfo.WebPlatform !== 1 && cde.CBool(pValue) === true) {
                _super.prototype.SetProperty.call(this, "Margin", cdeNMI.GetSizeFromTile(1) / 4);
                return;
            }
            else if (pName === "Caption" || pName === "Label" || pName === "Title" || pName === "Value" || pName === "iValue") {
                var tNewVal = pValue;
                if (this.GetProperty("Format") && (pName === "Value" || pName === "iValue")) {
                    tNewVal = this.GetProperty("Format").format(pValue);
                }
                else {
                    tNewVal = cdeNMI.TL.T(tNewVal);
                }
                this.mTitleGroup.SetProperty(pName, tNewVal);
                if (cde.CBool(this.GetProperty("HideCaption")) || (cde.CBool(this.GetProperty("HidePins")) && cde.IsNotSet(pValue))) {
                    this.mTitleGroup.SetProperty("Visibility", false);
                }
                else {
                    this.mTitleGroup.SetProperty("Visibility", true);
                }
                return;
            }
            else if (pName === "HideCaption" && this.mTitleGroup && cde.CBool(pValue)) {
                this.mTitleGroup.SetProperty("Visibility", false);
            }
            else if (pName === "CaptionBackground") {
                this.mTitleGroup.SetProperty("Background", pValue);
            }
            else if (pName === "LabelForeground") {
                this.mTitleGroup.SetProperty(pName, pValue);
                if (this.mExpandLeftButton)
                    this.mExpandLeftButton.SetProperty("Foreground", pValue);
                if (this.mExpandRightButton)
                    this.mExpandRightButton.SetProperty("Foreground", pValue);
            }
            else if (pName === "LabelClassName") {
                this.mTitleGroup.SetProperty("LabelClassName", pValue);
                this.mTitleGroup.SetProperty("ClassName", pValue);
                this.ToggleDrop(!cde.CBool(cde.CBool(this.GetProperty("DoClose"))), true);
                return;
            }
            else if (pName === "DoClose") {
                this.ToggleDrop(!cde.CBool(pValue), true);
            }
            else if (pName === "Background" || pName === "GroupBackground" || pName === "IsVScrollable" || pName === "IsHScrollable") {
                _super.prototype.SetProperty.call(this, pName, pValue);
                return;
            }
            else if (pName === "HidePins") {
                var tHide = (pName === "HidePins" ? !cde.CBool(pValue) : false);
                if (this.mHideOpenButton && (!tHide || (this.MyFieldInfo && (this.MyFieldInfo.Flags & 2) === 0)))
                    this.mHideOpenButton.SetProperty("Visibility", tHide);
                if (cde.CBool(pValue) && cde.IsNotSet(this.mTitleGroup.GetProperty("Value"))) {
                    this.mTitleGroup.SetProperty("Visibility", false);
                }
                else {
                    this.mTitleGroup.SetProperty("Visibility", true);
                }
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "TileHeight" && cde.CBool(cde.CBool(this.GetProperty("DoClose")))) {
                this.ToggleDrop(!cde.CBool(cde.CBool(this.GetProperty("DoClose"))), true);
            }
            else if (!this.IsTesla && pName === "IsSmall" && this.mTitleGroup) {
                this.SetGroupHeaderSize();
            }
        };
        ctrlCollapsibleGroup.prototype.closeDragElement = function (e) {
            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "closedrag", "closed");
            e.stopPropagation();
            e.preventDefault();
            this.IsDragging = false;
            /* stop moving when mouse button is released:*/
            document.onpointermove = null;
            document.onpointerup = null;
            this.MyRootElement.style.zIndex = this.oldz;
            //TODO: Snap control infront of the control its on - except it was right infront of it
            this.MyRootElement.style.top = "0px";
            this.MyRootElement.style.left = "0px";
            this.GetElement().style.backgroundColor = this.oldBC;
            this.ApplySkin();
        };
        ctrlCollapsibleGroup.prototype.elementDrag = function (e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            this.pos1 = this.pos3 - e.clientX;
            this.pos2 = this.pos4 - e.clientY;
            this.pos3 = e.clientX;
            this.pos4 = e.clientY;
            if (this.pos1 === 0 && this.pos2 === 0) {
                this.closeDragElement(e);
                return;
            }
            this.IsDragging = true;
            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ElemetDrag", this.pos1 + "," + this.pos2 + "," + this.pos3 + "," + this.pos4);
            // set the element's new position:
            this.MyRootElement.style.top = (this.MyRootElement.offsetTop - this.pos2) + "px";
            this.MyRootElement.style.left = (this.MyRootElement.offsetLeft - this.pos1) + "px";
        };
        ctrlCollapsibleGroup.prototype.SetNewWidth = function (tW) {
            if (tW > 0) {
                if (!cde.CBool(this.GetSetting("AllowHorizontalExpand")) && tW !== cde.CInt(this.GetProperty("TileWidth")))
                    tW = cde.CInt(this.GetProperty("TileWidth"));
                this.SetProperty("TileWidth", tW);
            }
        };
        ctrlCollapsibleGroup.prototype.ResizeParentsUp = function (pTargetControl, tW) {
            if (!pTargetControl.MyTarget)
                return;
            if (pTargetControl.MyTarget.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup && cde.CBool(pTargetControl.MyTarget.GetProperty("AllowHorizontalExpand")) === true) {
                if (cde.CInt(pTargetControl.MyTarget.GetProperty("TileWidth")) < tW) {
                    pTargetControl.MyTarget.FireEvent(true, "Resize", tW);
                    this.ResizeParentsUp(pTargetControl.MyTarget, tW);
                }
            }
        };
        ctrlCollapsibleGroup.prototype.ResizeChildrenDown = function (pTargetControl, tW) {
            for (var i in pTargetControl.MyChildren) {
                var tChildControl = pTargetControl.MyChildren[i];
                if (tChildControl.MyBaseType === cdeNMI.cdeControlType.CollapsibleGroup && cde.CBool(tChildControl.GetProperty("AllowHorizontalExpand")) === true) {
                    if (!tChildControl.GetProperty("TileWidth") || tW < cde.CInt(tChildControl.GetProperty("TileWidth")) && (!tChildControl.GetProperty("MinTileWidth") || tW >= cde.CInt(tChildControl.GetProperty("MinTileWidth")))) {
                        tChildControl.FireEvent(true, "Resize", tW);
                        this.ResizeChildrenDown(tChildControl, tW);
                    }
                }
            }
        };
        ctrlCollapsibleGroup.prototype.IsAChildSmaller = function (pTarget, tW) {
            for (var i in pTarget.MyChildren) {
                if (pTarget.MyChildren[i] && cde.CInt(pTarget.MyChildren[i].GetProperty("TileWidth")) < tW)
                    return true;
            }
            return false;
        };
        ctrlCollapsibleGroup.prototype.FireResize = function (pSize) {
            for (var i in this.MyChildren) {
                this.MyChildren[i].FireEvent(true, "Resize", pSize);
            }
        };
        ctrlCollapsibleGroup.prototype.SetGroupHeaderSize = function () {
            if (!this.mTitleGroup)
                return;
            if (!this.IsTesla && (this.GetProperty("IsSmall") || cde.CInt(this.GetProperty("TileFactorY")) > 1)) {
                this.mTitleGroup.GetElement().style.height = (cdeNMI.GetSizeFromTile(1) / 2) + "px";
                this.mTitleGroup.SetProperty("ClassName", "cdeTileGroupHeaderSmall");
                this.mTitleGroup.SetProperty("LabelClassName", "cdeTileGroupHeaderSmall");
            }
            else {
                this.mTitleGroup.SetProperty("ClassName", "cdeTileGroupHeader");
            }
            this.ToggleDrop(!cde.CBool(this.GetProperty("DoClose")), true);
        };
        ctrlCollapsibleGroup.prototype.ToggleDrop = function (doClose, doForce) {
            if (!doForce && cde.CBool(this.GetProperty("HidePins")))
                return;
            if (!doClose) {
                this.SetProperty("IsOpen", false);
                var tNH = (cdeNMI.GetSizeFromTile(1));
                if (!this.IsTesla && this.GetProperty("IsSmall"))
                    tNH /= 2;
                //super.SetProperty("PixelHeight", tNH);
                _super.prototype.SetProperty.call(this, "Style", "max-height:" + tNH + "px;");
                if (doForce) {
                    this.colOpen(null);
                    this.OnUnload();
                }
                else
                    _super.prototype.GetElement.call(this).addEventListener("transitionend", this.colOpen, false);
            }
            else {
                this.SetProperty("IsOpen", true);
                if (this.mTitleGroup.GetElement().classList.contains("cdeCollapsibleClosed"))
                    this.mTitleGroup.GetElement().classList.remove("cdeCollapsibleClosed");
                this.mTitleGroup.GetElement().classList.add("cdeCollapsibleOpen");
                if (this.mHideOpenButton)
                    this.mHideOpenButton.SetProperty("Title", "<span class='fa fa-lg cdeFormPin'>&#xF077;<span>");
                if (cdeNMI.GetSizeFromTile(_super.prototype.GetProperty.call(this, "TileHeight")) > 0) {
                    var tNH = (cdeNMI.GetSizeFromTile(_super.prototype.GetProperty.call(this, "TileHeight")));
                    if (!this.IsTesla && this.GetProperty("IsSmall"))
                        tNH /= 2;
                    //super.SetProperty("PixelHeight", tNH);
                    _super.prototype.SetProperty.call(this, "Style", "max-height:" + tNH + "px;");
                }
                else {
                    //super.SetProperty("PixelHeight", "auto");
                    _super.prototype.SetProperty.call(this, "Style", "max-height:3840px;");
                }
                this.OnLoad();
            }
        };
        return ctrlCollapsibleGroup;
    }(cdeNMI.ctrlTileGroup));
    cdeNMI.ctrlCollapsibleGroup = ctrlCollapsibleGroup;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ThePopup = /** @class */ (function (_super) {
        __extends(ThePopup, _super);
        function ThePopup(pTarget) {
            var _this = _super.call(this, pTarget, null) || this;
            _this.elePopupButtonContent = null;
            _this.tileButOkButton = null;
            _this.tileButYesButton = null;
            _this.tileButNoButton = null;
            _this.mTouchOverlay = null;
            return _this;
        }
        ThePopup.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Popup;
            var tButFlt = "margin:0 auto;";
            this.tileButOkButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=2", "ControlTH=1"], PostInitBag: ["Title=OK", "ClassName=cdeOkButton", "Style=" + tButFlt] });
            this.tileButOkButton.SetProperty("OnClick", function () { return _this.DoOk(); });
            this.tileButYesButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=2", "ControlTH=1"], PostInitBag: ["Title=Yes", "ClassName=cdeYesButton", "Style=" + tButFlt] });
            this.tileButYesButton.SetProperty("OnClick", function (sender, evt, pointer, cookie, parent) { return _this.DoYes(parent, cookie); });
            this.tileButNoButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { PreInitBag: ["ControlTW=2", "ControlTH=1"], PostInitBag: ["Title=No", "ClassName=cdeNoButton", "Style=" + tButFlt] });
            this.tileButNoButton.SetProperty("OnClick", function () { return _this.DoNo(); });
            this.gridPopups = document.getElementById("gridPopups");
            if (!this.gridPopups) {
                this.gridPopups = document.createElement("div");
                this.gridPopups.id = "gridPopups";
                this.gridPopups.className = "cdeScreenPopup";
                this.gridPopups.style.display = "none";
                this.gridPopups.style.height = "0px";
                this.gridPopups.innerHTML = "<div class=\"cdeCenteredPopup\" id=\"gridPopupsInner\"><div class=\"cdePopupContent41\" id=\"cdePopupQuestion\">" + cdeNMI.TL.T("Are you sure?") + "</div><table class=\"MyFullTable\"><tr><td id=\"popupButtonContainer\" class=\"cdeFlexRow\"></td></tr></table></div>";
                var tBody = document.getElementsByTagName("body");
                if (tBody)
                    tBody[0].appendChild(this.gridPopups);
                else
                    document.appendChild(document.createElement("body")).appendChild(this.gridPopups);
            }
            this.gridPopups.addEventListener("animationend", function () { return _this.EndHide(); });
            this.gridPopupsInner = document.getElementById("gridPopupsInner");
            this.gridPopupsInner.style.width = cdeNMI.GetSizeFromTile(6) + "px";
            this.cdePopupQuestion = document.getElementById("cdePopupQuestion");
            this.elePopupButtonContent = document.getElementById("popupButtonContainer");
            this.SetElement(this.elePopupButtonContent);
            return true;
        };
        ThePopup.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "YesLabel") {
                this.tileButYesButton.SetProperty("Text", pValue);
            }
            if (pName === "NoLabel") {
                this.tileButNoButton.SetProperty("Text", pValue);
            }
            if (pName === "OkLabel") {
                this.tileButOkButton.SetProperty("Text", pValue);
            }
        };
        ThePopup.prototype.AddControl = function (pControl) {
            if (pControl)
                this.cdePopupQuestion.appendChild(pControl.GetElement());
        };
        ThePopup.prototype.DoYes = function (pParent, pCookie) {
            this.Hide(true);
            if (this.cdeEventYes) {
                this.cdeEventYes(this, pParent, pCookie);
            }
            this.cdeEventYes = null;
            this.cdeEventNo = null;
        };
        ThePopup.prototype.DoNo = function () {
            this.Hide(true);
            if (this.cdeEventNo) {
                this.cdeEventNo(this);
            }
            this.cdeEventYes = null;
            this.cdeEventNo = null;
        };
        ThePopup.prototype.DoOk = function () {
            this.Hide(true);
            if (this.cdeEventYes) {
                this.cdeEventYes(this);
            }
            this.cdeEventYes = null;
            this.cdeEventNo = null;
        };
        ThePopup.prototype.Hide = function (pPlayAni) {
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 2 && cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.ShowHeader(false);
            this.gridPopups.classList.remove("cde-animate-popup");
            if (pPlayAni)
                this.gridPopups.classList.add("cde-animate-fadeout");
            else
                this.EndHide();
        };
        ThePopup.prototype.EndHide = function () {
            if (this.gridPopups.classList.contains("cde-animate-popup") || !this.gridPopups.classList.contains("cde-animate-fadeout")) {
                return;
            }
            this.gridPopups.classList.remove("cde-animate-fadeout");
            this.gridPopups.style.display = 'none';
            if (cdeNMI.MyNMIPortal)
                cdeNMI.MyNMIPortal.DeleteControl(this.mTouchOverlay);
            this.mTouchOverlay = null;
        };
        ThePopup.prototype.Show = function (pMessageText, bShowOkOnly, pControl, pBackColor, sinkYes, sinkNo, pCookie, pParent) {
            this.Hide(false);
            if (this.mTouchOverlay) {
                if (cdeNMI.MyNMIPortal)
                    cdeNMI.MyNMIPortal.DeleteControl(this.mTouchOverlay);
                this.mTouchOverlay = null;
            }
            if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 2 && cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.ShowHeader(true);
            if (!this.gridPopups)
                return null;
            this.cdeEventYes = null;
            this.cdeEventNo = null;
            if (pMessageText !== '')
                this.cdePopupQuestion.innerHTML = cdeNMI.TL.T(pMessageText);
            this.elePopupButtonContent.innerHTML = "";
            if (!cdeNMI.MyNMIPortal) {
                cdeNMI.MyNMIPortal = cdeNMI.MyTCF.CreateBaseControl();
                cdeNMI.MyNMIPortal.SetElement(document.getElementById("MyNMIPortal"));
            }
            this.mTouchOverlay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TouchOverlay).Create(cdeNMI.MyNMIPortal);
            this.mTouchOverlay.SetProperty("Z-Index", 90);
            if (bShowOkOnly) {
                this.elePopupButtonContent.appendChild(this.tileButOkButton.GetElement());
                if (typeof sinkYes !== "undefined")
                    this.cdeEventYes = sinkYes;
            }
            else {
                if (pCookie) {
                    this.tileButYesButton.SetProperty("Cookie", pCookie);
                    this.tileButYesButton.SetProperty("Parent", pParent);
                }
                this.elePopupButtonContent.appendChild(this.tileButNoButton.GetElement());
                this.elePopupButtonContent.appendChild(this.tileButYesButton.GetElement());
                if (typeof sinkYes !== "undefined")
                    this.cdeEventYes = sinkYes;
                if (typeof sinkNo !== "undefined")
                    this.cdeEventNo = sinkNo;
            }
            this.SetProperty("YesLabel", "Yes");
            this.SetProperty("NoLabel", "No");
            this.SetProperty("OkLabel", "OK");
            switch (pBackColor) {
                case 1:
                    this.gridPopupsInner.className = "cdeCenteredPopup cdePopupBackAlarm";
                    break;
                default:
                    this.gridPopupsInner.className = "cdeCenteredPopup cdePopupBackInfo";
                    break;
            }
            this.AddControl(pControl);
            this.gridPopups.classList.add("cde-animate-popup");
            this.gridPopups.style.display = 'block';
            this.gridPopups.style.height = this.gridPopupsInner.clientHeight + "px";
            //this.gridPopups.style.height = "0px";
            // Velocity(document.querySelectorAll("#gridPopups"), { height: this.gridPopupsInner.clientHeight + "px" }, [1000, 20] );
            //$('#gridPopups').animate({ height: cdeNMI.ThePopup.ActivePopup.gridPopupsInner.clientHeight + "px" }, 1000, "easeOutBounce");
            return this;
        };
        //Backwards Compat
        ThePopup.Show = function (pMessageText, bShowOkOnly, pControl, pBackColor, sinkYes, sinkNo, pCookie, pParent) {
            if (cdeNMI.MyPopUp)
                return cdeNMI.MyPopUp.Show(pMessageText, bShowOkOnly, pControl, pBackColor, sinkYes, sinkNo, pCookie, pParent);
            return null;
        };
        return ThePopup;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ThePopup = ThePopup;
    /**
 * Creates a Toast Control CANNOT BE USED IN FORMS
 *
 * (4.1 Ready!) Static control - CANNOT be Lazy Created!
 */
    var TheToast = /** @class */ (function (_super) {
        __extends(TheToast, _super);
        /////***********************************************
        /////   Toast/Notification Functions
        /////***********************************************
        function TheToast(pTarget) {
            var _this = _super.call(this, pTarget, null) || this;
            _this.mToastTopic = null;
            _this.mToastText = null;
            _this.mToastDebug = null;
            _this.mToastGroup = null;
            _this.mBaseCtrl = null;
            _this.IsAlert = false;
            _this.mRowElement = null;
            return _this;
        }
        TheToast.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Toast;
            this.mBaseCtrl = cdeNMI.MyTCF.CreateBaseControl();
            this.mRowElement = document.getElementById("cdeMessageToast");
            if (!this.mRowElement) {
                this.mRowElement = document.createElement("div");
                this.mRowElement.className = "cdeBrowserBottom";
                this.mRowElement.id = "cdeMessageToast";
                this.mRowElement.style.display = "none";
                this.mRowElement.style.width = "inherit";
                var tBody = document.getElementsByTagName("body");
                if (tBody)
                    tBody[0].appendChild(this.mRowElement);
                else
                    document.appendChild(document.createElement("body")).appendChild(this.mRowElement);
            }
            this.mBaseCtrl.SetElement(this.mRowElement);
            this.mBaseCtrl.SetProperty("Z-Index", 5000);
            this.mBaseCtrl.GetElement().addEventListener("animationend", function () { return _this.EndHide(); });
            this.SetElement(this.mBaseCtrl.GetElement());
            this.mToastGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this);
            this.mToastGroup.SetProperty("ClassName", "cdeToast");
            this.mToastGroup.SetProperty("OnClick", function () {
                //$("#cdeMessageToast").stop()
                _this.HideToast();
                _this.IsAlert = false;
                _this.mBaseCtrl.GetElement().style.display = 'none';
                _this.SetProperty("Visibility", false);
            });
            this.mToastTopic = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.mToastGroup, { PreInitBag: ["Element=div"], PostInitBag: ["ClassName=cdeTextCrop ToastTopic"] }); //  ctrlSmartLabel.Create(this.mToastGroup, null, null, "", "div", false, "cdeTextCrop ToastTopic");
            this.mToastText = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.mToastGroup, { PreInitBag: ["Element=div"], PostInitBag: ["ClassName=cdeTextCrop ToastText"] }); // ctrlSmartLabel.Create(this.mToastGroup, null, null, "", "div", false, "cdeTextCrop ToastText");
            this.mToastDebug = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.mToastGroup, { PreInitBag: ["Element=div"], PostInitBag: ["ClassName=cdeTextCrop ToastDebug"] }); // ctrlSmartLabel.Create(this.mToastGroup, null, null, "", "div", false, "cdeTextCrop ToastDebug");
            this.SetProperty("Visibility", false);
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.RegisterEvent("NMI_TOAST", this.ShowToastMessage);
            return true;
        };
        TheToast.prototype.SetProperty = function (pName, pValue) {
            if (!this.mToastGroup)
                return;
            if (pName !== "Visibility" && this.GetProperty("Visibility") !== true)
                return;
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Text" || pName === "Value" || pName === "iValue")
                this.mToastTopic.SetProperty("Text", pValue);
            else if (pName === "LongText")
                this.mToastText.SetProperty("Value", pValue);
        };
        TheToast.prototype.ShowHideToast = function () {
            if (!this.mToastGroup)
                return;
            if (this.mBaseCtrl.GetElement().style.display === 'none') {
                this.mBaseCtrl.GetElement().style.display = '';
                this.mBaseCtrl.GetElement().style.height = this.mToastGroup.GetElement().style.height;
                this.SetProperty("Visibility", true);
            }
            else {
                this.mBaseCtrl.GetElement().style.display = 'none';
                this.mBaseCtrl.GetElement().style.height = '0px';
                this.ClearDebug();
                this.SetProperty("Visibility", false);
            }
        };
        TheToast.prototype.ShowToastMessage = function (pTopic, pText, pTime) {
            var _this = this;
            if (!this.mToastGroup)
                return;
            if (!this.IsAlert) {
                if (pTopic === "ALERT")
                    this.IsAlert = true;
                else
                    this.mToastTopic.SetProperty("Text", pTopic);
                if (pText)
                    this.mToastText.SetProperty("Text", pText);
                else
                    this.mToastText.SetProperty("Text", "");
                if (this.GetProperty("Visibility") !== true) {
                    this.SetProperty("Visibility", true);
                    this.mBaseCtrl.GetElement().classList.add("cde-animate-bottom");
                    this.mBaseCtrl.GetElement().style.display = '';
                    var tDura = 2000;
                    if (pTime && pTime > 500)
                        tDura = pTime;
                    setTimeout(function () {
                        _this.HideToast();
                    }, tDura);
                    if (cde.MyBaseAssets.MyCommStatus.UserPref && cde.MyBaseAssets.MyCommStatus.UserPref.SpeakToasts)
                        cdeSpeech.talk(pTopic);
                }
            }
        };
        TheToast.prototype.HideToast = function () {
            this.mBaseCtrl.GetElement().classList.remove("cde-animate-bottom");
            this.mBaseCtrl.GetElement().classList.add("cde-animate-fadeout");
        };
        TheToast.prototype.EndHide = function () {
            if (this.mBaseCtrl.GetElement().classList.contains("cde-animate-bottom"))
                return;
            this.mBaseCtrl.GetElement().classList.remove("cde-animate-fadeout");
            this.mBaseCtrl.GetElement().style.display = 'none';
            this.SetProperty("Visibility", false);
            this.IsAlert = false;
        };
        TheToast.prototype.ShowDebug = function (pText) {
            if (this.mToastDebug)
                this.mToastDebug.SetProperty("Value", pText);
        };
        TheToast.prototype.ClearDebug = function () {
            if (this.mToastDebug)
                this.mToastDebug.SetProperty("Value", "");
        };
        return TheToast;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.TheToast = TheToast;
    var ctrlToolTip = /** @class */ (function (_super) {
        __extends(ctrlToolTip, _super);
        function ctrlToolTip(pTarget) {
            return _super.call(this, pTarget, null) || this;
        }
        ctrlToolTip.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.ToolTip;
            return true;
        };
        ctrlToolTip.prototype.Hide = function () {
            //override if necessary
        };
        ctrlToolTip.prototype.Show = function (pCtrlID, pToolTipText) {
            //override if necessary
        };
        return ctrlToolTip;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlToolTip = ctrlToolTip;
    var ctrlUserMenu = /** @class */ (function (_super) {
        __extends(ctrlUserMenu, _super);
        function ctrlUserMenu(pTarget) {
            return _super.call(this, pTarget, null) || this;
        }
        ctrlUserMenu.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.UserMenu;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            var tF = cde.CInt(this.GetSetting("TileFactorY"));
            var iS = "5x";
            if (tF === 0)
                tF = 1;
            else
                iS = "3x";
            this.mOuterGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetControl, { PreInitBag: ["ControlTW=2", "ControlTH=1", "TileFactorX=" + tF, "TileFactorY=" + tF] });
            if (cde.MyBaseAssets.MyServiceHostInfo.IsUserLoggedIn === true) {
                this.mAccountButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mOuterGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=" + tF, "TileFactorY=" + tF], PostInitBag: ["Title=<span class='fa fa-" + iS + "'>&#xf2bd;</span>", "ClassName=MyHeaderButton"] });
                this.mAccountButton.SetProperty("OnClick", function () {
                    cdeNMI.MyScreenManager.TransitToScreen("E15AE1F2-69F3-42DC-97E8-B0CC2A8526A6", true);
                });
            }
            this.mLogoutButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this.mOuterGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=" + tF, "TileFactorY=" + tF], PostInitBag: ["Title=<span class='fa fa-" + iS + "'>&#xf011;</span>", "ClassName=MyHeaderButton"] });
            this.mLogoutButton.SetProperty("OnClick", function (pSender, evt) {
                if (evt.button === 2 && cde.MyBaseAssets.MyServiceHostInfo.WasPortalRequested === true) {
                    cdeNMI.MyScreenManager.TransitToScreen(cde.MyBaseAssets.MyServiceHostInfo.PortalScreen);
                }
                else
                    cdeNMI.ResetBrowserToPortal();
            });
            this.SetElement(this.mOuterGroup.GetElement());
            return true;
        };
        return ctrlUserMenu;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlUserMenu = ctrlUserMenu;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
    * Creates a smart Label
    * SetProperty("Element") before InitControl to use any other element then <span> for the smart logo
    *
    * (4.1 Ready!)
    *
    * Requires "IsInTable" and "Element" in PreInitBag
    */
    var ctrlSmartLabel = /** @class */ (function (_super) {
        __extends(ctrlSmartLabel, _super);
        function ctrlSmartLabel(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyLabelDiv = null;
            _this.MyLabelTextDiv = null;
            _this.MyEditControl = null;
            _this.MyAnchor = null;
            return _this;
        }
        ctrlSmartLabel.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.SmartLabel;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            if (this.MyFieldInfo) {
                this.SetProperty("Format", this.GetSetting("Format"));
                this.SetProperty("IsInTable", this.GetSetting("IsInTable"));
            }
            var HookEvents = false;
            if (this.MyFieldInfo) {
                if (this.GetSetting("Element"))
                    this.MyLabelDiv = document.createElement(this.GetSetting("Element"));
                else {
                    this.MyLabelDiv = document.createElement("div");
                    this.MyLabelDiv.style.width = "100%";
                }
            }
            else {
                if (this.GetSetting("Element"))
                    this.MyLabelDiv = document.createElement(this.GetSetting("Element"));
                else
                    this.MyLabelDiv = document.createElement("span");
            }
            var tS = this.GetSetting("ValueTitle");
            if (tS) {
                this.MyLabelTextDiv = document.createElement("div");
                this.MyLabelTextDiv.style.width = "100%";
                this.MyLabelTextDiv.innerHTML = tS;
                if (this.GetSetting("ValueTitleColor"))
                    this.MyLabelTextDiv.style.color = this.GetSetting("ValueTitleColor");
                if (this.GetSetting("ValueTitleSize"))
                    this.MyLabelTextDiv.style.fontSize = this.GetSetting("ValueTitleSize") + "px";
            }
            this.MyLabelDiv.innerHTML = "&nbsp;";
            this.SetElement(this.MyLabelDiv, HookEvents);
            if (this.MyLabelTextDiv)
                this.MyLabelDiv.parentElement.insertBefore(this.MyLabelTextDiv, this.MyLabelDiv);
            return true;
        };
        ctrlSmartLabel.prototype.SetProperty = function (pName, pValue) {
            if (cde.CBool(_super.prototype.GetProperty.call(this, "IsInTable")) && (pName === "TileHeight" || pName === "TileWidth" || pName === "TileLeft" || pName === "TileTop"))
                return;
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Value" || pName === "Text" || pName === "iValue") {
                if (pName === "Text")
                    pValue = cdeNMI.TL.T(pValue);
                pValue = cdeNMI.GenerateFinalString(pValue, this.GetProperty("Cookie"));
                if (this.MyLabelDiv) {
                    if (this.GetProperty("ThingFriendlyName"))
                        this.MyLabelDiv.innerHTML = this.GetProperty("ThingFriendlyName");
                    else {
                        if (cde.CBool(_super.prototype.GetProperty.call(this, "IsInTable")))
                            this.GetToolTip(this.MyLabelDiv, this.ShowFieldContent(!cde.IsNotSet(pValue) ? pValue.toString() : '', this.MyFieldInfo, this.MyScreenID));
                        else
                            this.MyLabelDiv.innerHTML = this.ShowFieldContent(!cde.IsNotSet(pValue) ? pValue.toString() : '', this.MyFieldInfo, this.MyScreenID);
                    }
                }
                if (this.MyEditControl)
                    this.MyEditControl.SetProperty(pName, pValue);
            }
            else if (pName === "Format") {
                if (this.MyLabelDiv) {
                    var tValue = _super.prototype.GetProperty.call(this, "Value");
                    if (cde.CBool(_super.prototype.GetProperty.call(this, "IsInTable")))
                        this.GetToolTip(this.MyLabelDiv, this.ShowFieldContent(!cde.IsNotSet(tValue) ? tValue.toString() : '', this.MyFieldInfo, this.MyScreenID));
                    else
                        this.MyLabelDiv.innerHTML = this.ShowFieldContent(!cde.IsNotSet(pValue) ? pValue.toString() : '', this.MyFieldInfo, this.MyScreenID);
                }
            }
            else if (pName === "UXID" && this.MyFieldInfo.Type === cdeNMI.cdeControlType.ThingPicker) {
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:THINGRESOLVE:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID") + ';20:' + this.GetProperty("Value"), '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null); //fld Type instead of fldorder  + this.MyFieldInfo.FldOrder
                }
            }
            else if (pName === "ThingFriendlyName") {
                this.MyLabelDiv.innerHTML = pValue;
            }
            else if (pName === "ID") {
                if (this.MyLabelDiv)
                    this.MyLabelDiv.id = pValue;
            }
            else if (pName === "MainBackground" || pName === "MainClassName" || pName === "ContainerClassName") {
                if (this.MyTE)
                    this.MyTE.SetProperty(pName, pValue);
            }
            else if (pName === "Background") {
                if (this.MyTE)
                    this.MyTE.SetProperty("MainBackground", pValue);
                else {
                    if (this.MyLabelDiv)
                        this.MyLabelDiv.style.background = pValue;
                }
            }
            else if (pName === "Foreground") {
                if (this.MyLabelDiv)
                    this.MyLabelDiv.style.color = pValue;
            }
            else if (pName === "TileWidth") {
                if (this.MyLabelDiv) {
                    this.MyLabelDiv.style.width = cdeNMI.GetSizeFromTile(this.GetProperty("TileWidth")).toString() + "px";
                    if (cde.CBool(this.GetProperty("Truncate")))
                        this.MyLabelDiv.style.maxWidth = cdeNMI.GetSizeFromTile(this.GetProperty("TileWidth")).toString() + "px";
                }
            }
            else if (pName === "TileHeight") {
                if (this.MyLabelDiv)
                    this.MyLabelDiv.style.height = cdeNMI.GetSizeFromTile(this.GetProperty("TileHeight")).toString() + "px";
            }
            else if (pName === "Disabled") {
                if (this.MyEditControl)
                    this.MyEditControl.SetProperty(pName, pValue);
            }
            else if (pName === "Truncate" && cde.CBool(pValue) === true) {
                if (this.MyLabelDiv) {
                    this.MyLabelDiv.style.textOverflow = "ellipsis";
                    this.MyLabelDiv.style.overflow = "hidden";
                    this.MyLabelDiv.style.maxWidth = cdeNMI.GetSizeFromTile(this.GetProperty("TileWidth")).toString() + "px";
                }
            }
        };
        ctrlSmartLabel.prototype.GetToolTip = function (pHTMLCtrl, pContent) {
            var _this = this;
            if (!cdeNMI.MyToolTip || !pContent || pContent.length === 0 || !cde.MyBaseAssets.MyCommStatus.UserPref || cde.MyBaseAssets.MyCommStatus.UserPref.ShowToolTipsInTable === false) {
                pHTMLCtrl.innerHTML = pContent;
                return;
            }
            if (pContent.length > cde.CInt(this.GetSetting("FldWidth")) * 7 && pContent.indexOf('-') < 0 && pContent.indexOf(' ') < 0) {
                pHTMLCtrl.innerHTML = "";
                if (!this.MyAnchor) {
                    var tAnchor_1 = "a_" + this.GetProperty("ID");
                    this.MyAnchor = document.createElement("a");
                    this.MyAnchor.id = tAnchor_1;
                    this.MyAnchor.innerHTML = "<i class='fa'>&#xf103;</i>";
                    this.MyAnchor.addEventListener("mouseenter", function () {
                        if (cdeNMI.MyToolTip)
                            cdeNMI.MyToolTip.Show(tAnchor_1, _this.GetProperty("ToolTip") ? _this.GetProperty("ToolTip") : (_this.GetProperty("Text") ? _this.GetProperty("Text") : _this.GetProperty("Value")));
                    }, false);
                }
                pHTMLCtrl.appendChild(this.MyAnchor);
                pHTMLCtrl.insertAdjacentHTML('beforeend', pContent);
            }
            else {
                pHTMLCtrl.innerHTML = pContent;
            }
        };
        ctrlSmartLabel.prototype.sinkValueChanged = function (pCtrl, pValue) {
            // bug fix #1263: ThingFiendlyName property of this control was updated only once on initialization.
            if (pCtrl.MyBaseType === cdeNMI.cdeControlType.ThingPicker) {
                this.SetProperty("ThingFriendlyName", pCtrl.GetProperty("ThingFriendlyName")); // bug #1263: let's keep it updated,
            }
            this.restoreValue(pCtrl, pValue);
            this.SetProperty("Value", pValue);
        };
        ctrlSmartLabel.prototype.restoreValue = function (pCtrl, pValue) {
            cdeNMI.ResetKeyCorder();
            if (cdeNMI.MyTouchOverlay) {
                cdeNMI.MyTouchOverlay.UnregisterEvent("Touched", null);
                this.DeleteControl(cdeNMI.MyTouchOverlay);
                cdeNMI.MyTouchOverlay = null;
            }
            if (this.MyEditControl) {
                this.DeleteControl(this.MyEditControl);
                this.MyEditControl = null;
            }
            this.SetProperty("IsUnhooked", false);
            var pStr = pCtrl.ShowFieldContent(pValue, this.MyFieldInfo);
            try {
                if (cde.CBool(_super.prototype.GetProperty.call(this, "IsInTable")))
                    this.GetToolTip(this.MyLabelDiv, pStr);
                else
                    this.MyLabelDiv.innerHTML = pStr;
            }
            catch (_a) {
                //ignored
            }
        };
        ctrlSmartLabel.prototype.EditControl = function (evt, pPointer, pCtrl) {
            var _this = this;
            if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.SingleCheck) {
                if (cde.CBool(this.GetSetting("IsReadOnly")) || this.IsDisabled)
                    return;
                if (pPointer.IsOnObject) {
                    cdeNMI.StopPointerEvents(evt);
                    if (!cdeNMI.MyTouchOverlay) {
                        this.MyLabelDiv.innerHTML = "";
                        cdeNMI.MyTouchOverlay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TouchOverlay).Create(this);
                        cdeNMI.MyTouchOverlay.RegisterEvent("Touched", function () { return _this.restoreValue(_this, cde.CStr(_this.GetProperty("Value"))); });
                        this.MyEditControl = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleCheck).Create(this, { ScreenID: this.MyScreenID, TRF: this.MyTRF });
                        cdeNMI.MyTouchOverlay.CurrentControl = this;
                        this.MyEditControl.SetProperty("UpdateTable", true);
                        this.MyEditControl.SetProperty("OnValueChanged", function (pCtrl, evt, pVal) { return _this.sinkValueChanged(pCtrl, pVal); });
                    }
                }
            }
            else {
                if ((this.MyFieldInfo.Flags & 2) !== 0 && this.MyFieldInfo.Type !== cdeNMI.cdeControlType.SmartLabel) {
                    if (this.GetSetting("IsReadOnly") === true || this.IsDisabled || (cde.CBool(this.GetSetting("WriteOnce")) === true && cde.CStr(this.GetProperty("Value"))))
                        return;
                    if (!cdeNMI.MyTouchOverlay) {
                        cdeNMI.StopPointerEvents(evt);
                        if (this.MyFieldInfo.Type === cdeNMI.cdeControlType.TileButton) {
                            this.FireEvent(false, "OnClick");
                            return;
                        }
                        this.SetProperty("IsUnhooked", true);
                        this.MyLabelDiv.innerHTML = "";
                        cdeNMI.MyTouchOverlay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TouchOverlay).Create(this);
                        cdeNMI.MyTouchOverlay.RegisterEvent("Touched", function () { return _this.restoreValue(_this, cde.CStr(_this.GetProperty("Value"))); });
                        cdeNMI.MyTouchOverlay.SetProperty("PreventDefault", true);
                        var tE = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry);
                        this.MyTRF.FldInfo["IsInTable"] = this.GetSetting("IsInTable");
                        tE.MyDataView = this.MyDataView;
                        tE.InitControl(this, this.MyTRF, null, this.MyScreenID);
                        tE.SetProperty("Z-Index", 1300);
                        tE.SetProperty("NoTE", true);
                        switch (this.MyTRF.FldInfo.Type) {
                            case cdeNMI.cdeControlType.CheckField:
                                tE.SetProperty("TileWidth", this.MyTRF.FldInfo["Bits"]);
                                break;
                            case cdeNMI.cdeControlType.ComboOption:
                                tE.SetProperty("TileWidth", cde.CInt(this.MyTRF.FldInfo["FldWidth"]) - 1);
                                break;
                            default:
                                tE.SetProperty("TileWidth", this.MyTRF.FldInfo["FldWidth"]);
                                break;
                        }
                        tE.CreateControl("inTableClick", function (pNewControl) {
                            pNewControl.SetProperty("UXID", pNewControl.MyFieldInfo.cdeMID);
                            pNewControl.SetProperty("Z-Index", 1300);
                            pNewControl.SetProperty("OnValueChanged", function (pCtrl, evtName, pVal) {
                                if (!cdeNMI.MyTouchOverlay)
                                    return;
                                _this.SetProperty("LiveOptions", pCtrl.GetProperty("LiveOptions"));
                                if (_this.MyNMIControl) {
                                    _this.MyNMIControl.SetProperty("Value", pVal);
                                }
                                _this.sinkValueChanged(pCtrl, pVal);
                            });
                            ;
                        });
                        this.MyEditControl = tE;
                    }
                }
            }
        };
        //Backwards Compat
        ctrlSmartLabel.Create = function (pTargetControl, pScreenID, pTRF, pLabelText, pHElement, pIsReadOnly, pClass, pCookie, pParent, pIsInTable) {
            var t = new ctrlSmartLabel(pTRF);
            if (pHElement)
                t.SetProperty("Element", pHElement);
            t.SetProperty("IsInTable", cde.CBool(pIsInTable));
            t.InitControl(pTargetControl, pTRF, null, pScreenID);
            if (cde.CBool(pIsReadOnly))
                t.SetProperty("IsReadOnly", pIsReadOnly);
            if (pParent)
                t.SetProperty("Parent", pParent);
            if (pCookie)
                t.SetProperty("Cookie", pCookie);
            if (pLabelText)
                t.SetProperty("iValue", pLabelText);
            if (pClass)
                t.SetProperty("ClassName", pClass);
            return t;
        };
        return ctrlSmartLabel;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlSmartLabel = ctrlSmartLabel;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
* Creates a Tiled Button
*
* (4.1 Ready!)
*/
    var ctrlTileButton = /** @class */ (function (_super) {
        __extends(ctrlTileButton, _super);
        function ctrlTileButton(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.s2 = null;
            _this.divTitle = null;
            _this.divOuter = null;
            _this.divInner = null;
            _this.divControl = null;
            _this.IsDIV = false;
            _this.mFormat = null;
            _this.IsTesla = false;
            _this.mHoverAdd = "cdeButtonHover2";
            return _this;
        }
        ctrlTileButton.Create = function (pTarget, pOnClick, pTitle, pTileX, pTileY, pClass, pStyleInsert, pCookie, pParent, pAllowMT) {
            var tTile = new ctrlTileButton();
            if (pTileX)
                tTile.SetProperty("ControlTW", pTileX);
            if (pTileY)
                tTile.SetProperty("ControlTH", pTileY);
            tTile.InitControl(pTarget);
            if (pTitle) {
                tTile.SetProperty("Title", pTitle);
            }
            if (pCookie)
                tTile.SetProperty("Cookie", pCookie);
            if (pParent)
                tTile.SetProperty("Parent", pParent);
            if (pClass)
                tTile.SetProperty("ClassName", pClass);
            if (pStyleInsert)
                tTile.SetProperty("Style", pStyleInsert);
            if (pOnClick)
                tTile.SetProperty("OnClick", pOnClick);
            if (pAllowMT)
                tTile.SetProperty("PreventDefault", pAllowMT);
            return tTile;
        };
        ctrlTileButton.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.TileButton;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.IsTesla = (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 5);
            if (this.IsTesla)
                this.mHoverAdd = "cdeTesButton";
            this.s2 = document.createElement('button');
            this.s2.type = "button";
            this.SetProperty("ButtonStyle", 0); //custom
            this.SetTileStyle();
            this.RegisterEvent("PointerDown", function (pTarget, pEvent, pPointer) { return _this.eventTileDown(pTarget, pEvent, pPointer); });
            this.RegisterEvent("PointerUp", function (pTarget, pEvent, pPointer) { return _this.eventTileExit(pTarget, pEvent, pPointer); });
            this.SetElement(this.s2, false);
            this.SetProperty("Disabled", (this.MyFieldInfo && (typeof this.MyFieldInfo.Flags !== "undefined") && (this.MyFieldInfo.Flags & 2) === 0)); //Must allow Click if MyFieldInfo is not set
            this.CreateTileButtonContent();
            this.MyContainerElement = this.divInner;
            return true;
        };
        ctrlTileButton.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if (pName === "TileWidth")
                pName = "ControlTW";
            if (pName === "TileHeight")
                pName = "ControlTH";
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "HTML") {
                cdeNMI.cdeParseHTML(this, this.MyTRF, pValue);
            }
            else if (pName === "StaticHTMLUrl") {
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.cdeGetResource(pValue, function (cookie, data) {
                        if (data && !data.startsWith("ERR:")) {
                            while (true) {
                                var tSeg = cdeNMI.ReturnStringSegment(data, "<%P:", "%>");
                                if (tSeg === null)
                                    break;
                                var tTCB = new cdeNMI.TheControlBlock();
                                tTCB.TargetID = "CNMIC" + (cdeNMI.MyNMISettings.IDCounter++);
                                _this.SetProperty(tSeg.Inner + "_TCB", tTCB);
                                var tP = _this.GetProperty(tSeg.Inner);
                                if (!tP)
                                    tP = "";
                                data = data.replace(tSeg.Outer, "<span ID=" + tTCB.TargetID + ">" + tP + "</span>");
                            }
                            _this.GetContainerElement().innerHTML = cdeNMI.GenerateFinalString(data, false, _this.MyTRF);
                        }
                    });
                }
            }
            else if (pName === "HTMLUrl") {
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.cdeGetResource(pValue, function (cookie, data) {
                        if (data && !data.startsWith("ERR:"))
                            cdeNMI.cdeParseHTML(_this, _this.MyTRF, data);
                    });
                }
            }
            else if (pName === "Background") {
                if (this.s2)
                    this.s2.style.backgroundColor = pValue;
            }
            else if (pName === "BackgroundImage") {
                if (this.s2)
                    this.s2.style.backgroundImage = pValue;
            }
            else if (pName === "Foreground") {
                if (this.divTitle)
                    this.divTitle.style.color = pValue;
            }
            else if (pName === "FontSize") {
                if (this.divTitle)
                    this.divTitle.style.fontSize = pValue + "px";
            }
            else if (pName === "TabIndex") {
                if (this.s2) {
                    pValue = cde.CInt(pValue);
                    this.s2.tabIndex = cde.CInt(pValue);
                }
            }
            else if (pName === "Format") {
                var UpdateTitle = false;
                if (!this.mFormat)
                    UpdateTitle = true;
                this.mFormat = pValue;
                if (UpdateTitle) {
                    this.SetProperty("RTitle", this.divTitle.innerHTML);
                    this.SetTileTitle("Text", this.divTitle.innerHTML);
                }
            }
            else if ((pName === "Title" || pName === "Caption" || pName === "Text" || pName === "Value" || pName === "iValue") && pValue) {
                this.SetProperty("RTitle", pValue);
                this.SetTileTitle(pName, pValue);
            }
            else if (pName === "OnPointerDown" && this.s2) {
                if (pValue) {
                    this.PreventManipulation = true;
                    this.HookEvents(false);
                    this.RegisterEvent("PointerDown", pValue);
                }
            }
            else if (pName === "OnClick" && this.s2) {
                if (pValue) {
                    this.PreventManipulation = true;
                    this.HookEvents(false);
                    this.SetHoverStyle(cde.CBool(this.GetProperty("Disabled")));
                    this.RegisterEvent("FireOnClick", this.FireClick);
                }
                //if ((typeof (pValue) === 'string') && pValue.substr(0, 6) === "TTS:<%")
                //    pValue = pValue; ///  pValue = cdeNMI.GenerateFinalString(pValue,this.MyTRF.GetDataRow(), this.MyTRF);
                this.RegisterEvent("OnClick", pValue);
                this.s2.onkeyup = function (evt) {
                    if (evt.keyCode === 13 || evt.keyCode === 32) {
                        _this.WasClicked = false;
                        _this.FireClick(_this, evt);
                    }
                    else if (evt.keyCode === 36 && cdeNMI.MyScreenManager) {
                        cdeNMI.MyScreenManager.GotoStationHome(false);
                    }
                };
            }
            else if (pName === "OnTileDown") {
                this.RegisterEvent("OnTileDown", pValue);
                if (pValue) {
                    this.PreventManipulation = true;
                    this.HookEvents(false);
                }
            }
            else if (pName === "EnableTap") {
                this.PreventManipulation = true;
                this.HookEvents(false);
                this.SetHoverStyle(cde.CBool(this.GetProperty("Disabled")), true);
            }
            else if ((pName === "Disabled" || pName === "DisableClick") && this.s2) {
                this.SetHoverStyle(cde.CBool(pValue));
                if (!this.IsDIV) {
                    this.s2.disabled = cde.CBool(pValue);
                    if (cde.CBool(pValue))
                        this.s2.style.outlineStyle = "none";
                }
                if (pName === "Disabled") {
                    if (this.MyNMIControl)
                        this.MyNMIControl.SetProperty(pName, pValue);
                }
            }
            else if (this.MyNMIControl && pName.substr(0, 1) === ".") {
                if (this.MyNMIControl)
                    this.MyNMIControl.SetProperty(pName.substr(1), pValue);
            }
            else if (pName === "ControlTW" || pName === "TileFactorX") {
                this.SetTileStyle();
                this.SetSizes();
            }
            else if (pName === "ControlTH" || pName === "TileFactorY") {
                this.SetTileStyle();
                this.SetSizes();
            }
            else if ((pName === "ClassName")) {
                this.SetSizes();
            }
            if (pName === "InnerControl" && pValue) {
                this.SetInnerControl(pValue);
            }
            if (pName === "SubTitle" && pValue) {
                this.SetTileTitle("Title", this.GetProperty("RTitle"));
            }
            else if (pName.toLowerCase() === "thumbnail") {
                var tParts = pValue.split(';');
                if (tParts[0].startsWith("FA")) {
                    this.SetTileTitle("Title", this.GetProperty("RTitle"));
                }
                else {
                    var tInsideCtrl = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Picture).Create(null, { PostInitBag: ["iValue=" + tParts[0], "FullWidth=-1", "FullHeight=-1"] }); //cdeNMI.ctrlZoomImage.Create(null, -1, -1, tParts[0]);
                    if (tParts.length > 1) {
                        tInsideCtrl.SetProperty("Opacity", tParts[1]);
                        if (tParts.length > 2)
                            tInsideCtrl.SetProperty("ClassName", tParts[2]);
                    }
                    else
                        tInsideCtrl.SetProperty("Opacity", 0.2);
                    this.SetInnerControl(tInsideCtrl);
                }
            }
        };
        ctrlTileButton.prototype.SetHoverStyle = function (bIsDisabled, bAddForce) {
            if (!this.s2)
                return;
            if (bIsDisabled) {
                if (this.s2.classList.contains(this.mHoverAdd))
                    this.s2.classList.remove(this.mHoverAdd);
                this.SetProperty("TabIndex", -1);
            }
            else {
                if (_super.prototype.GetProperty.call(this, "OnClick") || bAddForce === true) {
                    if (!this.s2.classList.contains(this.mHoverAdd))
                        this.s2.classList.add(this.mHoverAdd);
                }
                else {
                    if (this.s2.classList.contains(this.mHoverAdd))
                        this.s2.classList.remove(this.mHoverAdd);
                }
            }
        };
        ctrlTileButton.prototype.SetTileStyle = function () {
            var pTileX = cde.CInt(this.GetProperty("ControlTW"));
            var pTileY = cde.CInt(this.GetProperty("ControlTH"));
            if (pTileX < 2) {
                if (!this.GetProperty("ClassName") && this.s2)
                    this.s2.className = "cdeLiveTileSmall";
                this.SetProperty("ButtonStyle", 1); //small
            }
            else {
                if (pTileY < pTileX) {
                    if (pTileX > 6) {
                        if (!this.GetProperty("ClassName") && this.s2)
                            this.s2.className = "cdeLiveTileVeryLong";
                        this.SetProperty("ButtonStyle", 4); //Normal
                    }
                    else {
                        if (!this.GetProperty("ClassName") && this.s2)
                            this.s2.className = "cdeLiveTileLong";
                        this.SetProperty("ButtonStyle", 3); //Normal
                    }
                }
                else {
                    if (!this.GetProperty("ClassName") && this.s2)
                        this.s2.className = "cdeLiveTile";
                    this.SetProperty("ButtonStyle", 2); //Normal
                }
            }
            this.SetHoverStyle(cde.CBool(this.GetProperty("Disabled")));
        };
        ctrlTileButton.prototype.SetTileTitle = function (pName, pValue) {
            if (this.mFormat)
                pValue = this.mFormat.format(pValue);
            if (!this.MyNMIControl || this.MyNMIControl.MyBaseType === cdeNMI.cdeControlType.Picture || pName === "Title" || pName === "Text") {
                var tS = this.GetProperty("Thumbnail");
                if (this.divTitle && (pValue || tS)) {
                    if (pValue)
                        pValue = cdeNMI.IconShim(pValue);
                    if (tS && tS.startsWith("FA")) {
                        pValue = "<i class='fa faIcon " + (tS.substr(3, 1) === "S" ? "fa-spin " : "") + "fa-" + tS.substr(2, 1) + "x'>&#x" + tS.substr(4, tS.length - 4) + ";</i></br>" + (pValue ? pValue : "");
                    }
                    var tSubT = this.GetProperty("SubTitle");
                    if (tSubT)
                        pValue += "</br><span style='font-size:10px'>" + tSubT + "</span>";
                    this.divTitle.innerHTML = ((pName === "Text" || pName === "Title") ? cdeNMI.TL.T(pValue) : cdeNMI.IconFAShim(pValue));
                    this.divInner.style.display = '';
                }
            }
            else {
                if (cde.CInt(this.MyNMIControl.MyBaseType) !== cde.CInt(cdeNMI.cdeControlType.Picture)) ///BUG IN TS 2.1: should works 
                    this.MyNMIControl.SetProperty(pName, pValue);
            }
        };
        ctrlTileButton.prototype.CreateTileButtonContent = function () {
            if (!this.s2)
                return;
            this.s2.innerHTML = "";
            this.SetTileStyle();
            this.divOuter = document.createElement("div");
            this.divOuter.style.overflow = "hidden";
            this.divOuter.style.pointerEvents = "none";
            this.divOuter.style.position = "relative";
            this.divInner = document.createElement("div");
            this.divInner.style.zoom = cde.MyBaseAssets.MyServiceHostInfo.TileScale.toString();
            this.divTitle = document.createElement("div");
            if (this.GetProperty("Value"))
                this.divTitle.innerHTML = this.GetProperty("Value");
            else if (this.GetProperty("Title"))
                this.divTitle.innerHTML = this.GetProperty("Title");
            this.divInner.appendChild(this.divTitle);
            this.divOuter.appendChild(this.divInner);
            this.SetSizes();
            this.s2.appendChild(this.divOuter);
        };
        ctrlTileButton.prototype.SetSizes = function () {
            if (!this.divOuter)
                return;
            this.SetInitialSize();
            this.divOuter.style.width = "inherit";
            this.divOuter.style.height = "inherit";
            this.divInner.style.width = "inherit";
            this.divInner.style.zIndex = "10";
            this.divOuter.className = "cdeFlexRow cdeFlexCenter";
            this.divInner.className = "cdeFlexO0";
            if (this.GetProperty("ClassName"))
                this.s2.className = this.GetProperty("ClassName");
            if (this.divTitle) {
                if (this.GetProperty("ClassName")) {
                    var tCls = this.GetProperty("ClassName").split(' ');
                    var tFinCls = "";
                    for (var i = 0; i < tCls.length; i++) {
                        tFinCls += tCls[i] + "inner ";
                    }
                    this.divTitle.className = tFinCls;
                }
                else {
                    if (this.GetProperty("ButtonStyle") === "2") {
                        this.SetButtonStyle2();
                    }
                    else {
                        if (this.GetProperty("ButtonStyle") === "1")
                            this.divTitle.className = "cdeTileTextSmall";
                        else
                            this.divTitle.className = "cdeTileTextNoImg";
                    }
                }
            }
            this.SetHoverStyle(cde.CBool(this.GetProperty("Disabled")));
        };
        ctrlTileButton.prototype.SetButtonStyle2 = function () {
            this.divTitle.className = "cdeTileText";
            this.divInner.className = "cdeFlexO2";
            this.divOuter.className = "cdeFlexRow cdeFlexCenter cdeFlexStart";
        };
        ctrlTileButton.prototype.SetInnerControl = function (pControl) {
            if (this.divTitle && pControl) {
                this.MyNMIControl = pControl;
                this.divControl = document.createElement("div");
                this.divControl.className = "cdeFlexRow cdeFlexCenter";
                this.divControl.style.width = "inherit";
                this.divControl.style.position = "absolute";
                this.divControl.style.left = "0";
                this.divControl.style.top = "0";
                if (this.divTitle.innerHTML !== "") {
                    this.divInner.style.alignSelf = "flex-end";
                    this.divInner.style.marginBottom = "5px";
                }
                this.divControl.appendChild(this.MyNMIControl.GetElement());
                this.divOuter.appendChild(this.divControl);
            }
        };
        ///EVENTS /////
        ctrlTileButton.prototype.eventHoverIn = function (eventObject) {
            this.ShowHoverIn(eventObject.target);
        };
        ctrlTileButton.prototype.ShowHoverIn = function (eventObject) {
            if (!(eventObject instanceof HTMLButtonElement))
                return;
            var tHovClass = this.GetProperty("HoverClassName");
            if (!tHovClass)
                tHovClass = "cdeButtonHover2";
            if (tHovClass)
                eventObject.classList.add(tHovClass);
        };
        ctrlTileButton.prototype.eventHoverOut = function (eventObject) {
            this.ShowHoverOut(eventObject.target);
        };
        ctrlTileButton.prototype.ShowHoverOut = function (eventObject) {
            if (!(eventObject instanceof HTMLButtonElement))
                return;
            var tHovClass = this.GetProperty("HoverClassName");
            if (!tHovClass)
                tHovClass = "cdeButtonHover2";
            if (tHovClass && eventObject.classList.contains(tHovClass))
                eventObject.classList.remove(tHovClass);
        };
        ctrlTileButton.prototype.eventTileDown = function (pTarget, pEvent, pPointer) {
            if (!this.GetProperty("Disabled")) {
                if (pPointer.IsOnObject || cde.CBool(this.GetProperty("IgnoreHitTarget"))) {
                    this.WasClicked = false;
                    this.SetProperty("IsDown", true);
                    this.ShowHoverIn(this.s2);
                    this.FireEvent(true, "OnTileDown", pEvent, pPointer);
                }
            }
        };
        ctrlTileButton.prototype.eventTileExit = function (pTarget, pEvent, pPointer) {
            if (!this.GetProperty("Disabled")) {
                this.SetProperty("IsDown", false);
                this.ShowHoverOut(this.s2);
                if ((pPointer.IsOnObject || cde.CBool(this.GetProperty("IgnoreHitTarget"))) && pPointer.PathLength() < cdeNMI.MyNMISettings.DeadPathLength) {
                    this.FireClick(this, pEvent);
                }
            }
        };
        ctrlTileButton.prototype.FireClick = function (pSender, pEvent) {
            var _this = this;
            if (this.HasEvent("OnClick") && !this.WasClicked) {
                if (this.GetProperty("AreYouSure")) {
                    if (cdeNMI.MyPopUp)
                        cdeNMI.MyPopUp.Show(this.GetProperty("AreYouSure"), false, null, 1, function () {
                            pEvent.AYSFired = true;
                            _this.DoFireClick(_this, pEvent);
                        });
                }
                else
                    this.DoFireClick(this, pEvent);
            }
        };
        ctrlTileButton.prototype.OnNUITag = function (pTag, pCookie) {
            this.WasClicked = false;
            this.FireClick(null);
        };
        return ctrlTileButton;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTileButton = ctrlTileButton;
    var ctrlLogoButton = /** @class */ (function (_super) {
        __extends(ctrlLogoButton, _super);
        function ctrlLogoButton(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.MyLogoParts = Array();
            return _this;
        }
        ctrlLogoButton.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.LogoButton;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.tLogoGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(null);
            this.tLogoGroup.SetProperty("IsDivOnly", true);
            var tF = cde.CInt(this.GetSetting("TileFactorY"));
            if (tF < 1)
                tF = 1;
            var tS = cde.CInt(this.GetSetting("TileHeight"));
            if (tS < 1)
                tS = 1;
            this.tLogoGroup.SetProperty("Style", "font-size:" + (cdeNMI.GetSizeFromTile(tS) / tF) + "px");
            //this.MyLogoParts[0] = cdeNMI.MyTCF.CreateNMIControl(cdeControlType.SmartLabel).Create(tLogoGroup, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorX=" + cde.CInt(this.GetSetting("TileFactorX")), "TileFactorY=" + cde.CInt(this.GetSetting("TileFactorY"))], PostInitBag: ["ClassName=cl cl-A"] });
            //this.MyLogoParts[0].SetProperty("Foreground", "#52D0EB");
            this.MyLogoParts[0] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-B cdeButtonHover2"] });
            this.MyLogoParts[0].SetProperty("Foreground", "#1DA3D1");
            this.MyLogoParts[1] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-C cdeButtonHover2"] });
            this.MyLogoParts[1].SetProperty("Foreground", "#1DA3D1");
            this.MyLogoParts[2] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-D cdeButtonHover2"] });
            this.MyLogoParts[2].SetProperty("Foreground", "#1DA3D1");
            this.MyLogoParts[3] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-E cdeButtonHover2"] });
            this.MyLogoParts[3].SetProperty("Foreground", "#CCCCCC");
            this.MyLogoParts[4] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-F cdeButtonHover2"] });
            this.MyLogoParts[4].SetProperty("Foreground", "#52D0EB");
            this.MyLogoParts[5] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-G cdeButtonHover2"] });
            this.MyLogoParts[5].SetProperty("Foreground", "#CCCCCC");
            this.MyLogoParts[6] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-H cdeButtonHover2"] });
            this.MyLogoParts[6].SetProperty("Foreground", "#52D0EB");
            this.MyLogoParts[7] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-I cdeButtonHover2"] });
            this.MyLogoParts[7].SetProperty("Foreground", "#52D0EB");
            this.MyLogoParts[8] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-J cdeButtonHover2"] });
            this.MyLogoParts[8].SetProperty("Foreground", "#CCCCCC");
            this.MyLogoParts[9] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.tLogoGroup, { PreInitBag: ["Element=span"], PostInitBag: ["ClassName=cl cl-K cdeButtonHover2"] });
            this.MyLogoParts[9].SetProperty("Foreground", "#1DA3D1");
            this.SetProperty("InnerControl", this.tLogoGroup);
            return true;
        };
        ctrlLogoButton.prototype.SetProperty = function (pName, pValue) {
            if (pName === "Value" || pName === "iValue") {
                //Dont set any value!!
                return;
            }
            else if (pName === "FontSize") {
                this.tLogoGroup.SetProperty("Style", "font-size:" + cde.CInt(pValue) + "px");
            }
            else if (pName === "Relay") {
                this.MyLogoParts[9].SetProperty("Foreground", this.GetState(cde.CInt(pValue)));
            }
            else if (pName === "LogoState") {
                for (var i = 0; i < 10; i++)
                    this.MyLogoParts[i].SetProperty("Foreground", this.GetState(cde.CInt(pValue)));
            }
            else if (pName === "LogoColor") {
                for (var i = 0; i < 10; i++)
                    this.MyLogoParts[i].SetProperty("Foreground", pValue);
            }
            else if (pName === "Reset") {
                this.MyLogoParts[0].SetProperty("Foreground", "#1DA3D1");
                this.MyLogoParts[1].SetProperty("Foreground", "#1DA3D1");
                this.MyLogoParts[2].SetProperty("Foreground", "#1DA3D1");
                this.MyLogoParts[3].SetProperty("Foreground", "#CCCCCC");
                this.MyLogoParts[4].SetProperty("Foreground", "#52D0EB");
                this.MyLogoParts[5].SetProperty("Foreground", "#CCCCCC");
                this.MyLogoParts[6].SetProperty("Foreground", "#52D0EB");
                this.MyLogoParts[7].SetProperty("Foreground", "#52D0EB");
                this.MyLogoParts[8].SetProperty("Foreground", "#CCCCCC");
                this.MyLogoParts[9].SetProperty("Foreground", "#1DA3D1");
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
        };
        ///"gray;green;yellow;red;blue;brown;purple;black";
        ctrlLogoButton.prototype.GetState = function (pStatusLevel) {
            switch (pStatusLevel) {
                case 1: return "green";
                case 2: return "yellow";
                case 3: return "red";
                case 4: return "blue";
                case 5: return "brown";
                case 6: return "purple";
                case 7: return "black";
            }
            return "#ccc";
        };
        return ctrlLogoButton;
    }(ctrlTileButton));
    cdeNMI.ctrlLogoButton = ctrlLogoButton;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
* Creates a Tile Entry used in Forms
*
* (3.2 Ready!)
*/
    var ctrlTileEntry = /** @class */ (function (_super) {
        __extends(ctrlTileEntry, _super);
        function ctrlTileEntry(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.MyControlTypeName = null;
            _this.MyTEContainer = null;
            _this.MyTEContent = null; // ctrlTileGroup = null;
            _this.mOldClassName = null;
            _this.mTELabel = null; // ctrlTileGroup = null;
            _this.mTEContentOuter = null;
            return _this;
        }
        ctrlTileEntry.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.TileEntry;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyTEContainer = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetControl, { ScreenID: pScreenID });
            this.MyTEContainer.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter cdeTileContainer");
            if (pTRF && pTRF.FldInfo) {
                this.MyTEContainer.GetElement().setAttribute("cdefo", cde.CStr(pTRF.FldInfo.FldOrder));
                this.MyTEContainer.GetElement().setAttribute("cdemid", cde.GuidToString(pTRF.FldInfo.cdeMID));
            }
            //this.MyTEContainer.GetElement().style.zoom = cde.MyBaseAssets.MyServiceHostInfo.TileScale.toString();
            this.mTELabel = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.MyTEContainer, { ScreenID: pScreenID });
            this.mTELabel.SetProperty("LabelElement", "span");
            this.mTELabel.SetProperty("LabelClassName", "cdeTileEntryLabel");
            this.mTELabel.SetProperty("ClassName", "cdeFlexLabel");
            this.mTEContentOuter = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.MyTEContainer, { ScreenID: pScreenID });
            this.mTEContentOuter.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter cdeFlexStart cdeControlContainer");
            this.MyTEContent = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.mTEContentOuter, { ScreenID: pScreenID });
            this.MyTEContent.SetProperty("ClassName", "cdeTileEntryText");
            this.SetElement(this.MyTEContainer.GetElement(), false, this.MyTEContent.GetElement(), true);
            if (pTRF.FldInfo["RenderTarget"]) {
                this.SetProperty("Visibility", false);
            }
            var tTileWidth = cde.CInt(this.GetSetting("TileWidth"));
            if (tTileWidth <= 0) {
                if (cde.CBool(this.GetSetting("InheritWidth"))) {
                    if (pTargetControl.GetProperty("ControlTW"))
                        tTileWidth = pTargetControl.GetProperty("ControlTW");
                    else
                        tTileWidth = Math.round(pTargetControl.GetElement().clientWidth / cdeNMI.GetSizeFromTile(1));
                }
                else {
                    if (tTileWidth === 0)
                        tTileWidth = 6;
                }
            }
            //if (cde.CInt(this.GetSetting("TileWidth")) >= 0)
            this.SetProperty("TileWidth", tTileWidth);
            var tTileHeight = 1;
            if (cde.CInt(this.GetSetting("TileHeight")) > 0)
                tTileHeight = this.GetSetting("TileHeight");
            if (cde.CInt(this.GetSetting("TileHeight")) >= 0)
                this.SetProperty("TileHeight", tTileHeight);
            this.MyControlTypeName = pTRF.FldInfo["ControlType"];
            if (this.MyControlTypeName) {
                var tN = cdeNMI.MyTCF.GetControlByName(this.MyControlTypeName);
                if (tN) {
                    var tNA = tN.split(':');
                    this.MyControlTypeName = tNA[0];
                    if (tNA.length > 1)
                        this.MyEngineName = tNA[1];
                }
            }
            if (cde.CInt(this.MyControlTypeName) > 0) {
                this.MyControlTypeName = cdeNMI.MyTCF.GetControlType(pTRF.FldInfo.Type);
            }
            if (!this.MyEngineName)
                this.MyEngineName = pTRF.FldInfo["EngineName"];
            if (pTRF.FldInfo.Type !== cdeNMI.cdeControlType.UserControl) {
                this.MyEngineName = cdeNMI.eTheNMIEngine;
                this.MyControlTypeName = cdeNMI.MyTCF.GetControlType(pTRF.FldInfo.Type);
                if (!this.MyControlTypeName)
                    this.MyControlTypeName = "cdeNMI.ctrlEditBox";
            }
            if (!this.MyControlTypeName || this.MyControlTypeName === "")
                this.MyControlTypeName = pTRF.FldInfo["DefaultValue"];
            if (!this.MyControlTypeName) {
                this.SetProperty("PlaceHolder", "Missing Type for UserControl");
                return true;
            }
            if (!pTRF.FldInfo["RenderTarget"] && !pTRF.FldInfo["PlaceHolder"])
                this.SetProperty("PlaceHolder", "(Waiting for control #" + pTRF.FldInfo.FldOrder + ": " + this.MyControlTypeName + ")");
            else {
                if (!pTRF.FldInfo["PlaceHolder"])
                    this.SetProperty("PlaceHolder", pTRF.FldInfo["PlaceHolder"]);
            }
            switch (pTRF.FldInfo.Type) { //TODO: I dont want this here but in the ctrlTable - it needs to decide how it looks inside 
                case cdeNMI.cdeControlType.Table:
                    if (cde.IsNotSet(pTRF.FldInfo["ClassName"]))
                        pTRF.FldInfo["ClassName"] = "CMyTable";
                    break;
                default:
                    break;
            }
            pTargetControl.RegisterEvent("OnLoaded", function () {
                _this.MyTEContent.FireEvent(true, "OnLoaded");
            });
            this.RegisterEvent("Resize", function (sender, newSize) {
                if (_this.MyNMIControl)
                    _this.MyNMIControl.FireEvent(true, "Resize", newSize);
            });
            return true;
        };
        ctrlTileEntry.prototype.SetProperty = function (pName, pValue) {
            if (pName === "IsOwnerDown") {
                if (pValue === true) {
                    if (this.GetProperty(pName) === true)
                        return;
                    this.mOldClassName = this.MyTEContainer.GetElement().className;
                    this.MyTEContainer.GetElement().className += " cdeNodeGone";
                }
                else {
                    if (this.GetProperty(pName) !== true)
                        return;
                    this.MyTEContainer.GetElement().className = this.mOldClassName;
                }
            }
            //Properties only on TE not propagated anywhere
            if (pName === "IsInTable") {
                _super.prototype.SetProperty.call(this, pName, pValue);
                return;
            }
            if (pName === "Visibility") {
                this.MyTEContainer.SetProperty(pName, pValue);
                return;
            }
            if (pName === "MinTileWidth" && cde.CInt(pValue) > 0) {
                _super.prototype.SetProperty.call(this, pName, pValue);
                pName = "TileWidth";
            }
            else if (pName === "MinTileHeight" && pValue) {
                _super.prototype.SetProperty.call(this, pName, pValue);
                pName = "TileHeight";
            }
            //Properties on TE but will be propageted
            if (pName === "NoTE" || pName === "TileWidth" || pName === "TileHeight") {
                _super.prototype.SetProperty.call(this, pName, pValue);
            }
            else if (pName === "Z-Index" && this.MyTEContent) {
                pValue = cde.CInt(pValue);
                this.MyTEContent.SetProperty("Z-Index", pValue);
            }
            ///Properties for Forms but not Tables
            if (pName === "IsAbsolute" || pName === "Top" || pName === "Left" || pName === "TileTop" || pName === "TileLeft") {
                if (cde.CBool(this.GetProperty("IsInTable")))
                    return;
                _super.prototype.SetProperty.call(this, pName, pValue);
                return;
            }
            if (pName === "TileWidth" || pName === "NoTE") {
                if (cde.CInt(this.GetProperty("TileWidth")) < cde.CInt(this.GetProperty("MinTileWidth")))
                    return;
                var tScale = 1;
                if (cde.CInt(this.GetProperty("TileFactorX")) > 1)
                    tScale = cde.CInt(this.GetProperty("TileFactorX"));
                if (cde.CBool(this.GetProperty("NoTE")) || cde.CInt(this.GetProperty("TileWidth")) < (3 * tScale)) {
                    this.mTELabel.SetProperty("Visibility", false);
                    this.MyTEContainer.SetProperty("TileWidth", cde.CInt(this.GetProperty("TileWidth")));
                    this.mTEContentOuter.SetProperty("TileWidth", cde.CInt(this.GetProperty("TileWidth")));
                    _super.prototype.SetProperty.call(this, "ControlTW", cde.CInt(this.GetProperty("TileWidth")));
                }
                else {
                    this.mTELabel.SetProperty("Visibility", true);
                    this.mTELabel.SetProperty("TileWidth", 2);
                    this.mTEContentOuter.SetProperty("TileWidth", cde.CInt(this.GetProperty("TileWidth")) - 2);
                    _super.prototype.SetProperty.call(this, "ControlTW", cde.CInt(this.GetProperty("TileWidth")) - 2);
                }
                if (this.MyNMIControl) {
                    this.MyNMIControl.SetProperty("ControlTW", cde.CInt(this.GetProperty("ControlTW")));
                }
                return;
            }
            else if (pName === "TileHeight") {
                if (cde.CInt(pValue) < cde.CInt(this.GetProperty("MinTileHeight")))
                    return;
                this.MyTEContainer.SetProperty("TileHeight", cde.CInt(pValue));
                this.mTEContentOuter.SetProperty("TileHeight", cde.CInt(pValue));
                this.mTELabel.SetProperty("TileHeight", cde.CInt(pValue));
                _super.prototype.SetProperty.call(this, "ControlTH", cde.CInt(this.GetProperty("TileHeight")));
                if (this.MyNMIControl) {
                    this.MyNMIControl.SetProperty("ControlTH", cde.CInt(this.GetProperty("ControlTH")));
                }
                return;
            }
            else if (pName === "TileFactorX") {
                this.MyTEContainer.SetProperty("TileFactorX", cde.CInt(pValue));
                this.mTEContentOuter.SetProperty("TileFactorX", cde.CInt(pValue));
                this.mTELabel.SetProperty("TileFactorX", cde.CInt(pValue));
                //return;
            }
            else if (pName === "TileFactorY") {
                this.MyTEContainer.SetProperty("TileFactorY", cde.CInt(pValue));
                this.mTEContentOuter.SetProperty("TileFactorY", cde.CInt(pValue));
                this.mTELabel.SetProperty("TileFactorY", cde.CInt(pValue));
                //return;
            }
            else if (pName === "ContainerStyle" && this.mTELabel) {
                this.MyTEContainer.SetProperty("Style", pValue);
            }
            else if (pName === "ContainerClassName" && this.MyTEContainer) {
                this.MyTEContainer.SetProperty("ClassName", pValue);
                return;
            }
            else if (pName === "LabelClassName" && this.mTELabel) {
                this.mTELabel.SetProperty("ClassName", pValue);
                this.mTELabel.SetProperty("LabelClassName", pValue);
                return;
            }
            else if (pName === "LabelForeground" && this.mTELabel) {
                this.mTELabel.SetProperty("LabelForeground", pValue);
                return;
            }
            else if (pName === "LabelFontSize" && this.mTELabel) {
                this.mTELabel.SetProperty("LabelFontSize", pValue);
                return;
            }
            else if ((pName === "LabelBackground" || pName === "CaptionBackground") && this.mTELabel) {
                this.mTELabel.SetProperty("CaptionBackground", pValue);
                return;
            }
            else if (pName === "ContentOuterClassName" && this.mTEContentOuter) {
                this.mTEContentOuter.SetProperty("ClassName", pValue);
                return;
            }
            else if (pName === "MainClassName" && this.MyTEContent) {
                this.MyTEContent.SetProperty("ClassName", pValue);
                return;
            }
            else if (pName === "MainBackground" && this.MyTEContent) {
                this.MyTEContent.SetProperty("Background", pValue);
                return;
            }
            else if (pName === "VerticalAlignment" && this.MyTEContent && pValue) {
                this.MyTEContent.GetElement().className = 'cdeTileEntryText cdeFlexRow';
                switch (pValue.toString().toLowerCase()) {
                    case "top":
                        this.MyTEContent.GetElement().style.alignItems = 'flex-start';
                        break;
                    case "bottom":
                        this.MyTEContent.GetElement().style.alignItems = 'flex-end';
                        break;
                    default:
                        this.MyTEContent.GetElement().style.alignItems = 'center';
                        break;
                }
                return;
            }
            else if ((pName === "Label" || pName === "Title") && this.mTELabel) {
                this.mTELabel.SetProperty("Label", pValue);
                if (!cde.CBool(this.GetProperty("NoTE")))
                    return;
            }
            else if (pName === "PlaceHolder" && this.MyTEContent) {
                this.MyTEContent.SetProperty("Label", pValue);
                return;
            }
            if (this.MyNMIControl) {
                this.MyNMIControl.SetProperty(pName, pValue);
            }
        };
        ctrlTileEntry.prototype.OnLoad = function (bIsVisible) {
            if (this.MyNMIControl)
                this.MyNMIControl.OnLoad(bIsVisible);
            _super.prototype.OnLoad.call(this, bIsVisible);
        };
        ctrlTileEntry.prototype.OnUnload = function () {
            if (this.MyNMIControl)
                this.MyNMIControl.OnUnload();
            _super.prototype.OnUnload.call(this);
        };
        ctrlTileEntry.prototype.GetProperty = function (pName) {
            if ((pName === "DataItem" || pName === "iValue" || pName === "Value") && this.MyNMIControl) {
                return this.MyNMIControl.GetProperty(pName);
            }
            return _super.prototype.GetProperty.call(this, pName);
        };
        ctrlTileEntry.prototype.CreateControl = function (tFldID, callback) {
            var _this = this;
            if (!cdeNMI.MyTCF) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "TileEntry:CreateControl", "MyTCF not initialized!");
                return null;
            }
            return cdeNMI.MyTCF.CreateControlLazy(this, this.MyEngineName, this.MyControlTypeName, function (tgtCtrl, e, cookieTFldID) {
                if (e.InitControl(tgtCtrl, _this.MyTRF, null, _this.MyScreenID)) {
                    try {
                        e.SetTE(_this);
                        cdeNMI.MyTCF.SetControlEssentials(_this, e);
                        _this.SetProperty("PlaceHolder", null);
                        cdeNMI.AddFieldComment(_this.MyTEContent.GetElement(), _this.MyFieldInfo);
                        e.PostCreate(_this);
                        if (callback)
                            callback(e, cookieTFldID);
                    }
                    catch (eee) {
                        _this.SetProperty("PlaceHolder", eee);
                    }
                }
            }, tFldID);
        };
        ctrlTileEntry.prototype.ApplySkin = function () {
            if (this.MyNMIControl)
                this.MyNMIControl.ApplySkin();
        };
        //Backward compat
        ctrlTileEntry.Create = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var tTile = new ctrlTileEntry(pTRF);
            if (pTRF && pTRF.FldInfo && (!pTRF.FldInfo.Type || pTRF.FldInfo.Type === 0))
                pTRF.FldInfo.Type = cdeNMI.cdeControlType.SingleEnded; //If no Type is specified use 1 (Edit). Might be removed!
            tTile.InitControl(pTargetControl, pTRF, pPropertyBag, pScreenID);
            return tTile;
        };
        return ctrlTileEntry;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTileEntry = ctrlTileEntry;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ctrlStatusLight = /** @class */ (function (_super) {
        __extends(ctrlStatusLight, _super);
        function ctrlStatusLight() {
            var _this = _super.call(this, null, null) || this;
            _this.bIsOn = false;
            return _this;
        }
        ctrlStatusLight.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.statusLightHolder = new cdeNMI.ctrlTileGroup(pTRF);
            this.statusLightHolder.InitControl(pTargetControl);
            this.statusLightHolder.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter");
            this.statusLightHolder.MyRootElement.style.width = "inherit";
            this.statusLightHolder.MyRootElement.style.height = "inherit";
            var tWid = cde.CInt(this.GetSetting("TileWidth"));
            var tHei = cde.CInt(this.GetSetting("TileHeight"));
            var tIsInTable = false;
            if (pTRF && pTRF.FldInfo) {
                if (pTRF.FldInfo["ControlTW"]) {
                    tWid = pTRF.FldInfo["ControlTW"];
                    this.statusLightHolder.SetProperty("TileWidth", tWid);
                }
                if (pTRF.FldInfo["ControlTH"]) {
                    tHei = pTRF.FldInfo["ControlTH"];
                    this.statusLightHolder.SetProperty("TileHeight", tHei);
                }
                tIsInTable = cde.CBool(pTRF.FldInfo["IsInTable"]);
            }
            if (!tIsInTable) {
                this.statusLightTitle = new cdeNMI.ctrlSmartLabel();
                this.statusLightTitle.InitControl(this.statusLightHolder);
                this.statusLightTitle.SetProperty("Visibility", false);
            }
            this.mShape = new cdeNMI.ctrlShape();
            this.mShape.MyFieldInfo = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.StatusLight, tWid, null, 0);
            this.mShape.SetProperty("AutoAdjust", true);
            this.mShape.InitControl(this.statusLightHolder);
            if (tWid)
                this.mShape.SetProperty("ControlTW", tWid);
            if (tHei)
                this.mShape.SetProperty("ControlTH", tHei);
            var tFX = cde.CInt(this.GetSetting("TileFactorX"));
            if (tFX > 1)
                this.mShape.SetProperty("TileFactorX", tFX);
            tFX = cde.CInt(this.GetSetting("TileFactorY"));
            if (tFX > 1) {
                this.mShape.SetProperty("TileFactorY", tFX);
            }
            this.SetProperty("iValue", 0);
            this.SetElement(this.statusLightHolder.GetElement());
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            return true;
        };
        ctrlStatusLight.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            var bIsDirty = false;
            if ((pName === "Value" || pName === "iValue" || pName === "LightColor")) {
                bIsDirty = true;
            }
            else if (pName === "SubTitle" && this.statusLightTitle) {
                this.statusLightTitle.SetProperty("Text", pValue);
                this.statusLightTitle.SetProperty("Visibility", true);
            }
            else if (pName === "Foreground" && this.statusLightTitle) {
                this.statusLightTitle.SetProperty(pName, pValue);
            }
            else if (pName === "IsBlinking" && cde.CInt(pValue) > 0) {
                if (!this.Blinker) {
                    this.Blinker = setInterval(function () {
                        if (cde.CInt(_this.GetProperty("IsBlinking")) === 0) {
                            clearInterval(_this.Blinker);
                            _this.Blinker = null;
                            return;
                        }
                        if (_this.bIsOn)
                            _this.SetProperty("Opacity", "0.1");
                        else
                            _this.SetProperty("Opacity", "1");
                        _this.bIsOn = !_this.bIsOn;
                    }, cde.CInt(pValue));
                }
            }
            else if ((pName === "ControlTW" || pName === "ControlTH" || pName === "TileWidth" || pName === "TileHeight" || pName === "TileFactorX" || pName === "TileFactorY") && this.mShape && this.mShape) {
                pValue = cde.CInt(pValue);
                this.mShape.SetProperty(pName, pValue);
                bIsDirty = true;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (bIsDirty && this.mShape && this.mShape.mCanvas) {
                var tL = this.mShape.mCanvas.MyWidth;
                var tH = this.mShape.mCanvas.MyHeight;
                if (tL === 0 || tH === 0)
                    return;
                var tW = tL;
                if (tH < tL)
                    tW = tH;
                var tM = 5;
                if (this.GetProperty("SubTitle"))
                    tM = 20;
                var tFillColor = this.GetProperty("LightColor");
                if (tFillColor) {
                    this.myShapeDraw = [{ Type: 4, Fill: tFillColor, Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                }
                else {
                    switch (cde.CInt(this.GetProperty("Value")) % 8) {
                        default:
                            this.myShapeDraw = [{
                                    Type: 4, Fill: "gradientc(#808080, #FFFFFF)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true
                                }];
                            break;
                        case 1:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#008000, #00FF00)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                        case 2:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#808000, #FFFF00)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                        case 3:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#800000, #FF0000)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                        case 4:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#000080, #0000FF)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                        case 5:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#000000, #6f4200)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                        case 6:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#400080, #8000FF)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                        case 7:
                            this.myShapeDraw = [{ Type: 4, Fill: "gradientc(#000000, #808080)", Width: (tW / 2) - tM, Top: tH / 2, Left: tL / 2, Visibility: true, IsTemp: true }];
                            break;
                    }
                }
                if (this.mShape) {
                    this.mShape.SetProperty("DataContext", this.myShapeDraw);
                }
            }
        };
        ctrlStatusLight.prototype.OnLoad = function () {
            this.ApplySkin();
        };
        ctrlStatusLight.prototype.ApplySkin = function () {
            this.mShape.ApplySkin();
            this.SetProperty("iValue", this.GetProperty("Value"));
        };
        return ctrlStatusLight;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlStatusLight = ctrlStatusLight;
    /**
* Creates the standard About Button
V3.2 Ready
*/
    var ctrlAboutButton = /** @class */ (function (_super) {
        __extends(ctrlAboutButton, _super);
        function ctrlAboutButton() {
            return _super.call(this, null, null) || this;
        }
        ctrlAboutButton.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.SetProperty("NoTE", true);
            this.SetProperty("MinTileHeight", -1);
            this.SetProperty("MinTileWidth", 6);
            //container
            this.aboutButtonContainer = new cdeNMI.ctrlTileGroup(pTRF);
            this.aboutButtonContainer.InitControl(pTargetControl);
            this.aboutButtonContainer.SetProperty("TileWidth", 6);
            this.aboutButtonContainer.SetProperty("Background", "rgba(128,128,128,.1)");
            this.aboutButtonContainer.SetProperty("ClassName", "cdeFlexCol cdeAboutBox");
            //top line
            this.topName = new cdeNMI.ctrlTileGroup();
            this.topName.InitControl(this.aboutButtonContainer);
            this.topName.SetProperty("TileWidth", 6);
            this.topName.SetProperty("TileHeight", 2);
            this.topName.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter");
            this.topName.HookEvents(true);
            this.topName.RegisterEvent("PointerUp", function () {
                if (_this.GetProperty("TargetLink") && cdeNMI.MyScreenManager) {
                    cdeNMI.MyScreenManager.TransitToScreen(_this.GetProperty("TargetLink"));
                }
            });
            this.statusShape = new ctrlStatusLight();
            this.statusShape.InitControl(this.topName);
            this.statusShape.SetProperty("TileWidth", 2);
            this.statusShape.SetProperty("TileHeight", 2);
            this.leftTopGroup = new cdeNMI.ctrlTileGroup();
            this.leftTopGroup.InitControl(this.topName);
            this.leftTopGroup.SetProperty("TileWidth", 4);
            this.leftTopGroup.SetProperty("ClassName", "cdeFlexCol");
            this.pluginName = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.leftTopGroup, { ScreenID: pScreenID, PreInitBag: ["Element=div"] });
            //cdeNMI.ctrlSmartLabel.Create(this.leftTopGroup, pScreenID, null, null, "div");
            this.pluginName.SetProperty("TileWidth", 4);
            this.pluginName.SetProperty("TileHeight", 1);
            this.pluginName.SetProperty("Style", "font-size:30px;");
            this.serviceName = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.leftTopGroup, { ScreenID: pScreenID, PreInitBag: ["Element=div"] });
            //cdeNMI.ctrlSmartLabel.Create(this.leftTopGroup, pScreenID, null, null, "div");
            this.serviceName.SetProperty("TileWidth", 4);
            this.serviceName.SetProperty("TileHeight", 1);
            this.serviceName.SetProperty("Style", "overflow-y:auto;overflow-x:hidden;font-size:16px;");
            //middle
            this.collaBox = new cdeNMI.ctrlCollapsibleGroup();
            var tF = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.CollapsibleGroup, 0, null, 2);
            tF.PropertyBag = ["IsSmall=true"];
            this.collaBox.InitControl(this.aboutButtonContainer, new cdeNMI.TheTRF("NONE", 0, tF));
            this.collaBox.SetProperty("TileWidth", 6);
            this.collaBox.SetProperty("Title", "About...");
            this.collaBox.SetProperty("IsSmall", true);
            this.collaBox.SetProperty("DoClose", true);
            this.middleBox = new cdeNMI.ctrlTileGroup();
            this.middleBox.InitControl(this.collaBox);
            this.middleBox.SetProperty("TileWidth", 6);
            this.middleBox.SetProperty("TileHeight", 1);
            this.middleBox.SetProperty("ClassName", "cdeFlexRow");
            this.mdlSquare = new cdeNMI.ctrlTileGroup();
            this.mdlSquare.InitControl(this.middleBox);
            this.mdlSquare.SetProperty("TileWidth", 5);
            this.mdlSquare.SetProperty("TileHeight", 1);
            this.mdlSquare.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter");
            this.mdlText = new cdeNMI.ctrlSmartLabel();
            this.mdlText.InitControl(this.mdlSquare);
            this.leftSquare = new cdeNMI.ctrlTileGroup();
            this.leftSquare.InitControl(this.middleBox);
            this.leftSquare.SetProperty("TileWidth", 1);
            this.leftSquare.SetProperty("TileHeight", 1);
            this.leftSquare.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter");
            this.iconImage = new cdeNMI.ctrlZoomImage();
            this.iconImage.InitControl(this.leftSquare);
            this.iconImage.SetProperty("TileWidth", 1);
            this.iconImage.SetProperty("TileHeight", 1);
            this.iconImage.SetProperty("Visibility", false);
            this.iconText = new cdeNMI.ctrlSmartLabel();
            this.iconText.InitControl(this.leftSquare);
            this.iconText.SetProperty("TileWidth", 1);
            this.iconText.SetProperty("Visibility", false);
            //Next Line
            this.rightSquare = new cdeNMI.ctrlTileGroup();
            this.rightSquare.InitControl(this.collaBox);
            this.rightSquare.SetProperty("TileWidth", 6);
            this.rightSquare.SetProperty("TileHeight", 1);
            this.rightSquare.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter");
            this.rightSquare.SetProperty("Style", "-webkit-align-content: flex-start; -ms-flex-line-pack: start; align-content:flex-start;");
            this.versionText = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.rightSquare, { ScreenID: pScreenID, TRF: cdeNMI.TheTRF.SetFlagsOnly(256), PreInitBag: ["Element=div"] });
            //cdeNMI.ctrlSmartLabel.Create(this.rightSquare, pScreenID, null, null, "div");
            this.versionText.SetProperty("TileWidth", 3);
            this.copyrightText = new cdeNMI.ctrlSmartLabel();
            this.copyrightText.InitControl(this.rightSquare);
            this.copyrightText.SetProperty("TileWidth", 3);
            //bottom
            this.adTile = new cdeNMI.ctrlTileGroup();
            this.adTile.InitControl(this.collaBox);
            this.adTile.SetProperty("TileWidth", 6);
            this.adTile.SetProperty("TileHeight", 1);
            this.adTile.SetProperty("ClassName", "cdeFlexRow cdeFlexCenter");
            this.advertise = new cdeNMI.ctrlSmartLabel();
            this.advertise.InitControl(this.adTile);
            this.SetElement(this.aboutButtonContainer.GetElement());
            if (this.MyFormID && cdeNMI.MyScreenManager) {
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyFormID);
                if (tScreen)
                    tScreen.RegisterEvent("OnLoaded", function () { return _this.ApplySkin(); });
            }
            return true;
        };
        ctrlAboutButton.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (!this.aboutButtonContainer)
                return;
            //setting properties
            //Title
            if (pName === "Title") {
                this.pluginName.SetProperty("iValue", pValue);
            }
            else if (pName === "SubTitle") {
                this.serviceName.SetProperty("iValue", pValue);
            }
            else if (pName === "Background") {
                this.aboutButtonContainer.SetProperty(pName, pValue);
                if (pValue === "black") {
                    this.mdlText.SetProperty("Foreground", "white");
                    this.pluginName.SetProperty("Foreground", "white");
                    this.mdlText.SetProperty("Foreground", "white");
                    this.copyrightText.SetProperty("Foreground", "white");
                    this.versionText.SetProperty("Foreground", "white");
                    this.advertise.SetProperty("Foreground", "white");
                    this.statusShape.SetProperty("Foreground", "white");
                    this.iconText.SetProperty("Foreground", "white");
                }
            }
            else if (pName === "Foreground") {
                this.aboutButtonContainer.SetProperty(pName, pValue);
                this.mdlText.SetProperty("Foreground", pValue);
                this.pluginName.SetProperty("Foreground", pValue);
                this.mdlText.SetProperty("Foreground", pValue);
                this.copyrightText.SetProperty("Foreground", pValue);
                this.versionText.SetProperty("Foreground", pValue);
                this.advertise.SetProperty("Foreground", pValue);
                this.statusShape.SetProperty("Foreground", pValue);
                this.iconText.SetProperty("Foreground", pValue);
            }
            else if (pName === "Value" || pName === "iValue") {
                this.statusShape.SetProperty("iValue", pValue);
            }
            else if (pName === "Description") {
                this.mdlText.SetProperty("Text", pValue);
            }
            else if (pName === "Copyright") {
                this.copyrightText.SetProperty("Text", pValue + "<BR>" + this.GetProperty("Author"));
            }
            else if (pName === "Author") {
                this.copyrightText.SetProperty("Text", this.GetProperty("Copyright") + "<BR>" + pValue);
            }
            else if (pName === "Version" || pName === "NodeText") {
                this.versionText.SetProperty("Text", "Current Version: " + this.GetProperty("Version") + "</br><span style='font-size:10px'>" + this.GetProperty("NodeText") + "</span>");
            }
            else if (pName === "Icon") {
                this.iconImage.SetProperty("iValue", pValue);
                this.iconImage.SetProperty("Visibility", true);
            }
            else if (pName === "IconText") {
                this.iconText.SetProperty("Text", pValue);
                this.iconText.SetProperty("Visibility", true);
            }
            else if (pName === "AdText") {
                this.advertise.SetProperty("Text", "To learn more visit</br><a href=" + pValue + " target='_blank'>" + pValue + "</a>");
            }
            else if (pName === "StatusText") {
                this.statusShape.SetProperty("Title", pValue);
            }
            else if (pName === "LastMessage") {
                this.serviceName.SetProperty("Text", pValue);
            }
        };
        ctrlAboutButton.prototype.ApplySkin = function () {
            this.statusShape.ApplySkin();
        };
        return ctrlAboutButton;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlAboutButton = ctrlAboutButton;
    /**
* Creates a MuTLock (Multi-Touch Lock for Password Code)
*
* (3.2 Ready!)
*/
    var ctrlMoTLock = /** @class */ (function (_super) {
        __extends(ctrlMoTLock, _super);
        function ctrlMoTLock(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.divMoTLock = null;
            _this.hControl = null;
            _this.mMoTLockCode = "";
            _this.mMoTLockDigits = "";
            _this.mShowOverlay = false;
            _this.mTouched = 0;
            _this.mPassField = null;
            _this.k1 = null;
            _this.k2 = null;
            _this.k3 = null;
            _this.k4 = null;
            _this.k5 = null;
            _this.k6 = null;
            _this.k7 = null;
            _this.k8 = null;
            _this.k9 = null;
            _this.k0 = null;
            _this.kreset = null;
            _this.kenter = null;
            return _this;
        }
        ctrlMoTLock.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.MuTLock;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            var tHead = "Enter Pin";
            this.divMoTLock = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(pTargetControl, { TRF: pTRF }); //ctrlTileGroup.Create(pTargetControl, pTRF);
            this.divMoTLock.SetProperty("LabelClassName", "cdeMutLock");
            this.divMoTLock.SetProperty("Label", tHead);
            this.divMoTLock.GetElement().style.marginLeft = "0px";
            this.divMoTLock.GetElement().style.position = "fixed";
            this.divMoTLock.GetElement().style.zIndex = "50";
            this.divMoTLock.GetElement().style.backgroundColor = "black";
            this.divMoTLock.SetProperty("TileWidth", 3);
            this.divMoTLock.SetProperty("OnClick", function () {
                if (_this.mPassField === null && _this.MyTE !== null) {
                    if (_this.MyTE.MyTEContainer.GetContainerElement().style.overflow === "initial")
                        _this.MyTE.MyTEContainer.GetContainerElement().style.overflow = "hidden";
                    else
                        _this.MyTE.MyTEContainer.GetContainerElement().style.overflow = "initial";
                }
            });
            this.k7 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "7", 1, 1);
            this.k7.PreventManipulation = true;
            this.k7.PreventDefault = true;
            this.k7.SetProperty("OnTileDown", function () { return _this.SetDigit(7); });
            this.k7.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k7.SetProperty("ClassName", "cdeMutButton");
            this.k7.SetProperty("FontSize", 42);
            this.k8 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "8", 1, 1);
            this.k8.PreventManipulation = true;
            this.k8.PreventDefault = true;
            this.k8.SetProperty("OnTileDown", function () { return _this.SetDigit(8); });
            this.k8.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k8.SetProperty("ClassName", "cdeMutButton");
            this.k8.SetProperty("FontSize", 42);
            this.k9 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "9", 1, 1);
            this.k9.PreventManipulation = true;
            this.k9.PreventDefault = true;
            this.k9.SetProperty("OnTileDown", function () { return _this.SetDigit(9); });
            this.k9.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k9.SetProperty("ClassName", "cdeMutButton");
            this.k9.SetProperty("FontSize", 42);
            this.k4 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "4", 1, 1);
            this.k4.PreventManipulation = true;
            this.k4.PreventDefault = true;
            this.k4.SetProperty("OnTileDown", function () { return _this.SetDigit(4); });
            this.k4.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k4.SetProperty("ClassName", "cdeMutButton");
            this.k4.SetProperty("FontSize", 42);
            this.k5 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "5", 1, 1);
            this.k5.PreventManipulation = true;
            this.k5.PreventDefault = true;
            this.k5.SetProperty("OnTileDown", function () { return _this.SetDigit(5); });
            this.k5.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k5.SetProperty("ClassName", "cdeMutButton");
            this.k5.SetProperty("FontSize", 42);
            this.k6 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "6", 1, 1);
            this.k6.PreventManipulation = true;
            this.k6.PreventDefault = true;
            this.k6.SetProperty("OnTileDown", function () { return _this.SetDigit(6); });
            this.k6.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k6.SetProperty("ClassName", "cdeMutButton");
            this.k6.SetProperty("FontSize", 42);
            this.k1 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "1", 1, 1);
            this.k1.PreventManipulation = true;
            this.k1.PreventDefault = true;
            this.k1.SetProperty("OnTileDown", function () { return _this.SetDigit(1); });
            this.k1.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k1.SetProperty("ClassName", "cdeMutButton");
            this.k1.SetProperty("FontSize", 42);
            this.k2 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "2", 1, 1);
            this.k2.PreventManipulation = true;
            this.k2.PreventDefault = true;
            this.k2.SetProperty("OnTileDown", function () { return _this.SetDigit(2); });
            this.k2.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k2.SetProperty("ClassName", "cdeMutButton");
            this.k2.SetProperty("FontSize", 42);
            this.k3 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "3", 1, 1);
            this.k3.PreventManipulation = true;
            this.k3.PreventDefault = true;
            this.k3.SetProperty("OnTileDown", function () { return _this.SetDigit(3); });
            this.k3.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k3.SetProperty("ClassName", "cdeMutButton");
            this.k3.SetProperty("FontSize", 42);
            this.k0 = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "0", 1, 1);
            this.k0.PreventManipulation = true;
            this.k0.PreventDefault = true;
            this.k0.SetProperty("OnTileDown", function () { return _this.SetDigit(0); });
            this.k0.SetProperty("OnClick", function (sender, evt) { return _this.CombiDone(evt); });
            this.k0.SetProperty("ClassName", "cdeMutButton");
            this.k0.SetProperty("FontSize", 42);
            this.kreset = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "Reset", 2, 1);
            this.kreset.PreventManipulation = true;
            this.kreset.PreventDefault = true;
            this.kreset.SetProperty("ClassName", "cdeMutButton");
            this.kreset.SetProperty("OnClick", function (sender, evt, tps) {
                if (tps > 0) {
                    cdeNMI.StopPointerEvents(evt);
                    _this.mMoTLockCode = "";
                    _this.mTouched = 0;
                    _this.mMoTLockDigits = "";
                    if (_this.mPassField) {
                        if (!_this.mShowOverlay)
                            _this.mPassField.SetProperty("Value", _this.mMoTLockCode);
                        else
                            _this.mPassField.SetProperty("iValue", _this.mMoTLockCode);
                    }
                    else
                        _this.SetProperty("Value", _this.mMoTLockCode);
                }
            });
            this.kenter = cdeNMI.ctrlTileButton.Create(this.divMoTLock, null, "Enter", 3, 1);
            this.kenter.PreventManipulation = true;
            this.kenter.PreventDefault = true;
            this.kenter.SetProperty("Visibility", false);
            this.kenter.SetProperty("ClassName", "cdeMutButton");
            this.kenter.SetProperty("OnClick", function (sender, evt) {
                if (_this.mPassField) {
                    _this.mPassField.IsDirty = true;
                    _this.mPassField.FireEvent(false, "OnValueChanged", evt, _this.mMoTLockCode);
                }
                else
                    _this.SetProperty("Value", _this.mMoTLockCode);
            });
            this.PreventManipulation = true;
            this.SetElement(this.divMoTLock.GetElement());
            return true;
        };
        ctrlMoTLock.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "PassField") {
                this.mPassField = pValue;
                this.divMoTLock.GetElement().style.position = "fixed";
            }
            else if (pName === "Background") {
                if (this.divMoTLock)
                    this.divMoTLock.GetElement().style.backgroundColor = pValue;
            }
            else if (pName === "IsOverlay") {
                this.mShowOverlay = cde.CBool(pValue);
                this.divMoTLock.GetElement().style.zIndex = (cde.CBool(this.mShowOverlay) ? 1300 : 0).toString();
                cdeNMI.SetZIndex(this.k7.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k8.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k9.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k4.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k5.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k6.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k1.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k2.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k3.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.k0.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                cdeNMI.SetZIndex(this.kreset.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
                this.kenter.SetProperty("Visibility", this.mShowOverlay);
                cdeNMI.SetZIndex(this.kenter.GetElement(), cde.CBool(this.mShowOverlay) ? 1300 : 0);
            }
        };
        ctrlMoTLock.prototype.SetDigit = function (digit) {
            this.mTouched++;
            this.mMoTLockDigits += digit.toString();
        };
        ctrlMoTLock.prototype.CombiDone = function (evt) {
            if (this.mTouched > 0) {
                this.mTouched = 0;
                if (this.mMoTLockCode.length > 0)
                    this.mMoTLockCode += ";";
                this.mMoTLockCode += this.mMoTLockDigits;
                this.mMoTLockDigits = "";
                cdeNMI.StopPointerEvents(evt);
                if (this.mPassField) {
                    if (!this.mShowOverlay)
                        this.mPassField.SetProperty("Value", this.mMoTLockCode);
                    else
                        this.mPassField.SetProperty("iValue", this.mMoTLockCode);
                }
            }
        };
        //backwards compat
        ctrlMoTLock.Create = function (pTargetControl, pTRF, pPassField, pSize, pShowOverlay) {
            var t = new ctrlMoTLock(pTRF);
            if (pPassField)
                t.SetProperty("PassField", pPassField);
            t.InitControl(pTargetControl, pTRF);
            if (cde.CBool(pShowOverlay))
                t.SetProperty("IsOverlay", pShowOverlay);
            if (pSize)
                t.SetProperty("TileWidth", pSize);
            return t;
        };
        return ctrlMoTLock;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlMoTLock = ctrlMoTLock;
    /**
* Creates a Mesh-Picker picker dialog for users that have access to multiple meshes
*
* (4.1 Ready!)
*/
    var ctrlMeshPicker = /** @class */ (function (_super) {
        __extends(ctrlMeshPicker, _super);
        function ctrlMeshPicker(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mPickerGroup = null;
            _this.mMeshList = null;
            _this.mNodesFld = null;
            _this.MyMeshes = null;
            return _this;
        }
        ctrlMeshPicker.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.MuTLock;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.mPickerGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this, { PostInitBag: ["TileWidth=12", "ClassName=cdeLoginBlock"] });
            cdeNMI.TheControlFactory.AddAdHocSmartControl(this.mPickerGroup, "HEADER", cdeNMI.cdeControlType.SmartLabel, "", 0, ["NoTE=true", "TileHeight=1", "TileWidth=12", "iValue=Please choose a mesh", "FontSize=36"]);
            var tMeshListFrame = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.mPickerGroup, { PostInitBag: ["TileWidth=6", "TileHeight=6"] });
            var tSearch = cdeNMI.TheControlFactory.AddAdHocSmartControl(tMeshListFrame, "SEARCH", cdeNMI.cdeControlType.SingleEnded, "Search for Mesh", 2, ["TileHeight=1", "TileFactorY=2", "TileWidth=5"]);
            tSearch.MyNMIControl.RegisterEvent("OnValueChanged", function (sender, evt, pval) {
                _this.SetProperty("Filter", pval);
            });
            this.mMeshList = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(tMeshListFrame, { PostInitBag: ["TileWidth=6", "TileHeight=5", "Style=overflow-y: auto;"] });
            var tExplainer = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.mPickerGroup, { PostInitBag: ["TileWidth=6", "TileHeight=6"] });
            cdeNMI.TheControlFactory.AddAdHocSmartControl(tExplainer, "NIM", cdeNMI.cdeControlType.SmartLabel, "", 0, ["NoTE=true", "TileHeight=1", "TileFactorY=2", "TileWidth=6", "iValue=Nodes in the Mesh"]);
            this.mNodesFld = cdeNMI.TheControlFactory.AddAdHocSmartControl(tExplainer, "NODES", cdeNMI.cdeControlType.SmartLabel, "", 256, ["NoTE=true", "TileHeight=5"]);
            this.SetElement(this.mPickerGroup.GetElement());
            return true;
        };
        ctrlMeshPicker.prototype.SetMesh = function (pMeshes) {
            if (pMeshes)
                this.MyMeshes = pMeshes;
            if (!this.MyMeshes)
                return;
            if (this.mMeshList) {
                this.mMeshList.GetElement().innerHTML = null;
                this.mNodesFld.SetProperty("iValue", "");
                var pFilter = cde.CStr(this.GetProperty("Filter"));
                for (var i = 0; i < this.MyMeshes.length; i++) {
                    if (!this.MyMeshes[i].HomeNode)
                        this.MyMeshes[i].HomeNode = "";
                    if (pFilter && this.MyMeshes[i].MeshHash.indexOf(pFilter) < 0 && this.MyMeshes[i].HomeNode.indexOf(pFilter) < 0 && this.MyMeshes[i].NodeNames.join().indexOf(pFilter) < 0)
                        continue;
                    this.CreateMeshButton(i);
                }
            }
        };
        ctrlMeshPicker.prototype.SetProperty = function (pName, pValue) {
            if (pName === "SetMesh") {
                this.SetMesh(pValue);
                return;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Filter") {
                this.SetMesh(null);
            }
        };
        ctrlMeshPicker.prototype.CreateMeshButton = function (i) {
            var _this = this;
            var tMeshBut = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this.mMeshList, { PostInitBag: ["TileHeight=3", "TileFactorY=2", "TileWidth=11", "TileFactorX=2", "Style=box-shadow: rgba(0,0,0,.3) 0 1px 1px;"] });
            tMeshBut.SetProperty("Mesh", this.MyMeshes[i]);
            tMeshBut.SetProperty("OnClick", function (pSender) {
                var tM = pSender.GetProperty("Mesh");
                _this.mNodesFld.SetProperty("FontSize", "36");
                _this.mNodesFld.SetProperty("iValue", "Loading Mesh (" + tM.MeshHash + ")...");
                if (cdeNMI.MyEngine)
                    cdeNMI.MyEngine.SelectMesh(tM.cdeMID);
            });
            tMeshBut.SetProperty("OnHover", function (pSender) {
                var tM = pSender.GetProperty("Mesh");
                if (tM) {
                    var tNs = "<bl style='font-size:24px;'>";
                    for (var j = 0; j < tM.NodeNames.length; j++) {
                        //if (tNs.length > 0) tNs += "</br>";
                        tNs += "<li>" + tM.NodeNames[j] + "</li>";
                    }
                    tNs += "</bl>";
                    _this.mNodesFld.SetProperty("iValue", tNs);
                }
            });
            cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(tMeshBut, { PostInitBag: ["TileWidth=5", "TileHeight=1", "TileFactorY=4"] });
            cdeNMI.TheControlFactory.AddAdHocSmartControl(tMeshBut, "ICON" + i, cdeNMI.cdeControlType.HashIcon, "", 0, ["NoTE=true", "TileHeight=1", "TileWidth=1", "iValue=" + this.MyMeshes[i].MeshHash]);
            cdeNMI.TheControlFactory.AddAdHocSmartControl(tMeshBut, "LABEL" + i, cdeNMI.cdeControlType.SmartLabel, "", 256, ["NoTE=true", "TileHeight=1", "TileWidth=4", "iValue=" + this.MyMeshes[i].HomeNode + "<br>(" + this.MyMeshes[i].MeshHash + ")", "ClassName=cdePickerLabel"]);
        };
        return ctrlMeshPicker;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlMeshPicker = ctrlMeshPicker;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var TheDataViewBase = /** @class */ (function (_super) {
        __extends(TheDataViewBase, _super);
        function TheDataViewBase(pTRF) {
            var _this = _super.call(this, null, null) || this;
            _this.MyTableControls = [];
            _this.MyFormControls = new Array(); //TODO:4.1 Merge the two!
            _this.MyTableName = null;
            _this.MyStorageName = null;
            _this.MyAdderRow = null;
            return _this;
        }
        TheDataViewBase.prototype.GetControlByFldNo = function (pRowNo, pFld) {
            if (!this.MyTRF)
                return null;
            if (this.MyAdderRow) {
                return this.MyAdderRow[this.MyTRF.TableName + "_" + pFld];
            }
            else {
                if (this.MyBaseType === cdeNMI.cdeControlType.FormView) {
                    if (this.MyTRF.FldInfo["TableReference"])
                        return this.MyFormControls[this.MyTRF.FldInfo["TableReference"] + "_" + pRowNo + "_" + pFld];
                    else
                        return this.MyFormControls[this.MyTRF.TableName + "_" + pRowNo + "_" + pFld];
                }
                else
                    return this.MyTableControls[pRowNo][this.MyTRF.TableName + "_" + pRowNo + "_" + pFld];
            }
        };
        TheDataViewBase.prototype.ValidateRules = function (pScreenID, pFormID, pTableName, pRow, pFldEntries, pLocalOnly, pForceWrite) {
            var tModel = cdeNMI.MyNMIModels[pScreenID];
            if (!pFormID)
                pFormID = this.MyTableName;
            if (!tModel.MyStorageMeta[pFormID] || tModel.MyStorageMeta[pFormID].AreRulesRunning === true)
                return false;
            tModel.MyStorageMeta[pFormID].AreRulesRunning = true;
            try {
                var bIsDirty = false;
                var tID = "";
                var tFldInfo = null;
                var tFldEntry = null;
                var tDirtyMask = "";
                var tOldValues = [];
                var RowData = null;
                if (tModel.MyStorageMirror[pTableName])
                    RowData = tModel.MyStorageMirror[pTableName][pRow];
                if (!RowData)
                    RowData = {};
                if (RowData.cdeMID)
                    tID = RowData.cdeMID;
                if (RowData.hasOwnProperty('SecToken'))
                    RowData.SecToken = 'CDE!';
                RowData.nmiTableName = pTableName;
                RowData.nmiScreenID = pScreenID;
                var tScreen = cdeNMI.MyScreenManager.GetScreenByID(pFormID);
                if (tScreen && tScreen.GetProperty("MyOwnerTable"))
                    RowData.nmiOwner = tScreen.GetProperty("MyOwnerTable");
                var j = void 0;
                for (j = 0; j < tModel.MyStorageMeta[pFormID].FormFields.length; j++) {
                    try {
                        tFldInfo = tModel.MyStorageMeta[pFormID].FormFields[j];
                        if (!tFldInfo)
                            continue;
                        tFldEntry = pFldEntries[pTableName + "_" + pRow + "_" + tFldInfo.FldOrder];
                        var WasDirty = false;
                        if (tFldEntry && tFldInfo.Type !== cdeNMI.cdeControlType.CollapsibleGroup && tFldInfo.Type !== cdeNMI.cdeControlType.TileGroup) { //TODO: do not process any control that uses the OnUpdateName with Format!
                            if (tFldEntry.MyNMIControl && tFldEntry.MyNMIControl.MyBaseType !== 27)
                                tFldEntry = tFldEntry.MyNMIControl;
                            if (!pLocalOnly && tFldInfo && tFldInfo.DataItem && (((tFldInfo.Flags & 2) !== 0 && !cde.CBool(tFldInfo["WriteOnce"])) || pForceWrite)) {
                                var tNewValue = tFldEntry.GetProperty("Value");
                                if (!tFldEntry.IsDirty && tFldInfo["DefaultValue"] && (cde.IsNotSet(tNewValue) || tNewValue === tFldInfo["DefaultValue"])) {
                                    tNewValue = tFldInfo["DefaultValue"];
                                    tFldEntry.IsDirty = true;
                                }
                                if (tFldEntry.IsDirty) {
                                    tFldEntry.IsDirty = false;
                                    if (cdeNMI.UpdFldContent(RowData, tFldInfo, tNewValue, tOldValues)) {
                                        bIsDirty = true;
                                        WasDirty = true;
                                    }
                                }
                            }
                            if (tFldEntry) {
                                for (var tDItem in tFldEntry.MyDataItems) {
                                    if (tFldEntry.MyDataItems.hasOwnProperty(tDItem)) {
                                        var pVal = tFldEntry.MyDataItems[tDItem];
                                        var nVal = cdeNMI.GenerateFinalString(pVal, RowData);
                                        if (nVal === pVal) {
                                            nVal = cdeNMI.GenerateFinalString(pVal, pFldEntries);
                                        }
                                        tFldEntry.SetProperty(tDItem, nVal);
                                    }
                                }
                            }
                            if (pForceWrite || ((tFldInfo.Flags & 2) !== 0 && !cde.CBool(tFldInfo["WriteOnce"])) || WasDirty)
                                tDirtyMask += "1";
                            else
                                tDirtyMask += "0";
                        }
                        else
                            tDirtyMask += "0";
                    }
                    catch (ext) {
                        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Validator:Error:" + ext, ext.stack);
                    }
                }
                if (bIsDirty || pForceWrite) {
                    if (!pLocalOnly || pForceWrite) {
                        if (RowData.hasOwnProperty('SecToken') && cde.MyContentEngine) {
                            if (RowData.SecToken === "")
                                RowData.SecToken = cde.MyContentEngine.RSAEncrypt("CDE!"); //Attention: Token can exceed encryptable Size!
                            else
                                RowData.SecToken = cde.MyContentEngine.RSAEncrypt(RowData.SecToken); //Attention: Token can exceed encryptable Size!
                        }
                        if (cdeNMI.MyEngine) {
                            if (tID === "")
                                cdeNMI.MyEngine.PublishToNMI('NMI_INS_DATA:' + pTableName + ':' + pScreenID + ':' + pFormID, JSON.stringify(RowData), tModel.cdeN);
                            else
                                cdeNMI.MyEngine.PublishToNMI('NMI_UPD_DATA:' + pTableName + ':' + tID + ':' + pScreenID + ':' + tDirtyMask, JSON.stringify(RowData), RowData.cdeN);
                        }
                    }
                    if (cdeNMI.MyEngine && tID !== "")
                        cdeNMI.MyEngine.FireEvent(false, "RecordUpdated_" + pTableName + "_" + pRow, cde.GuidToString(tModel.cdeMID), pTableName, pRow, tDirtyMask);
                }
                for (j = 0; j < tModel.MyStorageMeta[pFormID].FormFields.length; j++) {
                    tFldInfo = tModel.MyStorageMeta[pFormID].FormFields[j];
                    tFldEntry = pFldEntries[pTableName + "_" + pRow + "_" + tFldInfo.FldOrder];
                    var IsHidden = false;
                    var tHideCondition = tFldInfo["HideCondition"];
                    if (tHideCondition && tHideCondition !== "") {
                        var tRealCondition = "";
                        try {
                            tRealCondition = cdeNMI.GenerateFinalString(tHideCondition, RowData);
                            IsHidden = cde.cdeEval(tRealCondition);
                        }
                        catch (e) {
                            //cdeNMI.ShowToastMessage("Validating Hide-Condition Error:" + e, "in: (" + tHideCondition + ") resolved to<br/>" + tRealCondition);
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Validating Hide-Condition Error:" + e, "in: (" + tHideCondition + ") resolved to<br/>" + tRealCondition);
                            IsHidden = true;
                        }
                    }
                    var IsGreyd = false;
                    var tGrayCondition = tFldInfo["GreyCondition"];
                    if (tGrayCondition && tGrayCondition !== "") {
                        var tRealCondition = "";
                        try {
                            tRealCondition = cdeNMI.GenerateFinalString(tGrayCondition, RowData);
                            IsGreyd = cde.cdeEval(tRealCondition);
                        }
                        catch (e) {
                            //cdeNMI.ShowToastMessage("Validating Gray-Condition Error:" + e, "in: (" + tGrayCondition + ") resolved to<br/>" + tRealCondition);
                            cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Validating Gray-Condition Error:" + e, "in: (" + tGrayCondition + ") resolved to<br/>" + tRealCondition);
                            IsGreyd = true;
                        }
                    }
                    if (tFldEntry) {
                        if (tHideCondition && tHideCondition !== "") {
                            tFldEntry.SetProperty("Visibility", !IsHidden);
                        }
                        if (tGrayCondition && tGrayCondition !== "") {
                            tFldEntry.SetProperty("Disabled", IsGreyd);
                        }
                    }
                }
            }
            catch (eee) {
                cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "Validator:Error", eee);
            }
            tModel.MyStorageMeta[pFormID].AreRulesRunning = false;
            return true;
        };
        TheDataViewBase.prototype.SortTableByProperty = function (pTable, pDataItem, IsNumeric, pSortDescending) {
            if (!pTable)
                return [];
            return pTable.sort(function (a, b) {
                var c;
                var d;
                if (pDataItem.indexOf('.') > 0) {
                    c = cdeNMI.GetFldContentByName(a, pDataItem, false);
                    d = cdeNMI.GetFldContentByName(b, pDataItem, false);
                }
                else {
                    c = IsNumeric ? cde.CDbl(a[pDataItem]) : cde.CStr(a[pDataItem]);
                    d = IsNumeric ? cde.CDbl(b[pDataItem]) : cde.CStr(b[pDataItem]);
                }
                if (c === d)
                    return 0;
                return pSortDescending ? d > c ? 1 : -1 : d < c ? 1 : -1;
            });
        };
        TheDataViewBase.prototype.ReplaceMarcos = function (tInStr, pFormControls) {
            var outStr = tInStr;
            for (var tfld in pFormControls) {
                var tCtrl = pFormControls[tfld];
                if (tCtrl && tCtrl.MyBaseType === cdeNMI.cdeControlType.TileEntry && tCtrl.MyNMIControl.MyFieldInfo && tCtrl.MyNMIControl.MyFieldInfo["DataItem"]) {
                    var tDI = tCtrl.MyNMIControl.MyFieldInfo["DataItem"];
                    do {
                        tInStr = outStr;
                        outStr = outStr.replace('<%' + tDI + '%>', tCtrl.GetProperty("Value"));
                    } while (tInStr !== outStr);
                }
            }
            while (outStr.indexOf("<%") >= 0) {
                if (outStr.indexOf("%>") > 0) {
                    var tPre = outStr.substr(0, outStr.indexOf("<%"));
                    outStr = tPre + outStr.substr(outStr.indexOf("%>") + 2);
                }
                else
                    break;
            }
            return outStr;
        };
        ///Creates the FormField Definition for a given TableRow
        TheDataViewBase.prototype.CreateFormInfo = function (pTableRow, pParentClass, pForm, pFldIdx) {
            var lastName = "";
            for (var index in pTableRow) {
                if (index.length > 3 && index.substring(0, 3) === "cde" && !((index === "cdeMID" || index === "cdeA") && pParentClass === ""))
                    continue;
                var tIndex = index;
                if (pParentClass !== "")
                    tIndex = pParentClass + "." + tIndex;
                lastName = tIndex;
                if (typeof pTableRow[index] === "object") {
                    pFldIdx = this.CreateFormInfo(pTableRow[index], lastName, pForm, pFldIdx);
                    continue;
                }
                if (tIndex.length > 13 && tIndex.substr(0, 13) === "MyPropertyBag" && tIndex.substr(tIndex.length - 6, 6) === ".Value")
                    continue;
                var tHeader = tIndex;
                if (tIndex.substr(0, 13) === "MyPropertyBag") {
                    var th = tIndex.split('.');
                    tHeader = th[1];
                    if (th.length > 3) {
                        for (var i = 2; i < th.length - 1; i++) {
                            tHeader += "." + th[i];
                        }
                    }
                }
                if (pTableRow[tIndex] && typeof pTableRow[tIndex] === "string" && pTableRow[tIndex].substring(0, 5) === "/Date")
                    pForm.FormFields[pFldIdx] = new cdeNMI.TheFieldInfo(21, 2, tHeader);
                else {
                    if (pTableRow[tIndex] && typeof pTableRow[tIndex] === "string" && pTableRow[tIndex].length > 1000)
                        pForm.FormFields[pFldIdx] = new cdeNMI.TheFieldInfo(29, 0, tHeader);
                    else {
                        if (index === "cdeA")
                            pForm.FormFields[pFldIdx] = new cdeNMI.TheFieldInfo(24, 1, tHeader);
                        else
                            pForm.FormFields[pFldIdx] = new cdeNMI.TheFieldInfo(1, 1, tHeader);
                    }
                }
                pForm.FormFields[pFldIdx].FormID = cde.GuidToString(pForm.cdeMID);
                pForm.FormFields[pFldIdx].DataItem = tIndex;
                pForm.FormFields[pFldIdx].FldOrder = pFldIdx;
                if (tIndex.substr(0, 13) === "MyPropertyBag") {
                    if (tIndex.substr(tIndex.length - 5, 5) === ".Name") {
                        pForm.FormFields[pFldIdx]["Title"] = tHeader;
                        pForm.FormFields[pFldIdx].DataItem = tIndex.substr(0, tIndex.length - 5) + '.Value';
                    }
                }
                pForm.FormFields[pFldIdx++].Flags = 0;
            }
            if (pParentClass === "") {
                pForm.FormFields[pFldIdx] = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.FormButton, 1, "Details", 2, cde.GuidToString(pForm.cdeMID));
                pForm.FormFields[pFldIdx].FldOrder = 1000;
                pForm.FormFields[pFldIdx].DataItem = "CDE_DETAILS";
                pForm.FormFields[pFldIdx].PropertyBag = ["ClassName=cdeTableButton", "Value=<span class='fa fa-3x'>&#xf044;</span>"];
            }
            return pFldIdx;
        };
        TheDataViewBase.prototype.RemoveTableHooks = function () {
            if (!this.MyTableControls)
                return;
            for (var i = 0; i < this.MyTableControls.length; i++) {
                this.RemoveFormHooks(this.MyTableControls[i]);
            }
        };
        TheDataViewBase.prototype.RemoveFormHooks = function (pFormControls) {
            for (var vd in pFormControls) {
                if (pFormControls.hasOwnProperty(vd)) {
                    var tID = pFormControls[vd].GetProperty("ID");
                    if (tID && tID.length > 0) {
                        var tOwn = "TABLES";
                        if (pFormControls[vd].MyNMIControl)
                            pFormControls[vd].MyNMIControl.FireEvent(false, "OnDelete");
                        if (pFormControls[vd].MyNMIControl && pFormControls[vd].MyNMIControl.MyTRF && pFormControls[vd].MyNMIControl.MyTRF.FldInfo && pFormControls[vd].MyNMIControl.MyTRF.FldInfo.cdeMID)
                            tOwn = cde.GuidToString(pFormControls[vd].MyNMIControl.MyTRF.FldInfo.cdeMID);
                        cdeNMI.MyTCF.UnregisterControl(tOwn, tID);
                    }
                }
            }
        };
        TheDataViewBase.prototype.DeleteRecord = function (pDataRow) {
            //override if required
        };
        TheDataViewBase.prototype.OnLoaded = function () {
            //override if required
        };
        return TheDataViewBase;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.TheDataViewBase = TheDataViewBase;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var TheDashboard = /** @class */ (function (_super) {
        __extends(TheDashboard, _super);
        function TheDashboard(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mDashboardScreen = null;
            _this.mScreenIDs = null;
            _this.mTileCount = 0;
            return _this;
        }
        TheDashboard.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.Dashboard;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.SetupDashboard(this.GetSetting("ScreenGuid"));
            return true;
        };
        TheDashboard.prototype.SetupDashboard = function (pScreenID) {
            var _this = this;
            var tScreenInfo = cdeNMI.MyNMIModels[this.MyScreenID];
            if (!tScreenInfo || !tScreenInfo.MyDashboard)
                return;
            cdeNMI.ThePB.ConvertPropertiesFromBag(tScreenInfo.MyDashboard);
            var IsNewDashboard = false;
            if (!pScreenID)
                pScreenID = tScreenInfo.MyDashboard.cdeMID;
            this.mDashboardScreen = cdeNMI.MyScreenManager ? cdeNMI.MyScreenManager.GetScreenByID(pScreenID) : null;
            if (!this.mDashboardScreen) {
                this.mDashboardScreen = new cdeNMI.TheNMIScreen();
                this.mDashboardScreen.InitControl(null, null, tScreenInfo.MyDashboard.PropertyBag, cde.GuidToString(tScreenInfo.MyDashboard.cdeMID));
                this.mDashboardScreen.SetProperty("MyDashboard", this);
                IsNewDashboard = true;
                this.mDashboardScreen.SetProperty("Visibility", false);
            }
            this.mDashboardScreen.SetProperty("IsDashboard", true);
            if (this.mTileCount > 0 && tScreenInfo.MyDashboard["InitialState"] === "error")
                return;
            this.mDashboardScreen.Clear(false);
            this.mScreenIDs = [];
            this.SetElement(this.mDashboardScreen.GetElement());
            if (!tScreenInfo.MyDashboard["Title"] && tScreenInfo.MyDashboard.DashboardTitle)
                tScreenInfo.MyDashboard["Title"] = tScreenInfo.MyDashboard.DashboardTitle; //3.2 Compat
            if (tScreenInfo.MyDashboard["Title"] && tScreenInfo.MyDashboard["Title"].length > 0) {
                this.mDashboardScreen.SetProperty("Title", tScreenInfo.MyDashboard["Title"]);
            }
            var tDashPanels;
            try {
                for (var i_2 = 0; i_2 < tScreenInfo.MyDashPanels.length; i_2++) {
                    tScreenInfo.MyDashPanels[i_2]["Category"] = cdeNMI.ThePB.GetValueFromBagByName(tScreenInfo.MyDashPanels[i_2].PropertyBag, "Category", true);
                    tScreenInfo.MyDashPanels[i_2]["PanelTitle"] = cdeNMI.ThePB.GetValueFromBagByName(tScreenInfo.MyDashPanels[i_2].PropertyBag, "Caption");
                }
                tDashPanels = cdeNMI.SortArrayEx(tScreenInfo.MyDashPanels, "Category,FldOrder,PanelTitle", false, false);
            }
            catch (eee) {
                tDashPanels = tScreenInfo.MyDashPanels;
            }
            var lastCate = "";
            var tTileGroup = null; // cdeNMI.ctrlTileGroup = null;
            var tTileCount = 0;
            var i;
            var _loop_3 = function () {
                var tCategory = tDashPanels[i]["Category"];
                if (i === 0 || lastCate !== tCategory && cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "Visibility") !== "false") {
                    var tTitle = "";
                    if (tCategory !== " NA" && !cde.IsNotSet(tCategory)) {
                        tTitle = tCategory;
                    }
                    if (tTitle.substr(tTitle.length - 5, 5) === "-HIDE")
                        tTitle = " ";
                    tTileGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(null); // cdeNMI.ctrlTileGroup.Create(null, null);
                    tTileGroup.SetProperty("LabelElement", "h1");
                    tTileGroup.SetProperty("LabelClassName", "cdeDashCategory");
                    tTileGroup.SetProperty("ClassName", "cdeDashCategory cdeTiles");
                    if (tTitle.substr(tTitle.length - 5, 5) !== "-NONE") {
                        var dots = 0;
                        for (var tC = 0; tC < tTitle.length; tC++) {
                            if (tTitle[tC] !== ".")
                                break;
                            dots++;
                        }
                        tTitle = tTitle.substr(dots);
                        tTileGroup.SetProperty("Caption", tTitle);
                    }
                    this_3.mDashboardScreen.AppendChild(tTileGroup);
                    lastCate = tCategory;
                }
                var tLabelClass = cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "CategoryLabelClassName");
                if (tLabelClass) {
                    tTileGroup.SetProperty("LabelClassName", tLabelClass);
                }
                var pDashType = new Array();
                if (tDashPanels[i].ControlClass)
                    pDashType = tDashPanels[i].ControlClass.split(':');
                else
                    pDashType[0] = "";
                var tClass = cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "CategoryClassName");
                var tHideFromSideBar = cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "HideFromSideBar"));
                var tRSB = cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "RSB"));
                if (tClass)
                    tTileGroup.SetProperty("ClassName", tClass);
                var tOnClick = null;
                var tStyleExt = "";
                var IsForm = false;
                var tNeverHide = false;
                var tHasRenderTarget = false;
                var tTargetScreen = null;
                var tPanelTitle = cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "Caption");
                if (!tPanelTitle) {
                    tPanelTitle = "";
                }
                switch (pDashType[0]) {
                    case "cdeUpdater":
                        tOnClick = function () { cdeNMI.RequestUpdate(); };
                        tStyleExt = "background-color: green; color: white;";
                        break;
                    case "jsAction":
                        if (pDashType.length < 2)
                            return "continue";
                        tOnClick = tDashPanels[i].ControlClass;
                        break;
                    case "CMyInfo":
                        break;
                    case "CMyNavigator":
                        if (pDashType.length > 1) {
                            tOnClick = function () {
                                if (cdeNMI.MyScreenManager)
                                    cdeNMI.MyScreenManager.TransitToScreen(pDashType[1]);
                            };
                            this_3.mScreenIDs.push(pDashType[1]);
                        }
                        break;
                    default:
                        {
                            tTargetScreen = cdeNMI.MyScreenManager ? cdeNMI.MyScreenManager.GetScreenByID(tDashPanels[i].cdeMID) : null;
                            var tForceLoad = cde.CBool(cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "ForceLoad")) || (tPanelTitle.substr(tPanelTitle.length - 5, 5) !== "-HIDE" && (cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "HTMLUrl") !== null || cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "HTML") !== null)));
                            if (cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "RenderTarget")) {
                                tHasRenderTarget = true;
                                tNeverHide = cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "NeverHide"));
                                if (!tForceLoad)
                                    tForceLoad = tNeverHide;
                            }
                            var tLoadSubScreens = tForceLoad;
                            var tRRT = false;
                            if (!tTargetScreen) {
                                tTargetScreen = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Screen, true);
                                if (!tTargetScreen)
                                    return "continue";
                                tTargetScreen.MyHostNode = tDashPanels[i].cdeN;
                                //debugger;
                                tTargetScreen.InitControl(tHasRenderTarget ? null : cdeNMI.MyScreenManager, null, tDashPanels[i].PropertyBag, cde.GuidToString(tDashPanels[i].cdeMID));
                                if (!cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "IsPinned")) && !tNeverHide)
                                    tTargetScreen.SetProperty("Visibility", false);
                                if (tDashPanels[i].HtmlContent)
                                    tTargetScreen.AppendContent(tDashPanels[i].HtmlContent);
                                else {
                                    tTargetScreen.SetProperty("ClassName", pDashType[0]);
                                    tTargetScreen.AppendContent("<h1 class='cdeHeadline'>Loading...please wait</h1><progress>loading...</progress>");
                                }
                                tLoadSubScreens = true;
                                this_3.mDashboardScreen.MyChildren[cde.GuidToString(tDashPanels[i].cdeMID)] = tTargetScreen;
                            }
                            else {
                                tRRT = true;
                            }
                            if (tLoadSubScreens || tRSB || tScreenInfo.ForceReload || tDashPanels[i].ControlClass === "CMyLiveScreen") {
                                if (cdeNMI.MyEngine) {
                                    if (pDashType.length > 1 && pDashType[1] !== "" && !cdeNMI.MyEngine.HasDataToFetch(cde.GuidToString(tDashPanels[i].cdeMID) + ":" + tDashPanels[i].ControlClass)) {
                                        cdeNMI.MyEngine.AddDataToFetch(cde.GuidToString(tDashPanels[i].cdeMID) + ":" + tDashPanels[i].ControlClass + ":" + cde.GuidToString(this_3.MyScreenID) + ":true");
                                        if (tForceLoad)
                                            cdeNMI.MyEngine.CheckDataToFetch(cde.GuidToString(tDashPanels[i].cdeMID));
                                    }
                                }
                                else {
                                    this_3.FireEvent(true, "FetchData", cde.GuidToString(tDashPanels[i].cdeMID) + ":" + tDashPanels[i].ControlClass + ":" + cde.GuidToString(this_3.MyScreenID) + ":true");
                                }
                            }
                            if (tDashPanels[i].Flags && (tDashPanels[i].Flags & 8) !== 0)
                                tTargetScreen.SetProperty("NoShowAll", true);
                            if (pDashType[0] === "CMyDashboard") {
                                tTargetScreen.SetProperty("IsDashboard", true);
                            }
                            tTargetScreen.SetProperty("ControlClass", tDashPanels[i].ControlClass);
                            tTargetScreen.SetProperty("DashID", this_3.MyScreenID);
                            var tSTitle = cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "ScreenTitle");
                            if (!tSTitle)
                                tSTitle = cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "Title");
                            tTargetScreen.SetProperty("ScreenTitle", tSTitle);
                            if (tPanelTitle.substr(tPanelTitle.length - 5, 5) === "-HIDE" || tHideFromSideBar === true) {
                                tTargetScreen.SetProperty("HideFromSideBar", true);
                            }
                            tTargetScreen.SetProperty("Description", cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "Description"));
                            tTargetScreen.SetProperty("HidePins", cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "HidePins")));
                            tTargetScreen.SetProperty("HidePinPins", cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "HidePinPins")));
                            tTargetScreen.SetProperty("IsPopup", cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(tDashPanels[i].PropertyBag, "IsPopup")));
                            tOnClick = function (pSender) {
                                if (cdeNMI.MyScreenManager)
                                    cdeNMI.MyScreenManager.TransitToScreen(pSender.GetProperty("cdeMID"));
                            };
                            this_3.mScreenIDs.push(tDashPanels[i].cdeMID);
                            if (cdeNMI.MyScreenManager && !tNeverHide) { // !tHasRenderTarget) {
                                cdeNMI.MyScreenManager.RegisterScreen(tTargetScreen.MyScreenID, tTargetScreen, true);
                                if (!tRRT)
                                    cdeNMI.MyScreenManager.TransitToWaitingScreen(cde.GuidToString(tDashPanels[i].cdeMID));
                            }
                            tTileCount++;
                            IsForm = true;
                        }
                        break;
                }
                if (tPanelTitle.substr(tPanelTitle.length - 5, 5) !== "-HIDE" && !tNeverHide) {
                    var tTileButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tTileGroup, { PreInitBag: [], PostInitBag: ["ControlTW=2", "ControlTH=2", "Title=" + tPanelTitle, "Style=" + tStyleExt] });
                    tTileButton.SetProperty("OnClick", tOnClick);
                    tTileButton.SetProperty("TabIndex", tDashPanels[i].FldOrder + 101);
                    if (IsForm) {
                        tTileButton.MyTRF = new cdeNMI.TheTRF(cde.GuidToString(tDashPanels[i].cdeO), 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.TileButton, 2, tPanelTitle, 2)); //.cdeO was .cdeMID
                        tTileButton.MyTRF.ModelID = this_3.MyScreenID;
                        tTileButton.MyFieldInfo = tTileButton.MyTRF.FldInfo;
                        tTileButton.MyFieldInfo.FldOrder = tDashPanels[i].FldOrder;
                        tTileButton.MyFieldInfo.cdeO = tDashPanels[i].cdeO;
                        tTileButton.MyFieldInfo.cdeN = tDashPanels[i].cdeN;
                        tTileButton.MyFieldInfo.cdeMID = tDashPanels[i].cdeMID;
                    }
                    else {
                        tTileButton.SetProperty("UXID", cde.GuidToString(tDashPanels[i].cdeMID));
                    }
                    tTileButton.SetProperty("ID", "DASH_" + cde.GuidToString(tDashPanels[i].cdeMID));
                    tTileButton.RegisterNMIControl();
                    this_3.mDashboardScreen.MyChildren[cde.GuidToString(tDashPanels[i].cdeMID)] = tTileButton;
                    tTileButton.SetProperty("cdeMID", tDashPanels[i].cdeMID);
                    //if (tCookie) tTileButton.SetProperty("Cookie", tCookie);
                    if (tDashPanels[i].PropertyBag) {
                        cdeNMI.ThePB.SetPropertiesFromBag(tTileButton, tDashPanels[i].PropertyBag, tDashPanels); //ok..is after InitControl
                        if (tTileButton.GetProperty("IsRefresh"))
                            this_3.mDashboardScreen.MyRefreshButton = tTileButton;
                    }
                    if (cdeNMI.MyEngine && cdeNMI.MyEngine.IsNodeDown(tDashPanels[i].cdeN)) {
                        tTileButton.SetProperty("IsOwnerDown", true);
                    }
                    if (tTargetScreen) {
                        tTargetScreen.MyRC = this_3.mTileCount;
                        if (!tTargetScreen.GetProperty("NUITags"))
                            tTargetScreen.SetProperty("NUITags", "Screen " + TheDashboard.AllTileCount++);
                        if (tTargetScreen.MyNMIControl) {
                            tTargetScreen.MyNMIControl.FireEvent(true, "RRT");
                        }
                    }
                    this_3.mTileCount++;
                }
                else {
                    if (tTargetScreen)
                        tTargetScreen.SetProperty("IsHidden", true);
                }
            };
            var this_3 = this;
            for (i = 0; i < tDashPanels.length; i++) {
                _loop_3();
            }
            if (tTileCount > 1) {
                if (cde.CBool(tScreenInfo.MyDashboard["HideShowAll"]) === false) {
                    var t_11 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(tTileGroup, { PreInitBag: ["ControlTW=2", "ControlTH=2"], PostInitBag: ["Title=<span class='fa fa-5x'>&#xf067;</span></br>Show All"] });
                    t_11.SetProperty("OnClick", function () {
                        _this.ShowAllScreens();
                    });
                }
            }
            this.mDashboardScreen.SetInitialized(true);
            if (IsNewDashboard) {
                if (!cde.MyBaseAssets.MyServiceHostInfo.WasInitialScreenVisible) {
                    if (cde.MyBaseAssets.MyCommStatus.LastStartScreen) {
                        cdeNMI.MyScreenManager.TransitToScreen(cde.MyBaseAssets.MyCommStatus.LastStartScreen);
                    }
                    else if (cde.MyBaseAssets.MyServiceHostInfo.StartScreen !== "" && tScreenInfo.MyDashboard["InitialState"] !== "error")
                        cdeNMI.MyScreenManager.GotoStationHome(false);
                    else {
                        if (tScreenInfo.MyDashboard["InitialState"] && tScreenInfo.MyDashboard["InitialState"] !== "error")
                            cdeNMI.MyScreenManager.TransitToScreen(tScreenInfo.MyDashboard["InitialState"]);
                        else {
                            cdeNMI.MyScreenManager.GotoStationHome(false);
                        }
                    }
                }
                if (cdeNMI.MyScreenManager) {
                    //this.mDashboardScreen.SetProperty("ScreenTitle", "All-Plugins Dashboard");
                    cdeNMI.MyScreenManager.RegisterScreen(this.mDashboardScreen.MyScreenID, this.mDashboardScreen, false);
                    cdeNMI.MyScreenManager.TransitToWaitingScreen(this.mDashboardScreen.MyScreenID);
                }
            }
        };
        TheDashboard.prototype.ShowAllScreens = function () {
            var mScreenIDs = this.mScreenIDs;
            for (var id in mScreenIDs) {
                if (Object.prototype.hasOwnProperty.call(mScreenIDs, id)) {
                    var tScreen = cdeNMI.MyScreenManager ? cdeNMI.MyScreenManager.GetScreenByID(mScreenIDs[id]) : null;
                    if (tScreen && !cde.CBool(tScreen.GetProperty("NoShowAll"))) {
                        tScreen.SetProperty("IsPinned", true);
                        if (cdeNMI.MyEngine)
                            cdeNMI.MyEngine.CheckDataToFetch(mScreenIDs[id]);
                        var isVisible = tScreen.GetProperty("Visibility") ? false : true;
                        tScreen.SetProperty("Visibility", isVisible);
                        tScreen.ShowPin();
                    }
                }
            }
        };
        TheDashboard.AllTileCount = 0;
        return TheDashboard;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.TheDashboard = TheDashboard;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /////////////////////////////////////////////////////////////////////////
    /////***********************************************
    /////   C-DMyForms GENERATOR
    /////***********************************************
    /**
    * Creates a complete form for a given StorageMirror
    *
    * (4.1 Ready!)
    */
    var ctrlFormView = /** @class */ (function (_super) {
        __extends(ctrlFormView, _super);
        function ctrlFormView(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.MyScreenInfo = null;
            _this.MyFormInfo = null;
            _this.mBaseDiv = null;
            _this.formMain = null;
            return _this;
        }
        ctrlFormView.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.FormView;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            if (!this.MyTRF) {
                return false;
            }
            this.MyTableName = cde.GuidToString(this.MyTRF.TableName);
            this.MyStorageName = this.GetSetting("TableReference");
            if (!this.MyStorageName)
                this.MyStorageName = this.MyTableName;
            this.MyScreenInfo = cdeNMI.MyNMIModels[this.MyScreenID];
            var pClassName = 'CMyForm';
            var tRenderTarget = null; // this.GetSetting("RenderTarget");
            if (!tRenderTarget)
                tRenderTarget = 'Inline_' + cde.GuidToString(this.MyTableName);
            var tDiv = document.getElementById(tRenderTarget);
            if (tDiv)
                this.mBaseDiv = tDiv;
            if (!this.mBaseDiv && !pTargetControl && this.MyScreenInfo.MyStorageMeta[this.MyTableName]) {
                this.mBaseDiv = document.getElementById('Content_' + cde.GuidToString(this.MyScreenInfo.MyStorageMeta[this.MyTableName].TargetElement));
            }
            if (!this.mBaseDiv) {
                this.mBaseDiv = document.createElement("div");
                this.mBaseDiv.className = pClassName;
                if (this.MyTarget) {
                    var tF = cdeNMI.MyTCF.GetRegisteredControl("TABLES", this.MyTableName);
                    if (tF)
                        tF.RemoveFormHooks(tF.MyFormControls);
                    this.MyTarget.GetElement().innerHTML = ""; //OK
                }
            }
            else {
                var tF = cdeNMI.MyTCF.GetRegisteredControl("TABLES", this.MyTableName);
                if (tF)
                    tF.RemoveFormHooks(tF.MyFormControls);
                this.mBaseDiv.innerHTML = ""; //OK
            }
            this.mBaseDiv.style.width = "inherit";
            this.mBaseDiv.style.height = "inherit";
            this.SetElement(this.mBaseDiv);
            var tCurrentRow = cde.CInt(this.MyTRF.RowNo);
            if (this.MyFieldInfo && cde.CBool(this.MyFieldInfo["ILF"]) && !this.MyScreenInfo.IsLiveForm)
                this.MyScreenInfo.IsLiveForm = true;
            if (!this.MyScreenInfo.IsLiveForm && !this.MyScreenInfo.MyStorageMirror[this.MyStorageName] && !this.MyScreenInfo.MyStorageMeta[this.MyTableName]) {
                this.formMain = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this); //ctrlTileGroup.Create(this, null);
                cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.formMain, { PreInitBag: ["Element=h1"], PostInitBag: ["iValue=Neither meta-data nor storage data defined"] });
            }
            else {
                if ((this.MyScreenInfo.IsLiveForm || this.MyScreenInfo.MyStorageMirror[this.MyStorageName]) && tCurrentRow >= 0) {
                    cdeNMI.MyEngine.RegisterEvent("RecordUpdated_" + this.MyStorageName + "_" + tCurrentRow, function (pSI, pModelGUID, tTabName, tRowID) {
                        //Updates a form from changes in the corresponding table p- but no templates or wizards (they should always be blank)
                        if (pModelGUID && pModelGUID !== "" && !_this.GetSetting("TableReference")) {
                            var tMod = cdeNMI.MyNMIModels[pModelGUID];
                            for (var cc in _this.MyFormControls) {
                                var tN = _this.MyFormControls[cc].GetProperty("DataItem");
                                if (tN) {
                                    if (!Object.prototype.hasOwnProperty.call(tMod.MyStorageMirror[tTabName][tRowID], 'SecToken')) {
                                        var tCont = cdeNMI.GetFldContent(tMod.MyStorageMirror[tTabName][tRowID], _this.MyFormControls[cc].MyFieldInfo, _this.MyScreenInfo.IsGenerated, false);
                                        if (_this.MyFormControls[cc].GetProperty("Value") !== tCont)
                                            _this.MyFormControls[cc].SetProperty("iValue", tCont);
                                    }
                                }
                            }
                            _this.ValidateRules(pModelGUID, null, tTabName, tRowID, _this.MyFormControls, true, false); //Runs values change in a table against the form - no push to Relay
                        }
                    });
                    if (!this.MyScreenInfo.IsLiveForm) {
                        if (!this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow] || !this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow].cdeM || this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow].cdeM === "") {
                            if (!this.MyScreenInfo.MyStorageMeta[this.MyTableName] || this.MyScreenInfo.MyStorageMeta[this.MyTableName].FormFields.length === 0) {
                                if (!this.MyScreenInfo.MyStorageMeta[this.MyTableName]) {
                                    this.MyScreenInfo.MyStorageMeta[this.MyTableName] = new cdeNMI.TheFormInfo();
                                    this.MyScreenInfo.MyStorageMeta[this.MyTableName].FormTitle = this.MyTableName;
                                    this.MyScreenInfo.MyStorageMeta[this.MyTableName].FormFields = [];
                                }
                                this.CreateFormInfo(this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow], "", this.MyScreenInfo.MyStorageMeta[this.MyTableName], 0);
                                this.MyScreenInfo.IsGenerated = true;
                            }
                        }
                        else {
                            this.MyScreenInfo.MyStorageMeta[this.MyTableName] = JSON.parse(this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow].cdeM);
                        }
                    }
                }
                if (!this.MyScreenInfo.MyStorageMeta[this.MyTableName] || this.MyScreenInfo.MyStorageMeta[this.MyTableName].FormFields.length === 0) {
                    this.formMain = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this);
                    cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(this.formMain, { PreInitBag: ["Element=h1"], PostInitBag: ["iValue=This form does not contain any controls, yet"] });
                }
                else {
                    this.MyFormInfo = this.MyScreenInfo.MyStorageMeta[this.MyTableName];
                    var tC = this;
                    if (this.MyFormInfo.IsUsingAbsolute) {
                        tC = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this);
                        tC.SetProperty("ClassName", "cdeRelativeDiv");
                    }
                    this.formMain = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(tC);
                    this.formMain.cdeMID = this.MyScreenInfo.cdeMID; //TODO: Verify what cdeMID is required here?
                    if (this.MyFieldInfo && this.MyFieldInfo["TitleClassName"])
                        this.formMain.SetProperty("LabelClassName", this.MyFieldInfo["TitleClassName"]);
                    else
                        this.formMain.SetProperty("LabelClassName", "cdeFormTitle");
                    this.formMain.SetProperty("IsSmall", true);
                    this.formMain.SetProperty("Float", "none");
                    this.formMain.SetProperty("HidePins", true);
                    if (this.MyFormInfo.IsUsingAbsolute) {
                        this.formMain.SetProperty("ClassName", "CMyCanvas");
                    }
                    else {
                        this.formMain.SetProperty("ClassName", "cdeInnerForm");
                    }
                    //Set Form Properties from Bag
                    var tCap = cdeNMI.ThePB.GetValueFromBagByName(this.MyFormInfo.PropertyBag, "Caption");
                    if (tCap && cdeNMI.MyScreenManager) {
                        var tSCreen = cdeNMI.MyScreenManager.GetScreenByID(this.MyTableName);
                        if (tSCreen)
                            tSCreen.SetProperty("Caption", tCap);
                        cdeNMI.ThePB.RemoveProperty(this.MyFormInfo.PropertyBag, "Caption");
                    }
                    var bUseMargin = cde.CBool(cdeNMI.ThePB.GetValueFromBagByName(this.MyFormInfo.PropertyBag, "UseMargin"));
                    cdeNMI.ThePB.SetPropertiesFromBag(this.formMain, this.MyFormInfo.PropertyBag);
                    if (this.MyFormInfo.IsUsingAbsolute) {
                        tC.SetProperty("TileWidth", this.formMain.GetProperty("TileWidth"));
                        tC.SetProperty("TileHeight", this.formMain.GetProperty("TileHeight"));
                    }
                    else {
                        //if (cde.MyBaseAssets.MyServiceHostInfo.WebPlatform != 1) {
                        //this.formMain.GetElement().style.marginRight = (cdeNMI.GetSizeFromTile(1) / 2) + "px";
                        this.formMain.GetElement().style.width = "fit-content";
                        this.formMain.GetElement().style.maxWidth = "unset";
                        //}
                    }
                    var tRowID = null;
                    if (this.MyScreenInfo.MyStorageMirror[this.MyStorageName] && tCurrentRow >= 0) {
                        this.MyDataRow = this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow];
                        if (this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow] && this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow].cdeMID)
                            tRowID = this.MyScreenInfo.MyStorageMirror[this.MyStorageName][tCurrentRow].cdeMID;
                    }
                    var tFormFields = cdeNMI.SortArrayByProperty(this.MyFormInfo.FormFields, "FldOrder", true, false);
                    var _loop_4 = function (j) {
                        var tFldInfo = tFormFields[j];
                        if (tFldInfo && (tFldInfo.Flags & 16) !== 0)
                            return "continue"; //Skip if NoShowInForm is set
                        var tFldID = this_4.MyStorageName + '_' + tCurrentRow + '_' + tFldInfo.FldOrder;
                        //Set tFldInfo with Extra Properties from PropertyBag
                        cdeNMI.ThePB.ConvertPropertiesFromBag(tFldInfo);
                        //Calculate Parent Field
                        var fldParent = this_4.formMain;
                        var PFldNo = cde.CInt(tFldInfo["ParentFld"]);
                        if (PFldNo > 0 && PFldNo < tFldInfo.FldOrder) {
                            if (this_4.MyFormControls[this_4.MyStorageName + '_' + tCurrentRow + '_' + PFldNo])
                                fldParent = this_4.MyFormControls[this_4.MyStorageName + '_' + tCurrentRow + '_' + PFldNo];
                            else
                                return "continue"; //No draw if parent is not found
                        }
                        //Calculate TRF of Control
                        var tTRF = new cdeNMI.TheTRF(this_4.MyStorageName, tCurrentRow, tFldInfo);
                        tTRF.RowID = tRowID;
                        tTRF.ModelID = this_4.MyScreenID;
                        tFldInfo["IsInTable"] = false;
                        switch (tFldInfo.Type) {
                            default:
                                {
                                    var tTE = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(fldParent, { ScreenID: this_4.MyScreenID, TRF: tTRF }); // ctrlTileEntry.Create(fldParent, tTRF, null, this.MyScreenID);
                                    this_4.MyFormControls[tFldID] = tTE;
                                    tTE.MyDataView = this_4;
                                    tTE.CreateControl(tFldID, function (e) {
                                        e.SetProperty("OnValueChanged", function (sender) {
                                            var tLocalOnly = _this.MyFormInfo.IsPostingOnSubmit;
                                            if (_this.MyScreenInfo.IsLiveForm && cdeNMI.MyEngine) {
                                                cdeNMI.MyEngine.PublishToNMI('SETP', sender.MyFieldInfo.DataItem + '=' + sender.GetProperty("Value"), sender.MyFieldInfo.cdeO, true); //ThingProperties
                                                tLocalOnly = true;
                                            }
                                            //Checks rules after each ValueChange. tLocalOnly is true for Templates and Wizards
                                            _this.ValidateRules(_this.MyScreenID, _this.MyTableName, _this.MyStorageName, sender.MyTRF ? sender.MyTRF.RowNo : 0, _this.MyFormControls, tLocalOnly, false); //if IsPostingOnSubmit is true, no push to node
                                        });
                                        if (e.MyBaseType === cdeNMI.cdeControlType.TileButton && cde.CBool(e.GetProperty("IsSubmit")) === true) { //Wizard and Template submit
                                            e.SetProperty("OnClick", function (sender) {
                                                _this.ValidateRules(_this.MyScreenID, _this.MyTableName, _this.MyStorageName, sender.MyTRF ? sender.MyTRF.RowNo : 0, _this.MyFormControls, false, true); //Submit button pushed - all values will be written and sent to Node
                                                if (!_this.PropertyBag["FinishPage"] && !_this.PropertyBag["ProcessingPage"]) {
                                                    if (_this.PropertyBag["FinishScreenID"]) {
                                                        var tScrParts = _this.PropertyBag["FinishScreenID"];
                                                        if (tScrParts === "CLOSE") {
                                                            var tLast = cdeNMI.MyScreenManager.GetCurrentScreen();
                                                            if (tLast) {
                                                                var tOld = tLast.GetProperty("OldScreen");
                                                                if (tOld)
                                                                    cdeNMI.MyScreenManager.TransitToScreen(tOld);
                                                            }
                                                        }
                                                        else {
                                                            cdeNMI.MyScreenManager.TransitToScreen(tScrParts); // this.PropertyBag["FinishScreenID"]);
                                                        }
                                                    }
                                                    else if (_this.MyTRF.FldInfo["TableReference"])
                                                        cdeNMI.MyScreenManager.TransitToScreen(_this.MyTRF.FldInfo["TableReference"]);
                                                }
                                            });
                                        }
                                    });
                                }
                                return "continue";
                            case cdeNMI.cdeControlType.Table:
                                {
                                    var tTE = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(fldParent, { ScreenID: this_4.MyScreenID, TRF: tTRF, PostInitBag: ["ContentOuterClassName=cdeTableInline", "ContainerClassName=cdeTableTEContainer"] }); // ctrlTileEntry.Create(fldParent, tTRF, null, this.MyScreenID);
                                    this_4.MyFormControls[tFldID] = tTE;
                                    if (cdeNMI.MyTCF)
                                        cdeNMI.MyTCF.RegisterControl(cde.GuidToString(tFldInfo.cdeMID), "TE", tTE);
                                    tTE.MyDataView = this_4;
                                    tTE.CreateControl(tFldID, function () {
                                        //ignored
                                    });
                                    if (tFldInfo && tFldInfo.PropertyBag && tFldInfo.PropertyBag.length > 0) {
                                        cdeNMI.ThePB.SetPropertiesFromBag(tTE, tFldInfo.PropertyBag, null, false, false);
                                        //(tScreenInfo && tScreenInfo.MyStorageMirror[pTEControlMyTRF.TableName]) ? tScreenInfo.MyStorageMirror[pTEControlMyTRF.TableName][pTgtControl.MyTRF ? pTgtControl.MyTRF.RowNo : 0] : null,
                                    }
                                }
                                return "continue";
                            case cdeNMI.cdeControlType.CollapsibleGroup:
                                this_4.MyFormControls[tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CollapsibleGroup).Create(fldParent, { TRF: tTRF }); //cdeNMI.ctrlCollapsibleGroup.Create(fldParent, tTRF);
                                if (bUseMargin === true)
                                    this_4.MyFormControls[tFldID].SetProperty("UseMargin", true);
                                break;
                            case cdeNMI.cdeControlType.TileGroup:
                                this_4.MyFormControls[tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(fldParent, { TRF: tTRF }); //cdeNMI.ctrlTileGroup.Create(fldParent, tTRF);
                                this_4.MyFormControls[tFldID].SetProperty("ClassName", "cdeTileGroup");
                                break;
                            case cdeNMI.cdeControlType.FormButton:
                                switch (tFormFields[j].DataItem) {
                                    case "CDE_DELETE":
                                        if (tFldInfo["TableReference"]) {
                                            this_4.MyFormControls[tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(fldParent, { PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-3x'>&#xf1f8;</span>", "ClassName=cdeBadActionButton cdeDeleteButton"] });
                                            this_4.MyFormControls[tFldID].SetProperty("OnClick", function (pSender, evt) {
                                                var tMe = pSender;
                                                if (evt.shiftKey) {
                                                    tMe.DeleteRecord(tMe.MyDataRow);
                                                    cdeNMI.MyScreenManager.TransitToScreen(tFldInfo["TableReference"]);
                                                }
                                                else {
                                                    if (cdeNMI.MyPopUp)
                                                        cdeNMI.MyPopUp.Show('Are you sure you want to delete this record? ', false, null, 1, function () {
                                                            tMe.DeleteRecord(tMe.MyDataRow);
                                                            cdeNMI.MyScreenManager.TransitToScreen(tFldInfo["TableReference"]);
                                                        }, null, tMe.MyDataRow, tMe);
                                                }
                                            });
                                            if (!this_4.MyDataRow)
                                                this_4.MyFormControls[tFldID].SetProperty("Disabled", true);
                                        }
                                        break;
                                }
                                break;
                        }
                        cdeNMI.MyTCF.SetControlEssentials(this_4.MyFormControls[tFldID], this_4.MyFormControls[tFldID], tTRF);
                    };
                    var this_4 = this;
                    for (var j = 0; j < tFormFields.length; j++) {
                        _loop_4(j);
                    }
                }
            }
            this.ValidateRules(this.MyScreenID, this.MyTableName, this.MyStorageName, tCurrentRow, this.MyFormControls, true, false); //Just verify all rules on the form
            cdeNMI.TheFlashCache.FlushCache();
            this.RegisterEvent("RRT", function () { _this.RenderRenderTargets(); });
            this.SetProperty("ID", "FORM_" + this.MyTableName);
            this.RegisterNMIControl();
            return true;
        };
        ctrlFormView.prototype.OnLoad = function (bIsVisible) {
            if (this.GetProperty("TTSCookie") && cdeNMI.MyScreenManager) {
                //cdeNMI.MyToast.ShowToastMessage("Form loaded with ID:" + this.GetProperty("TTSCookie"));
                var tRID = this.GetProperty("TTSCookie");
                this.SetProperty("TTSCookie", null);
                //cdeNMI.MyEngine.PublishToNMI("NMI_GET_DATA:" + this.MyTableName + ":CMyForm:" + this.MyTableName + ":" + this.GetProperty("TTSCookie") +":true:false", '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                cdeNMI.MyScreenManager.CreateDataViewScreen(this.MyScreenInfo, null, this.MyTableName, this.GetProperty("ExtraInfo"), this.MyTableName, false, tRID);
                return;
            }
            else {
                if (this.MyFieldInfo && this.MyFieldInfo["TableReference"] && this.MyFormInfo.IsAlwaysEmpty === true) {
                    cdeNMI.MyScreenManager.CreateDataViewScreen(this.MyScreenInfo, null, this.MyTableName, this.GetProperty("ExtraInfo"), this.MyTableName, true);
                }
            }
            if (this.GetProperty("StartGroup"))
                this.SetProperty("SetGroup", "GRP:" + this.GetProperty("StartGroup"));
            _super.prototype.OnLoad.call(this, bIsVisible);
        };
        ctrlFormView.prototype.OnLoaded = function () {
            _super.prototype.OnLoad.call(this);
        };
        ctrlFormView.prototype.SetProperty = function (pName, pValue) {
            if (pName === "TileWidth") {
                if (cde.CBool(this.GetProperty("UseMargin")))
                    pValue = cde.CInt(pValue) + 1;
            }
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "SetGroup") {
                cdeNMI.MyTCF.ToggleGroup(this.MyTableName, pValue.substr(4));
            }
        };
        ctrlFormView.prototype.ResetData = function () {
            for (var i in this.MyFormControls) {
                var tF = this.MyFormControls[i];
                if (tF.MyBaseType === cdeNMI.cdeControlType.TileEntry) {
                    tF.MyNMIControl.SetToDefault(false);
                }
            }
            return false;
        };
        ctrlFormView.prototype.ReloadData = function () {
            for (var i in this.MyFormControls) {
                var tF = this.MyFormControls[i];
                if (cde.CBool(tF.GetProperty("IsRefresh"))) {
                    if (tF.MyBaseType === cdeNMI.cdeControlType.TileEntry)
                        tF.DoFireClick(tF.MyNMIControl);
                    else
                        tF.DoFireClick(tF);
                    return true;
                }
            }
            return false;
        };
        ctrlFormView.prototype.RenderRenderTargets = function () {
            if (!this.MyFormInfo)
                return;
            var tFormFields = cdeNMI.SortArrayByProperty(this.MyFormInfo.FormFields, "FldOrder", true, false);
            for (var j = 0; j < tFormFields.length; j++) {
                var tFldInfo = tFormFields[j];
                if (tFldInfo && (tFldInfo.Flags & 16) !== 0)
                    continue;
                if (tFldInfo["RenderTarget"]) {
                    var tCurrentRow = cde.CInt(this.MyTRF.RowNo);
                    var tFldID = this.MyTableName + '_' + tCurrentRow + '_' + tFldInfo.FldOrder;
                    var tTRF = new cdeNMI.TheTRF(this.MyTableName, tCurrentRow, tFldInfo);
                    tTRF.ModelID = this.MyScreenID;
                    var tTarget = cdeNMI.GenerateFinalString(tFldInfo["RenderTarget"], false, tTRF);
                    var tCtrl = this.MyFormControls[tFldID];
                    tCtrl.FindRenderTarget(tTarget);
                }
            }
        };
        ctrlFormView.prototype.DeleteRecord = function (pDataRow) {
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.PublishToNMI('NMI_DEL_ID:' + this.MyTableName + ":" + pDataRow.cdeMID, pDataRow.cdeN);
        };
        return ctrlFormView;
    }(cdeNMI.TheDataViewBase));
    cdeNMI.ctrlFormView = ctrlFormView;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ctrlTableRow = /** @class */ (function (_super) {
        __extends(ctrlTableRow, _super);
        function ctrlTableRow(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mRow = null;
            return _this;
        }
        ctrlTableRow.Create = function (pTargetControl, pTRF, pRow, pIndex, pClassName, IsHeader) {
            var tTile = new ctrlTableRow(pTRF);
            if (pRow)
                tTile.mRow = pRow;
            tTile.InitControl(pTargetControl, pTRF);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            return tTile;
        };
        ctrlTableRow.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.TableRow;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyTRF = pTRF;
            if (!this.mRow)
                this.mRow = document.createElement("tr");
            this.SetElement(this.mRow);
            return null;
        };
        ctrlTableRow.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "ClassName" && this.mRow)
                this.mRow.className = pValue;
        };
        ctrlTableRow.prototype.AppendChild = function (pChild) {
            this.mRow.appendChild(pChild.GetElement());
        };
        return ctrlTableRow;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTableRow = ctrlTableRow;
    /**
     * Creates a table Cell
     *
     * (3.2 Ready!)
     */
    var ctrlTableCell = /** @class */ (function (_super) {
        __extends(ctrlTableCell, _super);
        function ctrlTableCell(pTRF) {
            var _this = _super.call(this, null, pTRF) || this;
            _this.mCell = null;
            _this.mRow = null;
            return _this;
        }
        ctrlTableCell.Create = function (pTargetControl, pTRF, pRow, pIndex, pClassName, IsHeader) {
            var tTile = new ctrlTableCell(pTRF);
            var tBag = [];
            if (IsHeader)
                tBag.push("IsHeader=true");
            if (pIndex)
                tBag.push("ColumnIndex=" + pIndex);
            if (pRow)
                tTile.mRow = pRow;
            tTile.InitControl(pTargetControl, pTRF, tBag);
            if (pClassName)
                tTile.SetProperty("ClassName", pClassName);
            return tTile;
        };
        ctrlTableCell.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.TableCell;
            if (!pTRF)
                pTRF = new cdeNMI.TheTRF(null, 0, new cdeNMI.TheFieldInfo(this.MyBaseType, 0, null));
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            if (this.mRow && this.MyFieldInfo)
                this.mCell = this.mRow.insertCell(cde.CInt(this.MyFieldInfo["ColumnIndex"]));
            else {
                if (this.MyFieldInfo && cde.CBool(this.MyFieldInfo["IsHeader"]))
                    this.mCell = document.createElement('th');
                else
                    this.mCell = document.createElement('td');
            }
            this.mCell.className = "cdeTabEntry";
            var bIsEdit = (pTRF.FldInfo.Flags & 2) !== 0;
            this.SetElement(this.mCell, bIsEdit); //true);
            return true;
        };
        ctrlTableCell.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "ClassName" && this.mCell)
                this.mCell.className = pValue;
            if (pName === "CellStyle" && this.mCell)
                this.mCell.style.cssText = pValue;
        };
        ctrlTableCell.prototype.AppendChild = function (pChild) {
            this.MyChildren.push(pChild);
            this.mCell.appendChild(pChild.GetElement());
        };
        return ctrlTableCell;
    }(cdeNMI.TheNMIBaseControl));
    cdeNMI.ctrlTableCell = ctrlTableCell;
    /**
* Creates a Table View of a given StorageMirror
* Requires TRF to be set with the Table Name!
*
* (3.2 Ready!)
*/
    var ctrlTableView = /** @class */ (function (_super) {
        __extends(ctrlTableView, _super);
        function ctrlTableView(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.MyScreenInfo = null;
            _this.MyFormInfo = null;
            _this.MyTableTitle = null;
            _this.btnAdder = null;
            _this.inputFilter = null;
            _this.InfoText = null;
            _this.mBaseDiv = null;
            _this.IsPropertyTable = false;
            _this.IsNMIOnly = false;
            _this.mSortFldID = -1;
            _this.mColHeader = null;
            _this.rowAdder = null;
            _this.tableMain = null;
            _this.tableContainer = null;
            _this.tableBody = null;
            _this.mTableRows = [];
            _this.mCurrentFormFieldsInfo = null;
            _this.MyMetaData = null;
            _this.IsInEdit = false;
            //Drag Drop Functions
            _this.mFileList = [];
            return _this;
        }
        ctrlTableView.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.Table;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            var pTableInfo = this.GetSetting("ExtraInfo");
            if (pTableInfo) {
                var tStr = pTableInfo.split(':');
                if (tStr.length > 4)
                    this.SetProperty("PageSize", cde.CInt(tStr[4]));
                if (tStr.length > 5)
                    this.SetProperty("CurrentPage", cde.CInt(tStr[5]));
                if (tStr.length > 7)
                    this.SetProperty("CurrentFilter", tStr[7]);
            }
            if (!this.MyTRF) {
                console.log("pTRF HAS to be specified!");
                return false;
            }
            this.MyScreenInfo = cdeNMI.MyNMIModels[this.MyScreenID];
            this.SetProperty("NoTE", true);
            this.RegisterNMIControl();
            var pTableName = this.MyTRF.TableName;
            if (this.MyFieldInfo && this.MyFieldInfo.Type === cdeNMI.cdeControlType.Table && this.MyFieldInfo.DataItem)
                pTableName = this.MyFieldInfo.DataItem;
            ///Create Meta Data for Property Bag Table
            if (pTableName.substr(0, 13).toLowerCase() === "mypropertybag") {
                if (!this.MyTRF || !this.MyFieldInfo || !this.MyScreenInfo.MyStorageMirror[this.MyTRF.TableName] || !this.MyScreenInfo.MyStorageMirror[this.MyTRF.TableName][this.MyTRF.RowNo] || !this.MyScreenInfo.MyStorageMirror[this.MyTRF.TableName][this.MyTRF.RowNo].MyPropertyBag) {
                    if (pTargetControl)
                        pTargetControl.GetElement().innerHTML = "Not a Thing or No Properties found";
                    return false;
                }
                var tTableParas = pTableName.split(';');
                this.IsNMIOnly = (tTableParas.length > 1 && tTableParas[1] === '1');
                pTableName = cde.GuidToString("PB" + this.MyTRF.RowID);
                this.RefreshPropTable(pTableName);
                this.MyMetaData = new cdeNMI.TheFormInfo();
                this.MyMetaData.FormFields = [];
                this.MyMetaData.IsReadOnly = (this.MyFieldInfo.Flags & 2) === 0;
                this.MyMetaData.IsGenerated = false;
                this.MyMetaData.TargetElement = pTableName;
                this.MyMetaData.PropertyBag = ["Caption=" + (cde.IsNotSet(this.MyFieldInfo["Caption"]) ? "" : this.MyFieldInfo["Caption"])];
                var tSizeX = 3;
                if (cde.CInt(this.MyFieldInfo["TileWidth"]) < 3)
                    tSizeX = 1;
                var tSizeX1 = 3;
                if (cde.CInt(this.MyFieldInfo["TileWidth"]) > 3)
                    tSizeX1 = cde.CInt(this.MyFieldInfo["TileWidth"]) - 3;
                for (var index = 0; index < (this.IsNMIOnly ? 2 : 3); index++) {
                    switch (index) {
                        case 0:
                            this.MyMetaData.FormFields[index] = new cdeNMI.TheFieldInfo(1, tSizeX, "Name");
                            this.MyMetaData.FormFields[index].FldOrder = 1;
                            this.MyMetaData.FormFields[index].DataItem = "Name";
                            this.MyMetaData.FormFields[index].Flags = 0;
                            break;
                        case 1:
                            this.MyMetaData.FormFields[index] = new cdeNMI.TheFieldInfo(1, tSizeX1, "Value");
                            this.MyMetaData.FormFields[index].FldOrder = 2;
                            this.MyMetaData.FormFields[index].DataItem = "Value";
                            this.MyMetaData.FormFields[index].Flags = 2;
                            this.MyMetaData.FormFields[index].FormID = "PROPTABLEInline";
                            break;
                        case 2:
                            this.MyMetaData.FormFields[index] = new cdeNMI.TheFieldInfo(21, 8, "Time");
                            this.MyMetaData.FormFields[index].FldOrder = 3;
                            this.MyMetaData.FormFields[index].DataItem = "cdeCTIM";
                            this.MyMetaData.FormFields[index].Flags = 0;
                            break;
                    }
                }
                this.IsPropertyTable = true;
            }
            this.MyTableName = cde.GuidToString(pTableName);
            ///Set sizing of the Table
            if (!this.IsPropertyTable) {
                var tDiv = document.getElementById('Inline_' + this.MyTableName);
                if (tDiv)
                    this.mBaseDiv = tDiv;
                if (!this.mBaseDiv && !pTargetControl && this.MyScreenInfo.MyStorageMeta[this.MyTableName])
                    this.mBaseDiv = document.getElementById('Content_' + cde.GuidToString(this.MyScreenInfo.MyStorageMeta[this.MyTableName].TargetElement));
                if (!this.mBaseDiv) {
                    //this.mBaseDiv = document.createElement("div");
                    if (this.MyTarget) {
                        this.mBaseDiv = this.MyTarget.GetContainerElement();
                        if (this.mBaseDiv && !this.mBaseDiv.id && this.MyFieldInfo) {
                            this.mBaseDiv.id = 'Content_' + cde.GuidToString(this.MyTarget.MyFieldInfo.cdeMID);
                        }
                        this.RemoveTableHooks();
                        this.MyTarget.GetContainerElement().innerHTML = ""; //OK
                    }
                }
                else {
                    this.RemoveTableHooks();
                    this.mBaseDiv.innerHTML = ""; //OK
                }
            }
            else {
                //TODO: Use TileGroup and set Overflow to tru if required
                this.mBaseDiv = document.createElement("div");
                if (this.MyFieldInfo && cde.CInt(this.MyFieldInfo["TileHeight"]) > 0) {
                    //this.mBaseDiv.style.height = cdeNMI.GetSizeFromTile(this.MyFieldInfo["TileHeight"]) + "px";
                    this.mBaseDiv.className = "cdeTableContainer";
                }
                else {
                    this.mBaseDiv.style.height = "inherit";
                }
            }
            var pClassName = 'CMyTable';
            if (this.MyFieldInfo && this.MyFieldInfo["TableClassName"])
                pClassName = this.MyFieldInfo["TableClassName"];
            this.SetElement(this.mBaseDiv);
            if (this.MyMetaData) {
                this.MyScreenInfo.MyStorageMeta[this.MyTableName] = this.MyMetaData;
            }
            else {
                if (this.MyScreenInfo.MyStorageMirror[this.MyTableName] && this.MyScreenInfo.MyStorageMirror[this.MyTableName][0] &&
                    this.MyScreenInfo.MyStorageMirror[this.MyTableName][0].cdeM) {
                    this.MyScreenInfo.MyStorageMeta[this.MyTableName] = JSON.parse(this.MyScreenInfo.MyStorageMirror[this.MyTableName][0].cdeM);
                }
            }
            this.MyFormInfo = new cdeNMI.TheFormInfo();
            if (this.MyScreenInfo.MyStorageMeta[this.MyTableName] !== undefined && this.MyScreenInfo.MyStorageMeta[this.MyTableName].IsGenerated === true)
                this.MyScreenInfo.MyStorageMeta[this.MyTableName] = null;
            if (!this.MyScreenInfo.MyStorageMeta[this.MyTableName] || !this.MyScreenInfo.MyStorageMeta[this.MyTableName].FormFields || this.MyScreenInfo.MyStorageMeta[this.MyTableName].FormFields.length === 0) {
                if (!this.MyScreenInfo.MyStorageMirror[this.MyTableName]) {
                    this.DisplayHeader(this.mBaseDiv, "No Data Available, yet", this.GetSetting("IsLiveData"));
                    if (cdeNMI.MyEngine && this.MyTarget && this.MyTarget.MyFieldInfo) {
                        //if (cde.CBool(this.MyFieldInfo["IsDropTarget"]) === true) debugger;
                        cdeNMI.MyEngine.PublishToNMI("NMI_GET_DATA:" + cde.GuidToString(this.MyTarget.MyFieldInfo.cdeMID) + ":CMyTable:" + this.MyTableName + ":" + this.MyScreenID + ":true:true", '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                    }
                    return false;
                }
                this.MyFormInfo.AssociatedClassName = this.MyTableName;
                this.MyFormInfo.FormFields = [];
                this.CreateFormInfo(this.MyScreenInfo.MyStorageMirror[this.MyTableName][0], "", this.MyFormInfo, 0);
                this.MyFormInfo.IsReadOnly = true;
                this.MyFormInfo.IsGenerated = true;
                this.MyFormInfo.TargetElement = this.MyTableName;
                this.MyScreenInfo.MyStorageMeta[this.MyTableName] = this.MyFormInfo;
            }
            this.MyFormInfo = this.MyScreenInfo.MyStorageMeta[this.MyTableName];
            if (this.MyFormInfo) {
                if (!this.MyFieldInfo) {
                    this.MyFieldInfo = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.Table, 0, "");
                    this.MyFieldInfo.PropertyBag = this.MyFormInfo.PropertyBag;
                    cdeNMI.ThePB.ConvertPropertiesFromBag(this.MyFieldInfo);
                }
                else {
                    cdeNMI.ThePB.ConvertPropertiesFromBag(this.MyFieldInfo, this.MyFormInfo.PropertyBag);
                }
            }
            if (cde.CInt(this.MyFieldInfo["TileWidth"]) > 0) {
                this.mBaseDiv.style.width = cdeNMI.GetSizeFromTile(this.MyFieldInfo["TileWidth"]) + "px";
            }
            else {
                this.mBaseDiv.style.width = "inherit";
            }
            if (this.MyFieldInfo && cde.CInt(this.MyFieldInfo["TileHeight"]) > 0)
                this.mBaseDiv.style.height = "initial";
            this.DisplayHeader(this.mBaseDiv, this.MyFieldInfo["Caption"], this.MyFormInfo.IsLiveData);
            this.tableContainer = document.createElement("div");
            if (this.MyFieldInfo["TableContainerClassName"])
                this.tableContainer.className = this.MyFieldInfo["TableContainerClassName"];
            else
                this.tableContainer.className = "cdeTableContainer";
            if (cde.CInt(this.MyFieldInfo["TileWidth"]) > 0) {
                this.tableContainer.style.width = cdeNMI.GetSizeFromTile(this.MyFieldInfo["TileWidth"]) + "px";
            }
            else {
                this.tableContainer.style.width = "inherit";
            }
            this.mBaseDiv.appendChild(this.tableContainer);
            this.tableMain = document.createElement("table");
            this.tableMain.className = pClassName;
            this.tableContainer.appendChild(this.tableMain);
            var tHeader = document.createElement("THEAD");
            if (this.MyFieldInfo["HeaderClassName"])
                tHeader.className = this.MyFieldInfo["HeaderClassName"];
            else
                tHeader.className = "cdeFixedHeader";
            this.tableMain.appendChild(tHeader);
            var tHeadRow = ctrlTableRow.Create(null, null, null, null, "cdeHeaderRow");
            tHeader.appendChild(tHeadRow.GetElement());
            this.mCurrentFormFieldsInfo = null;
            if (this.MyFormInfo.IsGenerated)
                this.mCurrentFormFieldsInfo = this.MyFormInfo.FormFields;
            else
                this.mCurrentFormFieldsInfo = cdeNMI.SortArrayByProperty(this.MyFormInfo.FormFields, "FldOrder", true, false);
            this.mColHeader = new Array();
            var tOrderBy;
            var tSortDescendin = false;
            if (this.MyFormInfo.OrderBy) {
                tOrderBy = this.MyFormInfo.OrderBy.split(' ');
                if (tOrderBy.length > 1 && tOrderBy[1].toLocaleLowerCase() === "desc")
                    tSortDescendin = true;
            }
            var i;
            for (i = 0; i < this.mCurrentFormFieldsInfo.length; i++) {
                if (!this.mCurrentFormFieldsInfo[i] || (this.mCurrentFormFieldsInfo[i].Flags & 8) !== 0 || this.mCurrentFormFieldsInfo[i].Type === cdeNMI.cdeControlType.FacePlate)
                    continue;
                cdeNMI.ThePB.ConvertPropertiesFromBag(this.mCurrentFormFieldsInfo[i]);
                var tTd = ctrlTableCell.Create(null, null, null, 0, "cdeTH", true);
                tTd.HookEvents(false);
                if (this.mCurrentFormFieldsInfo[i]["THClassName"])
                    tTd.SetProperty("ClassName", this.mCurrentFormFieldsInfo[i]["THClassName"]);
                var tHWidth = 1;
                if (cde.CInt(this.mCurrentFormFieldsInfo[i]["FldWidth"]) > 0)
                    tHWidth = cde.CInt(this.mCurrentFormFieldsInfo[i]["FldWidth"]);
                tTd.SetProperty("TileWidth", tHWidth);
                tTd.GetElement().style.height = (cdeNMI.GetSizeFromTile(1) / 2) + "px";
                var tHCellDiv = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(tTd);
                tHCellDiv.SetProperty("ClassName", "cdeTHCell");
                tHCellDiv.SetProperty("TileWidth", tHWidth);
                if (this.mCurrentFormFieldsInfo[i].Type === 22) {
                    var tHead = "&nbsp;";
                    if (this.mCurrentFormFieldsInfo[i]["TableHeader"])
                        tHead = this.mCurrentFormFieldsInfo[i]["TableHeader"];
                    tHCellDiv.GetElement().innerHTML = tHead;
                }
                else {
                    var tI = new cdeNMI.TheFieldInfo(22, 0, "", 2);
                    tI.FldOrder = i;
                    var tHead = this.mCurrentFormFieldsInfo[i]["Title"];
                    if (this.mCurrentFormFieldsInfo[i]["TableHeader"])
                        tHead = this.mCurrentFormFieldsInfo[i]["TableHeader"];
                    this.mColHeader[i] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(tHCellDiv, { ScreenID: this.MyScreenID, TRF: new cdeNMI.TheTRF(tHead, 0, tI), PostInitBag: [tHead ? "iValue=" + tHead : ""] });
                    this.mColHeader[i].SetProperty("Cookie", this);
                    this.mColHeader[i].HookEvents(true);
                    this.mColHeader[i].RegisterEvent("PointerUp", function (thisOb) {
                        if (!_this.rowAdder) {
                            var tTable_1 = thisOb.GetProperty("Cookie");
                            if (tTable_1.mSortFldID >= 0 && tTable_1.mSortFldID !== thisOb.MyFieldInfo.FldOrder) {
                                tTable_1.mColHeader[tTable_1.mSortFldID].SetProperty("ClassName", "");
                            }
                            tTable_1.mSortFldID = thisOb.MyFieldInfo.FldOrder;
                            var tSortDescendin_1 = false;
                            if (!thisOb.GetProperty("ClassName") || thisOb.GetProperty("ClassName") === "cdeTHsortdn") {
                                thisOb.SetProperty("ClassName", "cdeTHsortup");
                                tSortDescendin_1 = true;
                            }
                            else
                                thisOb.SetProperty("ClassName", "cdeTHsortdn");
                            _this.SortTableByProperty(tTable_1.MyScreenInfo.MyStorageMirror[tTable_1.MyTableName], tTable_1.mCurrentFormFieldsInfo[thisOb.MyFieldInfo.FldOrder].DataItem, cdeNMI.MyTCF.IsTypeNumeric(tTable_1.mCurrentFormFieldsInfo[thisOb.MyFieldInfo.FldOrder].Type), tSortDescendin_1);
                            if (_this.MyTableTitle)
                                _this.MyTableTitle.SetProperty("Visibility", false);
                            if (_this.InfoText) {
                                _this.InfoText.SetProperty("Text", "Sorting...<i class='fa fa-spinner fa-pulse'></i>");
                                _this.InfoText.SetProperty("Visibility", true);
                            }
                            window.setTimeout(function () {
                                tTable_1.UpdateBody(false);
                            }, 100);
                        }
                    });
                }
                if (this.MyFormInfo.OrderBy && this.mCurrentFormFieldsInfo[i].DataItem === tOrderBy[0]) {
                    if (!tSortDescendin)
                        this.mColHeader[i].SetProperty("ClassName", "cdeTHsortdn");
                    else
                        this.mColHeader[i].SetProperty("ClassName", "cdeTHsortup");
                }
                tHeadRow.AppendChild(tTd);
            }
            if (!this.MyScreenInfo.MyStorageMirror[this.MyTableName]) {
                return false;
            }
            if (this.MyFormInfo.OrderBy) {
                for (i = 0; i < this.mCurrentFormFieldsInfo.length; i++) {
                    if (this.mCurrentFormFieldsInfo[i] && this.mCurrentFormFieldsInfo[i].DataItem === tOrderBy[0]) {
                        this.SortTableByProperty(this.MyScreenInfo.MyStorageMirror[this.MyTableName], this.mCurrentFormFieldsInfo[i].DataItem, cdeNMI.MyTCF.IsTypeNumeric(this.mCurrentFormFieldsInfo[i].Type), tSortDescendin);
                        break;
                    }
                }
            }
            // table body
            this.tableBody = document.createElement("TBODY");
            this.tableBody.className = "cdeScrollBody";
            var tH = cde.CInt(this.GetProperty("TileHeight"));
            if (tH > 0) {
                //if (tH < 4) tH = 4;
                this.tableBody.style.height = cdeNMI.GetSizeFromTile(tH - 1) + "px";
            }
            this.tableMain.appendChild(this.tableBody);
            this.UpdateBody(true);
            return true;
        };
        ctrlTableView.prototype.LaterApplySkin = function () {
            var tH = cde.CInt(this.GetProperty("TileHeight"));
            if (tH > 0 && this.MyTarget) {
                this.tableBody.style.height = this.MyTarget.GetContainerElement().style.height;
            }
        };
        ctrlTableView.prototype.SetTE = function (pTEControl) {
            var _this = this;
            if (cde.CInt(pTEControl.MyTarget.GetProperty("TileWidth")) !== 0)
                this.SetProperty("TileWidth", cde.CInt(pTEControl.MyTarget.GetProperty("TileWidth")));
            if (pTEControl.MyFieldInfo["MaxFileSize"])
                this.SetProperty("MaxFileSize", pTEControl.MyFieldInfo["MaxFileSize"]);
            if (pTEControl.MyFieldInfo["IsDropTarget"])
                this.SetProperty("IsDropTarget", pTEControl.MyFieldInfo["IsDropTarget"]);
            if (pTEControl.MyFieldInfo["AllowGlobalPush"])
                this.SetProperty("AllowGlobalPush", pTEControl.MyFieldInfo["AllowGlobalPush"]);
            if (pTEControl.MyFieldInfo["EngineName"])
                this.SetProperty("EngineName", pTEControl.MyFieldInfo["EngineName"]);
            this.MyFieldInfo.cdeO = pTEControl.MyFieldInfo.cdeO;
            pTEControl.RegisterEvent("Resize", function (sender, size) {
                _this.SetProperty("TileWidth", size);
            });
        };
        ctrlTableView.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if (pName !== "MID")
                _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Reload") {
                cdeNMI.ResetKeyCorder();
                if (this.MyScreenInfo)
                    this.MyScreenInfo.MyStorageMirror[this.MyTableName] = null;
                this.RefreshData(this.MyTableName, cde.CInt(this.GetProperty("CurrentPage")));
            }
            else if ((pName === "TileWidth" || pName === "TileWidth") && this.mBaseDiv) {
                pValue = cde.CInt(pValue);
                if (pValue > 0) {
                    this.mBaseDiv.style.width = cdeNMI.GetSizeFromTile(pValue).toString() + "px";
                }
                this.mBaseDiv.style.overflowX = "auto";
            }
            else if ((pName === "TileHeight" || pName === "TileHeight") && this.mBaseDiv) {
                pValue = cde.CInt(pValue);
                if (this.tableBody && cde.CInt(pValue) > 1) {
                    this.tableBody.style.height = cdeNMI.GetSizeFromTile(cde.CInt(pValue) - 1).toString() + "px";
                    this.mBaseDiv.style.height = "initial";
                }
                this.mBaseDiv.style.overflowY = "auto";
            }
            else if (pName === "Style" && this.mBaseDiv) {
                this.mBaseDiv.style.cssText = pValue;
            }
            else if (pName === "InnerClassName" && this.tableMain) {
                this.tableMain.className = pValue;
            }
            else if (pName === "Title" && this.MyTableTitle) {
                this.MyTableTitle.SetProperty("Text", pValue);
            }
            else if (pName === "IsDropTarget" && this.mBaseDiv) {
                if (cde.CBool(pValue) === true) {
                    this.mBaseDiv.ondragover = function () {
                        _this.mBaseDiv.classList.add('ctrlDropUploaderHover');
                        return false;
                    };
                    this.mBaseDiv.ondragend = function () {
                        _this.mBaseDiv.classList.remove('ctrlDropUploaderHover');
                        return false;
                    };
                    this.mBaseDiv.ondragleave = function () {
                        _this.mBaseDiv.classList.remove('ctrlDropUploaderHover');
                        return false;
                    };
                    this.mBaseDiv.ondrop = function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                        _this.mBaseDiv.classList.remove('ctrlDropUploaderHover');
                        _this.ProcessFiles(e.dataTransfer.files);
                    };
                }
            }
        };
        ctrlTableView.prototype.DisplayHeader = function (pParent, pHeaderTitle, pIsLiveData) {
            var _this = this;
            var tHeadTd = document.createElement("div");
            tHeadTd.className = "cdeMainTableHeader";
            tHeadTd.style.height = (cdeNMI.GetSizeFromTile(1) / 2) + "px";
            pParent.appendChild(tHeadTd);
            var tAddHeadline = true;
            if (cde.IsNotSet(pHeaderTitle)) {
                pHeaderTitle = "&nbsp;";
                tAddHeadline = false;
            }
            else
                tAddHeadline = true;
            if (tAddHeadline) {
                var tScr = cdeNMI.MyScreenManager.GetScreenByID(this.MyTableName);
                if (tScr && cde.CBool(tScr.GetProperty("HidePins")) === false) {
                    tScr.SetProperty("Caption", pHeaderTitle);
                    tAddHeadline = false;
                }
                else {
                    this.MyTableTitle = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(null, { PreInitBag: ["Element=h1"], PostInitBag: ["iValue=" + cdeNMI.GenerateFinalString(pHeaderTitle), "ClassName=cdeTableHeader"] });
                    //ctrlSmartLabel.Create(null, null, null, cdeNMI.GenerateFinalString(pHeaderTitle), "h1", false, "cdeTableHeader");
                    if (this.MyFieldInfo && this.MyFieldInfo["TNClassName"])
                        this.MyTableTitle.SetProperty("ClassName", this.MyFieldInfo["TNClassName"]);
                }
            }
            if (!pIsLiveData) {
                if (!this.IsPropertyTable) {
                    if (tAddHeadline) {
                        var tRefreshBut = cdeNMI.ctrlTileButton.Create(null, function (e) {
                            cdeNMI.ResetKeyCorder();
                            _this.MyScreenInfo.MyStorageMirror[_this.MyTableName] = null;
                            _this.RefreshData(_this.MyTableName, cde.CInt(_this.GetProperty("CurrentPage")), e.button === 2);
                        }, "<span class='fa cdeTableHeaderIcon'>&#xf021;</span>", 1, 1);
                        tRefreshBut.SetProperty("TileFactorX", 2);
                        tRefreshBut.SetProperty("TileFactorY", 2);
                        tHeadTd.appendChild(tRefreshBut.GetElement());
                    }
                    if (cde.CInt(this.GetProperty("PageSize")) > 0) {
                        var tBut = cdeNMI.ctrlTileButton.Create(null, function () {
                            if (!_this.rowAdder && cde.CInt(_this.GetProperty("CurrentPage")) > 0) {
                                cdeNMI.ResetKeyCorder();
                                _this.MyScreenInfo.MyStorageMirror[_this.MyTableName] = null;
                                _this.RefreshData(_this.MyTableName, 0);
                            }
                        }, "<span class='fa cdeTableHeaderIcon'>&#xf049;</span>", 1, 1);
                        tBut.SetProperty("TileFactorX", 2);
                        tBut.SetProperty("TileFactorY", 2);
                        tHeadTd.appendChild(tBut.GetElement());
                        var tBut2 = cdeNMI.ctrlTileButton.Create(null, function () {
                            if (!_this.rowAdder && cde.CInt(_this.GetProperty("CurrentPage")) > 0) {
                                cdeNMI.ResetKeyCorder();
                                _this.MyScreenInfo.MyStorageMirror[_this.MyTableName] = null;
                                _this.RefreshData(_this.MyTableName, cde.CInt(_this.GetProperty("CurrentPage")) - 1);
                            }
                        }, "<span class='fa cdeTableHeaderIcon'>&#xf048;</span>", 1, 1);
                        tBut2.SetProperty("TileFactorX", 2);
                        tBut2.SetProperty("TileFactorY", 2);
                        tHeadTd.appendChild(tBut2.GetElement());
                        var tBut3 = cdeNMI.ctrlTileButton.Create(null, function () {
                            if (!_this.rowAdder) {
                                cdeNMI.ResetKeyCorder();
                                _this.MyScreenInfo.MyStorageMirror[_this.MyTableName] = null;
                                _this.RefreshData(_this.MyTableName, cde.CInt(_this.GetProperty("CurrentPage")) + 1);
                            }
                        }, "<span class='fa cdeTableHeaderIcon'>&#xf051;</span>", 1, 1);
                        tBut3.SetProperty("TileFactorX", 2);
                        tBut3.SetProperty("TileFactorY", 2);
                        tHeadTd.appendChild(tBut3.GetElement());
                        var tBut4 = cdeNMI.ctrlTileButton.Create(null, function () {
                            if (!_this.rowAdder) {
                                cdeNMI.ResetKeyCorder();
                                _this.MyScreenInfo.MyStorageMirror[_this.MyTableName] = null;
                                _this.RefreshData(_this.MyTableName, -1);
                            }
                        }, "<span class='fa cdeTableHeaderIcon'>&#xf050;</span>", 1, 1);
                        tBut4.SetProperty("TileFactorX", 2);
                        tBut4.SetProperty("TileFactorY", 2);
                        tHeadTd.appendChild(tBut4.GetElement());
                    }
                    //else
                    //  tAddHeadline = false;
                }
                if (this.MyFormInfo && this.MyFormInfo.FormFields) {
                    if (!this.MyFormInfo.IsReadOnly && this.MyFieldInfo["AddButtonText"]) {
                        var i = this.MyFormInfo.FormFields.length;
                        var HasDelete = false;
                        while (i--) {
                            if (this.MyFormInfo.FormFields[i].DataItem === "CDE_DELETE") {
                                HasDelete = true;
                                break;
                            }
                        }
                        if (HasDelete) {
                            this.btnAdder = cdeNMI.ctrlTileButton.Create(null, function () { return _this.AddRecord(_this.MyScreenID); }, this.MyFieldInfo["AddButtonText"], 2, 1);
                            this.btnAdder.SetProperty("TileFactorY", 2);
                            if (this.MyFieldInfo["AddButtonClassName"])
                                this.btnAdder.SetProperty("ClassName", this.MyFieldInfo["AddButtonClassName"]);
                            else
                                this.btnAdder.SetProperty("ClassName", "cdeAddButton");
                            tHeadTd.appendChild(this.btnAdder.GetElement());
                        }
                    }
                    if (cde.CBool(this.MyFieldInfo["ShowFilterField"])) {
                        var tFilterIcon = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).Create(null, { PostInitBag: ["ClassName=cdeFilterInputIcon", "TileWidth=1", "TileFactorX=2", "Style=float:left;", "Text=<i class='fa fa-2x'>&#xf002;</i>"] });
                        tHeadTd.appendChild(tFilterIcon.GetElement());
                        var tFld2 = new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SingleEnded, 3, "Filter:", 2);
                        var tFiVal = this.GetProperty("CurrentFilter");
                        if (!tFiVal)
                            tFiVal = "";
                        this.inputFilter = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleEnded).Create(null, { TRF: new cdeNMI.TheTRF(this.MyTableName, 1, tFld2), PostInitBag: ["ClassName=cdeInput cdeFilterInput", "TileWidth=2", "iValue=" + tFiVal] });
                        this.inputFilter.SetProperty("TileFactorY", 2);
                        this.inputFilter.RegisterEvent("OnValueChanged", function (sender, eventName, pvalue) {
                            if (_this.GetProperty("CurrentFilter") === pvalue)
                                return;
                            _this.SetProperty("CurrentFilter", pvalue);
                            _this.RefreshData(_this.MyTableName, cde.CInt(_this.GetProperty("CurrentPage")), true);
                        });
                        tHeadTd.appendChild(this.inputFilter.GetElement());
                    }
                }
                this.InfoText = cdeNMI.ctrlSmartLabel.Create(null, null, null, "", "span", true);
                this.InfoText.SetProperty("TileFactorY", 2);
                this.InfoText.SetProperty("ClassName", "cdeRefresher");
                this.InfoText.SetProperty("Visibility", false);
                tHeadTd.appendChild(this.InfoText.GetElement());
            }
            if (tAddHeadline)
                tHeadTd.appendChild(this.MyTableTitle.GetElement());
        };
        ctrlTableView.prototype.UpdateBody = function (IsNewTable) {
            var _this = this;
            if (!IsNewTable) {
                this.RemoveTableHooks();
                //cdeNMI.MyEngine.RemoveTableHooks(this.MyTableControls);
            }
            this.MyTableControls = [];
            this.mTableRows = [];
            if (!this.tableBody)
                return;
            this.tableBody.innerHTML = ""; //OK
            for (var i = 0; i < this.MyScreenInfo.MyStorageMirror[this.MyTableName].length; i++) {
                var tRow = ctrlTableRow.Create(null, this.MyTRF);
                this.MyTableControls[i] = [];
                tRow.SetProperty("ClassName", (i % 2 === 0) ? 'cdeRowEven' : 'cdeRowOdd');
                this.tableBody.appendChild(tRow.GetElement());
                var tDataRow = this.MyScreenInfo.MyStorageMirror[this.MyTableName][i];
                this.mTableRows[tDataRow.cdeMID] = tRow;
                for (var j = 0; j < this.mCurrentFormFieldsInfo.length; j++) {
                    if (!this.mCurrentFormFieldsInfo[j] || (this.mCurrentFormFieldsInfo[j].Flags & 8) !== 0 || this.mCurrentFormFieldsInfo[j].Type === cdeNMI.cdeControlType.FacePlate)
                        continue;
                    var tD = ctrlTableCell.Create(null, null);
                    tRow.AppendChild(tD);
                    var tFldInfo = this.mCurrentFormFieldsInfo[j];
                    if (!tFldInfo.FldOrder)
                        tFldInfo.FldOrder = (j + 1) * 10;
                    var tFldID = this.MyTableName + '_' + i + '_' + tFldInfo.FldOrder;
                    if ((tFldInfo.Flags & 2) !== 0)
                        tD.HookEvents(false);
                    if (!this.MyFormInfo.IsReadOnly && tFldInfo.DataItem === "CDE_DELETE") {
                        tD.SetProperty("ClassName", 'cdeTH');
                        tD.SetProperty("TileWidth", 1);
                        this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-3x'>&#xf1f8;</span>", "ClassName=cdeBadActionButton cdeDeleteButton"] });
                        this.MyTableControls[i][tFldID].SetProperty("Cookie", this);
                        this.MyTableControls[i][tFldID].SetProperty("Cookie2", tDataRow);
                        this.MyTableControls[i][tFldID].SetProperty("OnClick", function (pSender, evt) {
                            var tMe = pSender.GetProperty("Cookie");
                            if (evt.shiftKey) {
                                tMe.DeleteRecord(pSender.GetProperty("Cookie2"));
                            }
                            else {
                                if (cdeNMI.MyPopUp)
                                    cdeNMI.MyPopUp.Show('Are you sure you want to delete this record? ', false, null, 1, function (tPopup, pParent, cookie) {
                                        pParent.DeleteRecord(cookie);
                                    }, null, pSender.GetProperty("Cookie2"), tMe);
                            }
                        });
                        tD.AppendChild(this.MyTableControls[i][tFldID]);
                    }
                    else if (tFldInfo.DataItem === "CDE_DETAILS") {
                        tD.SetProperty("ClassName", 'cdeTH');
                        tD.SetProperty("TileWidth", 1);
                        this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(null, { TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PreInitBag: ["ControlTW=1", "ControlTH=1"], PostInitBag: ["Title=<span class='fa fa-3x'>&#xf044;</span>", "ClassName=cdeTransitButton cdeDetailButton"] });
                        this.MyTableControls[i][tFldID].SetProperty("Cookie", i);
                        this.MyTableControls[i][tFldID].SetProperty("OnClick", function (pSender) {
                            if (!_this.rowAdder) {
                                cdeNMI.TogglePortalFull(false);
                                if (_this.GetProperty("TemplateID") && cdeNMI.MyScreenManager) {
                                    var tRowID = _this.MyScreenInfo.MyStorageMirror[_this.MyTableName][cde.CInt(pSender.GetProperty("Cookie"))].cdeMID;
                                    var tTemplID = cde.GuidToString(_this.GetProperty("TemplateID"));
                                    cdeNMI.MyScreenManager.TransitToScreen(tTemplID, true, false, tRowID);
                                }
                                else {
                                    cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.FormView).Create(_this.MyTarget, { ScreenID: _this.MyScreenID, TRF: new cdeNMI.TheTRF(_this.MyTableName, pSender.GetProperty("Cookie"), null) });
                                }
                            }
                        });
                        tD.AppendChild(this.MyTableControls[i][tFldID]);
                    }
                    else {
                        var tFldContent = "";
                        if (tFldInfo.DataItem) {
                            tFldContent = cdeNMI.GetFldContent(tDataRow, tFldInfo, this.MyFormInfo.IsGenerated, false);
                        }
                        if (tFldInfo["TCClassName"])
                            tD.SetProperty("ClassName", tFldInfo["TCClassName"]);
                        else
                            tD.SetProperty("ClassName", 'cdeTabEntry');
                        var tDWidth = 1;
                        if (cde.CInt(tFldInfo["FldWidth"]) > 0)
                            tDWidth = cde.CInt(tFldInfo["FldWidth"]);
                        tD.SetProperty("TileWidth", tDWidth);
                        if (tFldInfo["HorizontalAlignment"])
                            tD.SetProperty("HorizontalAlignment", tFldInfo["HorizontalAlignment"]);
                        var tDCellDiv = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(tD);
                        tDCellDiv.SetProperty("ClassName", "cdeTDCell");
                        tDCellDiv.SetProperty("TileWidth", tDWidth);
                        var HookEvent = true;
                        tFldInfo["IsInTable"] = true;
                        switch (tFldInfo.Type) {
                            case cdeNMI.cdeControlType.Picture:
                                if (tFldContent && (tFldContent.length > 512 || cde.CBool(cdeNMI.ThePB.GetSetting(tFldInfo, "IsBlob"))))
                                    tFldContent = "data:image/jpeg;base64," + tFldContent;
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Picture).Create(null, { PostInitBag: ["iValue=" + tFldContent] }); //ctrlZoomImage.Create(null, 0, 0, tFldContent);
                                if (cde.CInt(tFldInfo["FldWidth"]) > 0) {
                                    this.MyTableControls[i][tFldID].SetProperty("ControlTW", cde.CInt(tFldInfo["FldWidth"]));
                                    this.MyTableControls[i][tFldID].SetProperty("ControlTH", 1);
                                }
                                break;
                            case cdeNMI.cdeControlType.Table:
                                //this.MyTableControls[i][tFldID] = ctrlTableView.Create(null, this.MyScreenID, new TheTRF(this.MyTableName, i, tFldInfo), null, false, "cdeInlineTable");
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Table).Create(null, { ScreenID: this.MyScreenID, TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PostInitBag: ["InnerClassName=cdeInlineTable"] });
                                break;
                            case cdeNMI.cdeControlType.TouchDraw:
                                // ctrlTouchDraw.Create(null, new TheTRF(this.MyTableName, i, tFldInfo), false, cde.CInt(tFldInfo["FldWidth"]) * cdeNMI.GetSizeFromTile(1), tFldInfo["TileHeight"] * cdeNMI.GetSizeFromTile(1), tFldContent);
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TouchDraw).Create(null, { TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PostInitBag: ["iValue=" + tFldContent] });
                                break;
                            case cdeNMI.cdeControlType.FormButton:
                            case cdeNMI.cdeControlType.TileButton:
                                {
                                    tFldInfo["OnClick"] = cdeNMI.GenerateFinalString(tFldInfo["OnClick"], tDataRow);
                                    var tTit = "";
                                    if (tFldInfo.DataItem)
                                        tTit = cdeNMI.GenerateFinalString("%" + tFldInfo.DataItem + "%", tDataRow);
                                    else
                                        tTit = cdeNMI.GenerateFinalString(tFldInfo["Title"], tDataRow);
                                    this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(this, { ScreenID: this.MyScreenID, TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PostInitBag: ["iValue=" + (tTit ? tTit : "")] });
                                }
                                break;
                            case cdeNMI.cdeControlType.SingleCheck:
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SingleCheck).Create(this, { ScreenID: this.MyScreenID, TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PreInitBag: ["IsInTable=true"], PostInitBag: ["iValue=" + cde.CBool(tFldContent)] });
                                //ctrlCheckBox.CreateOLD(null, this.MyScreenID, new TheTRF(this.MyTableName, i, tFldInfo), cde.CBool(tFldContent), "", false);
                                this.MyTableControls[i][tFldID].SetProperty("UpdateTable", true);
                                break;
                            case cdeNMI.cdeControlType.CircularGauge:
                                if (cde.CInt(tFldInfo["FldWidth"]) > 0)
                                    tFldInfo["ControlTW"] = cde.CInt(tFldInfo["FldWidth"]);
                                else
                                    tFldInfo["ControlTW"] = 1;
                                tFldInfo["ControlTH"] = 1;
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.CircularGauge).Create(this, { ScreenID: this.MyScreenID, TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PreInitBag: ["IsInTable=true"], PostInitBag: ["iValue=" + cde.CDbl(tFldContent)] });
                                break;
                            case cdeNMI.cdeControlType.BarChart:
                                if (cde.CInt(tFldInfo["FldWidth"]) > 0)
                                    tFldInfo["ControlTW"] = cde.CInt(tFldInfo["FldWidth"]);
                                else
                                    tFldInfo["ControlTW"] = 1;
                                tFldInfo["ControlTH"] = 1;
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.BarChart).Create(this, { ScreenID: this.MyScreenID, TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), PreInitBag: ["IsInTable=true"], PostInitBag: ["iValue=" + cde.CDbl(tFldContent)] });
                                break;
                            case cdeNMI.cdeControlType.StatusLight:
                                {
                                    var tSL = new cdeNMI.ctrlStatusLight();
                                    if (cde.CInt(tFldInfo["FldWidth"]) > 0)
                                        tFldInfo["ControlTW"] = cde.CInt(tFldInfo["FldWidth"]);
                                    else
                                        tFldInfo["ControlTW"] = 1;
                                    tFldInfo["ControlTH"] = 1;
                                    tSL.InitControl(null, new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo), null, this.MyScreenID);
                                    tSL.SetProperty("iValue", tFldContent);
                                    this.MyTableControls[i][tFldID] = tSL;
                                }
                                break;
                            case cdeNMI.cdeControlType.CollapsibleGroup:
                            case cdeNMI.cdeControlType.TileGroup:
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(null, { TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo) }); // ctrlTileGroup.Create(null, new TheTRF(this.MyTableName, i, tFldInfo));
                                this.MyTableControls[i][tFldID].SetProperty("ClassName", "cdeTileGroup");
                                this.MyTableControls[i][tFldID].SetProperty("IsDivOnly", tFldInfo["IsDivOnly"]);
                                this.MyTableControls[i][tFldID].SetProperty("iValue", tFldContent);
                                break;
                            case cdeNMI.cdeControlType.UserControl:
                                if (cde.CInt(tFldInfo["FldWidth"]) > 0)
                                    tFldInfo["ControlTW"] = cde.CInt(tFldInfo["FldWidth"]);
                                else
                                    tFldInfo["ControlTW"] = 1;
                                tFldInfo["ControlTH"] = 1;
                                tFldInfo["IsInTable"] = true;
                                tFldInfo["DataRow"] = tDataRow;
                                tFldInfo["FldID"] = tFldID;
                                tFldInfo["iValue"] = tFldContent;
                                cdeNMI.MyTCF.CreateControlLazy(tDCellDiv, tFldInfo["EngineName"], tFldInfo["ControlType"], function (parent, resControl, cookie) {
                                    _this.MyTableControls[cookie.RowNo][cookie.FldInfo["FldID"]] = resControl;
                                    resControl.InitControl(parent, cookie);
                                    resControl.SetProperty("iValue", cookie.FldInfo["iValue"]);
                                    _this.FinishControlSetup(cookie.RowNo, cookie.FldInfo["FldID"], cookie.FldInfo, cookie.FldInfo["DataRow"], true, parent);
                                }, new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo));
                                continue;
                            default:
                                this.MyTableControls[i][tFldID] = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.SmartLabel).
                                    Create(null, {
                                    ScreenID: this.MyScreenID,
                                    TRF: new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo),
                                    PreInitBag: ["Element=div", "IsReadOnly=" + this.MyFormInfo.IsReadOnly, "IsInTable=true"],
                                    PostInitBag: ["iValue=" + tFldContent],
                                    Cookie: tDataRow
                                });
                                if ((tFldInfo.Flags & 2) !== 0 && tFldInfo.Type !== cdeNMI.cdeControlType.SmartLabel) {
                                    tD.MyNMIControl = this.MyTableControls[i][tFldID];
                                    this.MyTableControls[i][tFldID].MyNMIControl = tD;
                                    tD.MyNMIControl.MyDataView = this;
                                    tD.RegisterEvent("PointerUp", function (pControl, evt, pPointer) {
                                        cdeNMI.StopPointerEvents(evt);
                                        pControl.MyNMIControl.EditControl(evt, pPointer, pControl);
                                    });
                                }
                                break;
                        }
                        this.FinishControlSetup(i, tFldID, tFldInfo, tDataRow, HookEvent, tDCellDiv);
                    }
                }
                cdeNMI.MyEngine.UnregisterEvent("RecordUpdated_" + this.MyTableName + "_" + i, this.UpdateRecord);
                cdeNMI.MyEngine.RegisterEvent("RecordUpdated_" + this.MyTableName + "_" + i, this.UpdateRecord);
                this.ValidateRules(this.MyScreenID, this.MyTableName, this.MyTableName, i, this.MyTableControls[i], true, false); //Run local rules on Table Row
            }
            cdeNMI.TheFlashCache.FlushCache();
            this.InfoText.SetProperty("Text", "");
            this.InfoText.SetProperty("Visibility", false);
            if (this.MyTableTitle)
                this.MyTableTitle.SetProperty("Visibility", true);
        };
        ctrlTableView.prototype.FinishControlSetup = function (i, tFldID, tFldInfo, tDataRow, HookEvent, tDCellDiv) {
            var _this = this;
            if (!this.MyTableControls[i][tFldID].MyTRF)
                this.MyTableControls[i][tFldID].MyTRF = new cdeNMI.TheTRF(this.MyTableName, i, tFldInfo);
            if (this.MyScreenInfo.MyStorageMirror[this.MyTableName] && tDataRow && tDataRow.cdeMID)
                this.MyTableControls[i][tFldID].MyTRF.RowID = tDataRow.cdeMID;
            this.MyTableControls[i][tFldID].MyTRF.ModelID = this.MyScreenID;
            this.MyTableControls[i][tFldID].MyDataView = this;
            if (HookEvent) {
                this.MyTableControls[i][tFldID].SetProperty("OnValueChanged", function (pCtrl, evt, pValue, pTRF) {
                    if (pTRF) {
                        _this.ValidateRules(_this.MyScreenID, _this.MyTableName, _this.MyTableName, pTRF.RowNo, _this.MyTableControls[pTRF.RowNo], false, false); //Push Table changes to Relay
                    }
                });
            }
            if (tFldInfo.PropertyBag && tFldInfo.PropertyBag.length > 0) {
                cdeNMI.ThePB.SetPropertiesFromBag(this.MyTableControls[i][tFldID], tFldInfo.PropertyBag, this.MyScreenInfo.MyStorageMirror[this.MyTableName] ? tDataRow : null, false, true);
            }
            if (tFldInfo.DataItem) {
                this.MyTableControls[i][tFldID].SetProperty("DataItem", tFldInfo.DataItem);
            }
            if ((tFldInfo.Flags & 0x40) !== 0 || tFldInfo.Type === cdeNMI.cdeControlType.ThingPicker) {
                this.MyTableControls[i][tFldID].SetProperty("TID", tDataRow.cdeMID);
                this.MyTableControls[i][tFldID].SetProperty("UXID", tFldInfo.cdeMID);
                this.MyTableControls[i][tFldID].RegisterNMIControl();
            }
            tDCellDiv.AppendChild(this.MyTableControls[i][tFldID]);
        };
        ctrlTableView.prototype.UpdateRecord = function (pSI, pModelMID, tTabName, tRowID, tMask) {
            if (this.MyTableName && this.MyTableName === tTabName) {
                var tMod = cdeNMI.MyNMIModels[pModelMID];
                if (tMod) {
                    var cnt = 0;
                    for (var cc in this.MyTableControls[tRowID]) {
                        var tN = this.MyTableControls[tRowID][cc].GetProperty("DataItem");
                        if (tN && (!tMask || tMask.substr(cnt, 1) === '1')) {
                            if (!Object.prototype.hasOwnProperty.call(tMod.MyStorageMirror[tTabName][tRowID], 'SecToken'))
                                this.MyTableControls[tRowID][cc].SetProperty("iValue", cdeNMI.GetFldContent(tMod.MyStorageMirror[tTabName][tRowID], this.MyTableControls[tRowID][cc].MyFieldInfo, this.MyFormInfo.IsGenerated, false)); //     tMod.MyStorageMirror[tTabName][tRowID][tN]);
                        }
                        cnt++; //V5: This was missing!
                    }
                    this.ValidateRules(pModelMID, tTabName, tTabName, tRowID, this.MyTableControls[tRowID], true, false); //Validate rules in Row
                }
            }
        };
        ctrlTableView.prototype.ReloadData = function () {
            this.MyScreenInfo.MyStorageMirror[this.MyTableName] = null;
            this.RefreshData(this.MyTableName, cde.CInt(this.GetProperty("CurrentPage")), false);
            return true;
        };
        ctrlTableView.prototype.RefreshData = function (pTableName, pPageNo, bForceReload) {
            if (bForceReload === void 0) { bForceReload = false; }
            if (this.IsPropertyTable) {
                this.RefreshPropTable(pTableName);
                this.UpdateBody(true);
            }
            else {
                var tID = "auto";
                if (this.MyTarget) {
                    if (this.MyTarget.MyNMIControl && this.MyTarget.MyNMIControl.MyBaseType === cdeNMI.cdeControlType.Table) {
                        tID = cde.GuidToString(this.MyTarget.MyFieldInfo.cdeMID);
                    }
                    else if (this.MyTarget.MyScreenID)
                        tID = this.MyTarget.MyScreenID;
                }
                if (cdeNMI.MyEngine) {
                    var tFilter = this.GetProperty("CurrentFilter");
                    if (!tFilter)
                        tFilter = "";
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:' + tID + ':CMyTable:' + pTableName + ':' + this.MyScreenID + (bForceReload === true ? ":false:true" : ""), pPageNo.toString() + (tFilter.length > 0 ? (":;:" + tFilter) : ""), this.MyTRF ? this.MyTRF.GetNodeID() : null);
                }
                if (this.MyTableTitle)
                    this.MyTableTitle.SetProperty("Visibility", false);
                if (this.InfoText) {
                    this.InfoText.SetProperty("Text", "Refreshing...<i class='fa fa-spinner fa-pulse'></i>");
                    this.InfoText.SetProperty("Visibility", true);
                }
                if (cdeNMI.MyToast)
                    cdeNMI.MyToast.ShowToastMessage("Table Refresh request sent to Relay");
            }
        };
        ctrlTableView.prototype.RefreshPropTable = function (pTableName) {
            this.MyScreenInfo.MyStorageMirror[pTableName] = [];
            for (var idx in this.MyScreenInfo.MyStorageMirror[this.MyTRF.TableName][this.MyTRF.RowNo].MyPropertyBag) {
                if (this.IsNMIOnly && (this.MyScreenInfo.MyStorageMirror[this.MyTRF.TableName][this.MyTRF.RowNo].MyPropertyBag[idx].cdeE & 64) === 0)
                    continue;
                this.MyScreenInfo.MyStorageMirror[pTableName].push(this.MyScreenInfo.MyStorageMirror[this.MyTRF.TableName][this.MyTRF.RowNo].MyPropertyBag[idx]);
            }
            this.SortTableByProperty(this.MyScreenInfo.MyStorageMirror[pTableName], "Name", false, false);
        };
        ctrlTableView.prototype.TableHighlightRow = function () {
            if (document.getElementById && document.createTextNode) {
                var tables = document.getElementsByTagName('table');
                for (var i = 0; i < tables.length; i++) {
                    if ((tables[i]).className === 'cdeHilite') {
                        var trs = (tables[i]).getElementsByTagName('tr');
                        for (var j = 0; j < trs.length; j++) {
                            if ((trs[j]).parentNode.nodeName === 'TBODY') {
                                (trs[j]).onmouseover = function (ev) {
                                    var target = (ev.target || ev.srcElement);
                                    target.setAttribute("oldClass", target.className);
                                    target.className = 'cdeHilightRow';
                                    return false;
                                };
                                (trs[j]).onmouseout = function (ev) {
                                    var target = (ev.target || ev.srcElement);
                                    target.className = target.attributes["oldClass"].nodeValue;
                                    return false;
                                };
                            }
                        }
                    }
                }
            }
        };
        ctrlTableView.prototype.DeleteRecord = function (pDataRow) {
            var pMID = pDataRow.cdeMID;
            if (cdeNMI.MyEngine)
                cdeNMI.MyEngine.PublishToNMI('NMI_DEL_ID:' + this.MyTableName + ":" + pMID, "", pDataRow.cdeN);
            this.mTableRows[pMID].SetProperty("ClassName", "rowDeleted");
        };
        ctrlTableView.prototype.CancelAddRecord = function () {
            this.IsInEdit = false;
            cdeNMI.ResetKeyCorder();
            if (this.rowAdder) {
                this.tableMain.deleteRow(1);
                this.rowAdder = null;
            }
            if (this.btnAdder)
                this.btnAdder.SetProperty("Visibility", true);
        };
        ctrlTableView.prototype.SaveRecord = function () {
            this.IsInEdit = false;
            cdeNMI.ResetKeyCorder();
            var tTableRecord = [];
            if (this.MyScreenInfo.MyStorageMirror[this.MyTableName] && this.MyScreenInfo.MyStorageMirror[this.MyTableName][0])
                tTableRecord[0] = this.MyScreenInfo.MyStorageMirror[this.MyTableName][0].constructor();
            else
                tTableRecord[0] = {};
            for (var i = 0; i < this.mCurrentFormFieldsInfo.length; i++) {
                var tFldInfo = this.mCurrentFormFieldsInfo[i];
                if (!tFldInfo)
                    continue;
                var tFldID = this.MyTableName + "_" + tFldInfo.FldOrder;
                if (!this.MyAdderRow[tFldID] || !this.MyAdderRow[tFldID].MyNMIControl)
                    continue;
                if (tFldInfo.DataItem !== "CDE_DELETE" && (tFldInfo.Flags & 2) !== 0 && this.MyAdderRow[tFldID]) {
                    var tVal = void 0;
                    switch (tFldInfo.Type) {
                        case 4: //Checkbox
                            tVal = cde.CBool(this.MyAdderRow[tFldID].MyNMIControl.GetProperty("IsChecked"));
                            break;
                        default:
                            tVal = this.MyAdderRow[tFldID].MyNMIControl.GetProperty("Value");
                            break;
                    }
                    cdeNMI.UpdFldContent(tTableRecord[0], tFldInfo, tVal, null);
                }
            }
            if (this.rowAdder) {
                this.tableMain.deleteRow(1);
                this.rowAdder = null;
                this.MyAdderRow = null;
                this.btnAdder.SetProperty("Visibility", true);
            }
            if (cdeNMI.MyEngine) {
                var tID = "auto";
                if (this.MyTarget) {
                    if (this.MyTarget.MyNMIControl && this.MyTarget.MyNMIControl.MyBaseType === cdeNMI.cdeControlType.Table)
                        tID = cde.GuidToString(this.MyTarget.MyFieldInfo.cdeMID);
                    else if (this.MyTarget.MyScreenID)
                        tID = this.MyTarget.MyScreenID;
                }
                cdeNMI.MyEngine.PublishToNMI('NMI_INS_DATA:' + this.MyTableName + ":" + this.MyScreenID + ":" + tID, JSON.stringify(tTableRecord[0]), this.MyFormInfo.cdeN);
                cdeNMI.ShowToastMessage("New Record was sent to owner");
            }
            else {
                cdeNMI.ShowToastMessage("No Engine Found");
            }
        };
        ctrlTableView.prototype.AddRecord = function (pScreenID) {
            var _this = this;
            if (this.GetSetting("AddTemplateType") && cdeNMI.MyScreenManager) {
                cdeNMI.MyScreenManager.TransitToScreen(this.GetSetting("AddTemplateType"), true, false, null, this.MyTableName);
                return;
            }
            if (!this.tableMain)
                return;
            if (this.rowAdder)
                return;
            this.rowAdder = this.tableMain.insertRow(1);
            this.MyAdderRow = [];
            var tFCnt = 0;
            for (var i = 0; i < this.mCurrentFormFieldsInfo.length; i++) {
                var tFldInfo = this.mCurrentFormFieldsInfo[i];
                this.rowAdder.className = "cdeHilightRow";
                var cell3 = ctrlTableCell.Create(null, new cdeNMI.TheTRF(this.MyTableName, 0, tFldInfo), this.rowAdder, tFCnt); //  this.rowAdder.insertCell(i);
                if ((this.mCurrentFormFieldsInfo[i].Flags & 8) !== 0)
                    cell3.SetProperty("Visibility", false);
                if (tFldInfo.DataItem === "CDE_DELETE") {
                    cell3.SetProperty("TileWidth", 1);
                    cell3.SetProperty("ClassName", "cdeTH");
                    cdeNMI.Key13Event = function () { _this.SaveRecord(); };
                    var tSB = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(cell3, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa fa-2x'>&#xf058;</span>"] });
                    tSB.SetProperty("OnClick", function () { _this.SaveRecord(); });
                    cdeNMI.Key27Event = function () { _this.CancelAddRecord(); };
                    var tCB = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileButton).Create(cell3, { PreInitBag: ["ControlTW=1", "ControlTH=1", "TileFactorY=2"], PostInitBag: ["Title=<span class='fa fa-2x'>&#xf057;</span>"] });
                    tCB.SetProperty("OnClick", function () { _this.CancelAddRecord(); });
                }
                else {
                    if (tFldInfo.DataItem !== "CDE_DETAILS" &&
                        tFldInfo.Type !== 29 &&
                        tFldInfo.Type !== 11 &&
                        tFldInfo.Type !== 27 &&
                        tFldInfo.Type !== 22 &&
                        tFldInfo.Type !== 23 &&
                        tFldInfo.Type !== 33 &&
                        (tFldInfo.Flags & 2) !== 0) {
                        tFldInfo["Value"] = tFldInfo["DefaultValue"];
                        var tE = new cdeNMI.ctrlTileEntry();
                        tE.InitControl(cell3, new cdeNMI.TheTRF(this.MyTableName, 0, tFldInfo), ["IsInTable=true"], pScreenID);
                        tE.SetProperty("NoTE", true);
                        tE.MyDataView = this;
                        if (tFldInfo.Type === cdeNMI.cdeControlType.CheckField)
                            tE.SetProperty("TileWidth", tFldInfo["Bits"]);
                        else
                            tE.SetProperty("TileWidth", tFldInfo["FldWidth"]);
                        tE.CreateControl("Id" + i, null);
                        tE.SetProperty("UXID", tFldInfo.cdeMID); //Sets the guid of the control
                        this.MyAdderRow[this.MyTableName + "_" + tFldInfo.FldOrder] = tE;
                    }
                }
                cell3.MyRootElement.style.verticalAlign = "top";
                tFCnt++;
            }
            this.btnAdder.SetProperty("Visibility", false);
            this.IsInEdit = true;
        };
        ctrlTableView.prototype.UploadNext = function () {
            if (this.mFileList.length) {
                var nextFile = this.mFileList.shift();
                var tFileSize = this.GetProperty("MaxFileSize");
                if (!tFileSize) {
                    tFileSize = 512000;
                }
                if (tFileSize > 500000000)
                    tFileSize = 500000000;
                if (nextFile.size >= tFileSize) { // 262144) { // 256kb
                    cdeNMI.MyToast.ShowToastMessage("File " + nextFile.name + " size " + nextFile.size + " too big - Max: " + tFileSize);
                    this.OnComplete(nextFile.size);
                }
                else {
                    cdeNMI.MyToast.ShowToastMessage("Reading: " + nextFile.name);
                    this.UploadFile(nextFile, status);
                }
            }
            else {
                this.mBaseDiv.classList.remove('ctrlDropUploaderHover');
            }
        };
        ctrlTableView.prototype.OnComplete = function (size) {
            this.UploadNext();
        };
        ctrlTableView.prototype.UploadFile = function (file, status) {
            var _this = this;
            var reader = new FileReader();
            reader.onload = function (evt) {
                var tres = reader.result;
                if (_this.MyEngineName) {
                    var tFileName = file.name;
                    var tDir = _this.GetProperty("TargetDir");
                    if (tDir) {
                        if (tDir.substr(tDir.length - 1, 1) !== '\\')
                            tDir += "\\";
                        tFileName = tDir + tFileName;
                    }
                    if (_this.MyFieldInfo) {
                        var tPushName = "CDE_FILEPUSH:" + tFileName + ":" + _this.MyFieldInfo.cdeO;
                        if (_this.GetProperty("Cookie"))
                            tPushName += ":" + _this.GetProperty("Cookie");
                        if (cde.CBool(_this.GetProperty("AllowGlobalPush")) && cde.MyBaseAssets.MyEngines[_this.MyEngineName])
                            cdeCommCore.PublishCentral(_this.MyEngineName, tPushName, tres);
                        else
                            cdeCommCore.PublishToNode(_this.MyFieldInfo.cdeN, _this.MyEngineName, tPushName, tres);
                    }
                }
                _this.FireEvent(false, "OnFilePushed", evt.target);
            };
            reader.readAsDataURL(file);
        };
        ctrlTableView.prototype.ProcessFiles = function (pFileList) {
            if (!pFileList || !pFileList.length || this.mFileList.length)
                return;
            for (var i = 0; i < pFileList.length; i++) {
                this.mFileList.push(pFileList[i]);
            }
            this.UploadNext();
        };
        //Legacy Compliance
        ctrlTableView.Create = function (pTargetControl, pScreenID, pTRF, pTableInfo, pIsLiveData, pClassName, pMetaData) {
            var tTable = new ctrlTableView(pTRF);
            if (pMetaData)
                tTable.MyMetaData = pMetaData;
            if (cdeCommonUtils.CBool(pIsLiveData))
                tTable.SetProperty("IsLiveData", true);
            else
                tTable.SetProperty("IsLiveData", false);
            if (pTableInfo) {
                var tStr = pTableInfo.split(':');
                if (tStr.length > 4)
                    tTable.SetProperty("PageSize", cdeCommonUtils.CInt(tStr[4]));
                if (tStr.length > 5)
                    tTable.SetProperty("CurrentPage", cdeCommonUtils.CInt(tStr[5]));
            }
            tTable.InitControl(pTargetControl, pTRF, null, pScreenID);
            if (pClassName)
                tTable.SetProperty("InnerClassName", pClassName);
            return tTable;
        };
        return ctrlTableView;
    }(cdeNMI.TheDataViewBase));
    cdeNMI.ctrlTableView = ctrlTableView;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /////////////////////////////////////////////////////////////////////////
    /////***********************************************
    /////   C-DMyForms GENERATOR
    /////***********************************************
    /**
    * Creates a complete form for a given StorageMirror
    *
    * (4.1 Ready!)
    */
    var ctrlIFrameView = /** @class */ (function (_super) {
        __extends(ctrlIFrameView, _super);
        function ctrlIFrameView(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.MyScreenInfo = null;
            _this.MyFormInfo = null;
            _this.MyTableName = null;
            _this.mBaseDiv = null;
            _this.mDivDashboardContent = null;
            return _this;
        }
        ctrlIFrameView.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.FormView;
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            this.MyTableName = cde.GuidToString(this.MyTRF.TableName);
            this.MyScreenInfo = cdeNMI.MyNMIModels[this.MyScreenID];
            if (this.MyTRF)
                this.MyTRF.ModelID = this.MyScreenID;
            var tDiv = document.getElementById('Inline_' + cde.GuidToString(this.MyTableName));
            if (tDiv)
                this.mBaseDiv = tDiv;
            if (!this.mBaseDiv && !pTargetControl && this.MyScreenInfo.MyStorageMeta[this.MyTableName]) {
                this.mBaseDiv = document.getElementById('Content_' + cde.GuidToString(this.MyScreenInfo.MyStorageMeta[this.MyTableName].TargetElement));
            }
            var pClassName = 'CMyForm';
            if (!this.mBaseDiv) {
                this.mBaseDiv = document.createElement("div");
                this.mBaseDiv.className = pClassName;
                if (this.MyTarget) {
                    this.MyTarget.GetElement().innerHTML = ""; //OK
                }
            }
            else {
                this.mBaseDiv.innerHTML = ""; //OK
            }
            this.mBaseDiv.style.width = "inherit";
            this.mBaseDiv.style.height = (window.innerHeight - cdeNMI.GetSizeFromTile(1)) + "px";
            this.mDivDashboardContent = document.createElement("iframe");
            this.mDivDashboardContent.className = "cdeDashboardIFrame";
            this.mDivDashboardContent.style.width = "inherit";
            this.mDivDashboardContent.style.height = "inherit";
            this.mDivDashboardContent.onload = function (evt) {
                _this.FireEvent(true, "OnIFrameLoaded", evt);
            };
            this.mDivDashboardContent.id = "cdeIFrame_" + this.MyScreenID;
            this.mBaseDiv.appendChild(this.mDivDashboardContent);
            this.SetElement(this.mBaseDiv, false, this.mDivDashboardContent);
            this.SetProperty("ID", "FORM_" + this.MyTableName);
            this.RegisterNMIControl();
            return true;
        };
        ctrlIFrameView.prototype.SetProperty = function (pName, pValue) {
            var _this = this;
            if (pName === "ClassName" && this.mDivDashboardContent) {
                this.mDivDashboardContent.className = pValue;
            }
            else
                _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Source") {
                if (this.GetProperty("AddHeader") && cde.MyCommChannel) {
                    cde.MyCommChannel.GetGlobalResource(pValue, this.GetProperty("AddHeader"), function (t) {
                        _this.MyContainerElement.src = "data:text/html;charset=utf-8," + escape(t);
                    });
                    /*
    $.ajax({
        type: "GET",
        url: "https://app.icontact.com/icp/a/",
        contentType: "application/json",
        beforeSend: function(xhr, settings){
                xhr.setRequestHeader("some_custom_header", "foo");},
        success: function(data){
            $("#output_iframe_id").attr('src',"data:text/html;charset=utf-8," + escape(data))
        }
    });                 * */
                }
                else
                    this.MyContainerElement.src = pValue;
            }
            else if (pName === "OnIFrameLoaded") {
                if (typeof pValue === "string" && pValue.substr(0, 4) === "NOWN") {
                    var tP_1 = pValue.split(':');
                    this.RegisterEvent("OnIFrameLoaded", function () {
                        if (cdeNMI.MyEngine && _this.MyTRF)
                            cdeNMI.MyEngine.GetBaseEngine().PublishToOwner(_this.MyTRF.GetOwner(), "OnLoaded:" + _this.MyTRF.GetMID() + (tP_1.length > 1 ? (":" + tP_1[1]) : ""), _this.GetProperty("Source"), _this.MyTRF.GetNodeID(), null, _this.MyTRF.GetMID());
                    });
                }
                else
                    this.RegisterEvent("OnIFrameLoaded", pValue);
            }
            else if (pName === "Caption" || pName === "Title") {
                if (cdeNMI.MyScreenManager) {
                    var tS = cdeNMI.MyScreenManager.GetScreenByID(this.MyTableName);
                    if (tS)
                        tS.SetProperty(pName, pValue);
                }
            }
            else if (pName === "TileHeight") {
                if (!cde.CBool(this.GetSetting("HidePins")))
                    this.mDivDashboardContent.style.height = (this.GetElement().clientHeight - 44) + "px"; //44=39 +5
                else
                    this.mDivDashboardContent.style.height = "inherit";
            }
            else if (pName === "TileWidth") {
                this.ApplySkin();
            }
            else if (pName === "AllowScrolling") {
                this.mDivDashboardContent.style.overflow = "auto";
                this.ApplySkin();
            }
        };
        return ctrlIFrameView;
    }(cdeNMI.TheDataViewBase));
    cdeNMI.ctrlIFrameView = ctrlIFrameView;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    /**
* Creates a new Login Screen Control
*
* (4.1 Ready!)
*/
    var TheLoginScreen = /** @class */ (function (_super) {
        __extends(TheLoginScreen, _super);
        function TheLoginScreen(pTRF) {
            var _this = _super.call(this, pTRF) || this;
            _this.mUID = null;
            _this.mPWD = null;
            _this.mPWD2 = null;
            _this.mRelay = null;
            _this.mScope = null;
            _this.mLoginButton = null;
            _this.mHeader = null;
            _this.mHeaderHelp = null;
            _this.mStatusMsg = null;
            _this.tLoginGroup = null;
            _this.mMeshPicker = null;
            _this.bFinishCalled = false;
            _this.bLoginFired = false;
            return _this;
        }
        TheLoginScreen.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            var _this = this;
            this.MyBaseType = cdeNMI.cdeControlType.LoginScreen;
            if (!pPropertyBag)
                pPropertyBag = [];
            pPropertyBag.push("HidePins=true");
            pPropertyBag.push("ScreenTitle=Login Screen");
            pPropertyBag.push("DashBoardID=LOGIN");
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, "CDELOGINSCREEN");
            this.SetProperty("ScreenClassName", "cde-animate-login cdeLoginScreen");
            this.SetProperty("ClassName", "cdeLoginContent");
            this.tLoginGroup = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileGroup).Create(this, { PostInitBag: ["TileWidth=6", "ClassName=cdeLoginBlock"] });
            var tIcon = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.LogoButton, 4, "", 0, "", ["TileWidth=2", "TileHeight=2", "ClassName=cdeLogo cdeLoginItemAnim", "Style=outline-style:none;"]));
            var tIconTE = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tIcon });
            tIconTE.CreateControl("LOGO");
            tIconTE.SetProperty("OnClick", function () {
                if (cde.MyBaseAssets.MyServiceHostInfo.PortalReset)
                    cde.MyBaseAssets.MyServiceHostInfo.PortalReset();
                else {
                    location.reload(true);
                    //cdeNMI.ResetBrowserToPortal();
                }
            });
            var tHeader = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SmartLabel, 4, "", 2, "", ["NoTE=true", "TileFactorY=2", "TileHeight=1", "TileWidth=4", "ClassName=cdeDlgTitleBar", "ContainerStyle=margin-top: 34px;", "iValue=Welcome to your NMI Portal"]));
            this.mHeader = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tHeader });
            this.mHeader.CreateControl("HEADER");
            var tLogText = "Please login with your credentials";
            if (cde.MyBaseAssets.MyServiceHostInfo.LoginDisallowed) {
                if (this.GetProperty("ReasonText"))
                    tLogText = this.GetProperty("ReasonText");
                else
                    tLogText = "This Node is locked. NMI Access is disallowed";
            }
            else if (cde.MyBaseAssets.HasAutoLogin === true)
                tLogText = "Autologin...please wait";
            var tHeader2 = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SmartLabel, 4, "", 258, "", ["NoTE=true", "TileHeight=1", "TileWidth=4", "iValue=" + tLogText]));
            this.mHeaderHelp = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tHeader2 });
            this.mHeaderHelp.CreateControl("HEADERHELP");
            var tStatus = "Waiting...";
            var tStatusClass = "cdeEngineStatusYellow";
            if (!cde.MyBaseAssets.MyServiceHostInfo.LoginDisallowed) {
                if (!cde.MyBaseAssets.MyServiceHostInfo.AutoConnectRelay || cde.MyBaseAssets.MyServiceHostInfo.AutoConnectRelay === "") {
                    var tRelays = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.ComboOption, 4, "Select Relay", 2, "", ["EditPlaceholder=Select or enter a relay", "Options=" + cde.MyBaseAssets.MyServiceHostInfo.KnownRelays]));
                    this.mRelay = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tRelays });
                    this.mRelay.CreateControl("UID");
                }
                if (cde.MyBaseAssets.HasAutoLogin === false) {
                    if (cde.MyBaseAssets.MyServiceHostInfo.EnablePinLogin) {
                        var tPWD = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.Password, 4, "PIN", 3, "", ["EditPlaceholder=Enter Pin", "InTemplate=true", "AutoShowMTL=true"]));
                        this.mPWD = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tPWD });
                        this.mPWD.CreateControl("PWD");
                        this.mPWD.MyNMIControl.RegisterEvent("OnValueChanged", function () {
                            _this.LoginClick();
                        });
                    }
                    else {
                        var tUID = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.eMail, 4, "Username", 2, "", ["EditPlaceholder=Enter email", "InTemplate=true"]));
                        this.mUID = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tUID });
                        this.mUID.CreateControl("UID");
                        var tPWD = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.Password, 4, "Password", 3, "", ["EditPlaceholder=Enter Password", "InTemplate=true"]));
                        this.mPWD = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tPWD });
                        this.mPWD.CreateControl("PWD");
                        var tPWD2 = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.Password, 4, "Repeat Password", 3, "", ["EditPlaceholder=Repeat Password", "InTemplate=true"]));
                        this.mPWD2 = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tPWD2 });
                        this.mPWD2.CreateControl("PWD2");
                        if (cde.MyBaseAssets.MyServiceHostInfo.AllowSetScopeWithSetAdmin) {
                            var tScope = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.Password, 4, "Security ID", 3, "", ["EditPlaceholder=Security ID", "Visibility=false", "InTemplate=true"]));
                            this.mScope = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tScope });
                            this.mScope.CreateControl("SCOPE");
                        }
                        var tLogBut = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.TileButton, 4, "Login", 2, "", ["NoTE=true"]));
                        this.mLoginButton = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tLogBut });
                        this.mLoginButton.CreateControl("LOGBUT");
                        this.mLoginButton.MyNMIControl.SetProperty("OnClick", function () { _this.LoginClick(); });
                    }
                }
            }
            else {
                if (this.GetProperty("StatusText"))
                    tStatus = this.GetProperty("StatusText");
                else
                    tStatus = "Node locked!";
                tStatusClass = "cdeEngineStatusRed";
            }
            var tStatMsg = new cdeNMI.TheTRF("NOTABLE", 0, new cdeNMI.TheFieldInfo(cdeNMI.cdeControlType.SmartLabel, 4, "Status...", 2, "", ["NoTE=true", "TileFactorY=2", "TileHeight=1", "TileWidth=6", "ClassName=" + tStatusClass, "iValue=" + tStatus]));
            this.mStatusMsg = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.TileEntry).Create(this.tLoginGroup, { TRF: tStatMsg });
            this.mStatusMsg.CreateControl("LOGSTATUS");
            if (cdeNMI.MyEngine && !cde.MyBaseAssets.MyServiceHostInfo.LoginDisallowed) {
                cdeNMI.MyEngine.RegisterEvent("CDE_LOGIN_EVENT", function (s, a, r, b) { _this.FinishLogin(a, r, b); });
                cdeNMI.MyEngine.RegisterEvent("CDE_SETSTATUSMSG", function (s, a, b) { _this.SetStatusMsg(a, b); });
                cdeNMI.MyEngine.RegisterEvent("CDE_SELECT_MESH", function (s, a) { _this.ShowMeshSelect(a); });
                cdeNMI.MyEngine.RequestEngineStatus();
            }
            //this.SetElement(this.tLoginGroup.GetElement(), true, this.tLoginGroup.GetElement());
            this.ResetDialog();
            return true;
        };
        TheLoginScreen.prototype.SetProperty = function (pName, pValue) {
            _super.prototype.SetProperty.call(this, pName, pValue);
            if (pName === "Text" || pName === "Value" || pName === "iValue") {
                this.mHeaderHelp.SetProperty("Text", pValue);
            }
            else if (pName === "Visibility") {
                if (cde.CBool(pValue)) {
                    if (cdeNMI.MyScreenManager)
                        cdeNMI.MyScreenManager.ShowHeader(false);
                }
                else {
                    if (cdeNMI.MyScreenManager)
                        cdeNMI.MyScreenManager.ShowHeader(true);
                }
            }
        };
        TheLoginScreen.prototype.LoginClick = function () {
            if (cde.MyBaseAssets.MyServiceHostInfo.AdminPWMustBeSet) {
                if (cdeNMI.Check4ValidPassword(this.mPWD.MyNMIControl.GetProperty("Value"))) {
                    if (cdeNMI.IsSamePassword(this.mPWD.MyNMIControl.GetProperty("Value"), this.mPWD2.MyNMIControl.GetProperty("Value"), true)) {
                        if (cdeNMI.Check4ValidEmail(this.mUID.MyNMIControl.GetProperty("Value"))) {
                            cdeNMI.Key13Event = null;
                            this.SetProperty("Text", "...updating Admin credentials...");
                            this.mUID.MyNMIControl.SetProperty("Disabled", true);
                            this.mPWD.MyNMIControl.SetProperty("Disabled", true);
                            this.mPWD2.MyNMIControl.SetProperty("Disabled", true);
                            if (this.mScope)
                                this.mScope.MyNMIControl.SetProperty("Disabled", true);
                            this.mLoginButton.MyNMIControl.SetProperty("Disabled", true);
                            var toEncr = this.mUID.GetProperty("Value") + ";:;" + this.mPWD.GetProperty("Value");
                            if (this.mScope && cde.MyBaseAssets.MyServiceHostInfo.AllowSetScopeWithSetAdmin)
                                toEncr += ";:;" + this.mScope.GetProperty("Value");
                            var cred = toEncr;
                            if (cde.MyContentEngine) {
                                cred = cde.MyContentEngine.RSAEncrypt(cred);
                                cde.MyContentEngine.PublishToFirstNode('CDE_UPD_ADMIN:' + cde.MyBaseAssets.MyServiceHostInfo.AdminRole, cred);
                            }
                        }
                        else {
                            this.ShakeNError("Please enter a valid email address.");
                        }
                    }
                    else {
                        this.ShakeNError("Passwords do not match, please try again");
                    }
                }
                else {
                    this.ShakeNError("Passwords must be at least 8 characters, please try again");
                }
            }
            else {
                var tTarget = null;
                if (!cde.MyBaseAssets.MyServiceHostInfo.AutoConnectRelay) {
                    tTarget = this.mRelay.GetProperty("Value");
                    this.mRelay.SetProperty("Disabled", true);
                }
                if (!cde.MyBaseAssets.MyServiceHostInfo.IsUsingUserMapper || cde.MyBaseAssets.MyServiceHostInfo.EnablePinLogin) {
                    cdeNMI.Key13Event = null;
                    if (cde.MyBaseAssets.MyServiceHostInfo.EnablePinLogin === true)
                        this.SetProperty("Text", "...login with PIN...");
                    else
                        this.SetProperty("Text", "...setting scope...");
                    var tScope = this.mPWD.GetProperty("Value");
                    if (this.mUID)
                        this.mUID.SetProperty("Disabled", true);
                    this.mPWD.SetProperty("Disabled", true);
                    if (this.mPWD2)
                        this.mPWD2.SetProperty("Disabled", true);
                    if (this.mLoginButton)
                        this.mLoginButton.SetProperty("Disabled", true);
                    if (cdeNMI.MyEngine)
                        cdeNMI.MyEngine.Login(tTarget, tScope);
                    else {
                        if (this.HasEvent("OnLogin"))
                            this.FireEvent(true, "OnLogin", tScope);
                        else {
                            if (cdeNMI.MyPopUp)
                                cdeNMI.MyPopUp.Show("NMI requires login but no login provider found. Access is denied.", true, null, null, function () {
                                    cdeNMI.ResetBrowserToPortal();
                                });
                        }
                    }
                }
                else {
                    if (cdeNMI.MyEngine) {
                        var tRes = cdeNMI.MyEngine.ValidateUID(this.mUID.MyNMIControl.GetProperty("Value"));
                        if (tRes) {
                            this.ShakeNError(tRes);
                            return;
                        }
                    }
                    cdeNMI.Key13Event = null;
                    this.SetProperty("Text", "...verifying credentials...");
                    this.mUID.SetProperty("Disabled", true);
                    this.mPWD.SetProperty("Disabled", true);
                    this.mPWD2.SetProperty("Disabled", true);
                    this.mLoginButton.SetProperty("Disabled", true);
                    if (cdeNMI.MyEngine)
                        cdeNMI.MyEngine.Login(tTarget, this.mUID.GetProperty("Value"), this.mPWD.GetProperty("Value"));
                    else {
                        if (this.HasEvent("OnLogin"))
                            this.FireEvent(true, "OnLogin", this.mUID.GetProperty("Value"), this.mPWD.GetProperty("Value"));
                        else {
                            if (cdeNMI.MyPopUp)
                                cdeNMI.MyPopUp.Show("NMI requires login but no login provider found. Access is denied.", true, null, null, function () {
                                    cdeNMI.ResetBrowserToPortal();
                                });
                        }
                    }
                }
            }
        };
        TheLoginScreen.prototype.ShakeNError = function (pText) {
            var _this = this;
            this.tLoginGroup.GetElement().addEventListener("animationend", function () {
                //this.tLoginGroup.GetElement().removeEventListener("animationend", arguments.callee);
                _this.tLoginGroup.GetElement().classList.remove("cde-animate-shake");
                _this.ResetDialog();
            });
            this.tLoginGroup.GetElement().classList.add("cde-animate-shake");
            this.mStatusMsg.SetProperty("Text", pText);
            this.mStatusMsg.SetProperty("ClassName", "cdeEngineStatusRed");
        };
        TheLoginScreen.prototype.ShowMeshSelect = function (pMeshes) {
            this.tLoginGroup.SetProperty("Visibility", false);
            this.mMeshPicker = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.MeshPicker).Create(this);
            this.mMeshPicker.SetProperty("SetMesh", pMeshes);
        };
        TheLoginScreen.prototype.FinishLogin = function (bSuccess, pReason, pUserPref) {
            var _this = this;
            if (this.bFinishCalled || this.bLoginFired)
                return;
            if (!bSuccess) {
                this.ShakeNError(pReason);
            }
            else {
                this.bFinishCalled = true;
                cdeNMI.TL.RegisterEvent("OnLCIDChanged", function () {
                    if (_this.bLoginFired)
                        return;
                    _this.bLoginFired = true;
                    if (_this.tLoginGroup.GetProperty("Visibility") === false) {
                        _this.mMeshPicker.GetElement().addEventListener("animationend", function () {
                            _this.SetProperty("Visibility", false);
                            _this.mMeshPicker.GetElement().classList.remove("cdeLogin-animate-zoom");
                            _this.FireEvent(false, "OnLogin", bSuccess, pUserPref);
                        });
                        _this.mMeshPicker.GetElement().classList.add("cdeLogin-animate-zoom");
                    }
                    else {
                        _this.tLoginGroup.GetElement().addEventListener("animationend", function () {
                            _this.SetProperty("Visibility", false);
                            _this.tLoginGroup.GetElement().classList.remove("cdeLogin-animate-zoom");
                            _this.FireEvent(false, "OnLogin", bSuccess, pUserPref);
                        });
                        _this.tLoginGroup.GetElement().classList.add("cdeLogin-animate-zoom");
                        _this.mStatusMsg.SetProperty("ClassName", "cdeEngineStatusGreen");
                        _this.mStatusMsg.SetProperty("Text", "Done...Requesting Portal...please wait");
                    }
                });
                this.mStatusMsg.SetProperty("Text", "Login successful! Loading language...please wait");
                this.mStatusMsg.SetProperty("ClassName", "cdeEngineStatusYellow");
                cdeNMI.TL.SetLCID(cde.MyBaseAssets.MyServiceHostInfo.CurrentLCID);
            }
        };
        TheLoginScreen.prototype.ResetDialog = function () {
            var _this = this;
            if (cde.MyBaseAssets.HasAutoLogin === true)
                return;
            if (cde.MyBaseAssets.MyServiceHostInfo.LoginDisallowed)
                return;
            cdeNMI.Key13Event = function () {
                _this.LoginClick();
            };
            this.mUID.SetProperty("Disabled", false);
            this.mPWD.SetProperty("Disabled", false);
            this.mPWD2.SetProperty("Disabled", false);
            this.mLoginButton.SetProperty("Disabled", false);
            this.mUID.SetProperty("Value", "");
            this.mPWD.SetProperty("Value", "");
            if (this.mScope) {
                this.mScope.SetProperty("Visibility", false);
                this.mScope.SetProperty("Disabled", false);
            }
            this.mPWD2.SetProperty("Value", "");
            if (this.mScope)
                this.mScope.SetProperty("Value", "");
            this.mPWD.SetProperty("Label", "Password");
            this.mPWD.SetProperty("EditPlaceholder", "Enter Password");
            if (cde.MyBaseAssets.MyServiceHostInfo.AdminPWMustBeSet) {
                this.mLoginButton.MyNMIControl.SetProperty("Text", "Set Password");
                if (this.mScope)
                    this.mScope.SetProperty("Visibility", true);
                this.mUID.SetProperty("Visibility", true);
                this.mPWD2.SetProperty("Visibility", true);
                if (cde.MyBaseAssets.MyServiceHostInfo.AllowSetScopeWithSetAdmin)
                    this.mScope.SetProperty("Visibility", true);
                this.mHeaderHelp.MyNMIControl.SetProperty("Text", "The Administrator password and email are not set, yet. Please enter a strong password to ensure maximum security.");
            }
            else {
                if (cde.MyBaseAssets.MyServiceHostInfo.IsUsingUserMapper) {
                    this.mLoginButton.MyNMIControl.SetProperty("Text", "Login");
                    this.mUID.SetProperty("Visibility", true);
                    this.mPWD2.SetProperty("Visibility", false);
                    this.mHeaderHelp.MyNMIControl.SetProperty("Text", "Please login with your credentials");
                }
                else {
                    this.mLoginButton.MyNMIControl.SetProperty("Text", "Set Security ID");
                    this.mUID.SetProperty("Visibility", false);
                    this.mPWD.SetProperty("Label", "Security ID");
                    this.mPWD.SetProperty("EditPlaceholder", "Enter Security ID");
                    this.mPWD2.SetProperty("Visibility", false);
                    this.mHeaderHelp.MyNMIControl.SetProperty("Text", "Please enter your Security ID");
                }
            }
        };
        TheLoginScreen.prototype.SetStatusMsg = function (pStatusMsg, pState) {
            var tColor = "cdeEngineStatusGreen";
            switch (pState) {
                case 2:
                    tColor = "cdeEngineStatusYellow";
                    break;
                case 3:
                    tColor = "cdeEngineStatusRed";
                    break;
            }
            this.mStatusMsg.SetProperty("Text", pStatusMsg);
            this.mStatusMsg.SetProperty("ClassName", tColor);
        };
        return TheLoginScreen;
    }(cdeNMI.TheNMIScreen));
    cdeNMI.TheLoginScreen = TheLoginScreen;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    var ctrlCertPicker = /** @class */ (function (_super) {
        __extends(ctrlCertPicker, _super);
        function ctrlCertPicker(pTRF) {
            return _super.call(this, pTRF) || this;
        }
        ctrlCertPicker.prototype.InitControl = function (pTargetControl, pTRF, pPropertyBag, pScreenID) {
            this.MyBaseType = cdeNMI.cdeControlType.CertPicker;
            this.ControlText = "ctrlCertPicker";
            this.RefreshCombo = '[{"V":"CDE_NOP","N":"click to see certificate-thumb and list"}]';
            _super.prototype.InitControl.call(this, pTargetControl, pTRF, pPropertyBag, pScreenID);
            return true;
        };
        ctrlCertPicker.prototype.LoadComboContent = function (bForceShow) {
            var tChoiceOptions = this.GetProperty("LiveOptions");
            if (!tChoiceOptions) {
                if (cdeNMI.MyEngine) {
                    cdeNMI.MyEngine.PublishToNMI('NMI_GET_DATA:CERTPICKER:' + this.GetProperty("ID") + ':' + this.GetProperty("UXID"), '', this.MyFieldInfo ? this.MyFieldInfo.cdeN : null);
                    if (bForceShow)
                        this.UpdatePicker(bForceShow);
                }
                else {
                    this.DoShow = bForceShow;
                    this.SetProperty("LiveOptions", '[{"V":"CDE_NOP","N":"No NMI Engine available - cannot load"}]');
                }
            }
            else {
                this.CreateComboOptions(tChoiceOptions, this.GetProperty("Value"), true);
                this.UpdatePicker(bForceShow);
            }
            this.DoShow = false;
        };
        return ctrlCertPicker;
    }(cdeNMI.ctrlPropertyPicker));
    cdeNMI.ctrlCertPicker = ctrlCertPicker;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    //Required for Backwards Compat with Convenience Apps
    var TheMainPage = /** @class */ (function () {
        function TheMainPage() {
        }
        TheMainPage.SetHoloLens = function () {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.SetHoloLens();
            return "";
        };
        TheMainPage.GotoStationHome = function (IsManual) {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.GotoStationHome(IsManual);
        };
        TheMainPage.ClearAndGoHome = function () {
            if (cdeNMI.MyScreenManager)
                cdeNMI.MyScreenManager.ClearAndGoHome();
        };
        TheMainPage.GetDeepLink = function () {
            if (cdeNMI.MyScreenManager)
                return cdeNMI.MyScreenManager.GetDeepLink();
            return "";
        };
        TheMainPage.TransitToScreen = function (pID, pMust, bDontTry) {
            if (cdeNMI.MyScreenManager)
                return cdeNMI.MyScreenManager.TransitToScreen(pID, pMust, bDontTry);
        };
        return TheMainPage;
    }());
    cdeNMI.TheMainPage = TheMainPage;
    function FireEvent(FireAsync, pEventName) {
        var _a;
        var params = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            params[_i - 2] = arguments[_i];
        }
        (_a = cde.MyBaseAssets).FireEvent.apply(_a, __spreadArrays([FireAsync, pEventName], params));
    }
    cdeNMI.FireEvent = FireEvent;
    function RegisterEvent(pEventName, pCallback) {
        cde.MyBaseAssets.RegisterEvent(pEventName, function (sender) {
            var param = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                param[_i - 1] = arguments[_i];
            }
            pCallback.apply(void 0, param);
        });
    }
    cdeNMI.RegisterEvent = RegisterEvent;
    function AddCSSToHeader(pCSSFile, pCSSFileLite) {
        cde.AddCSSToHeader(pCSSFile, pCSSFileLite);
    }
    cdeNMI.AddCSSToHeader = AddCSSToHeader;
})(cdeNMI || (cdeNMI = {}));
var cdeCommonUtils;
(function (cdeCommonUtils) {
    function FixupPath(pInPath) {
        return cde.FixupPath(pInPath);
    }
    cdeCommonUtils.FixupPath = FixupPath;
    function DateToString(inDate) {
        return cde.DateToString(inDate);
    }
    cdeCommonUtils.DateToString = DateToString;
    function IsNotSet(pInVal) {
        return cde.IsNotSet(pInVal);
    }
    cdeCommonUtils.IsNotSet = IsNotSet;
    function CStr(pInVal) {
        return cde.CStr(pInVal);
    }
    cdeCommonUtils.CStr = CStr;
    function CInt(pInVal) {
        return cde.CInt(pInVal);
    }
    cdeCommonUtils.CInt = CInt;
    function CBool(inStr) {
        return cde.CBool(inStr);
    }
    cdeCommonUtils.CBool = CBool;
    function CDbl(pInVal) {
        return cde.CDbl(pInVal);
    }
    cdeCommonUtils.CDbl = CDbl;
    function GuidToString(InGuid) {
        return cde.GuidToString(InGuid);
    }
    cdeCommonUtils.GuidToString = GuidToString;
    function cdeLogEvent(e) {
        cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "BackCompat:cdeLogEvent", e);
    }
    cdeCommonUtils.cdeLogEvent = cdeLogEvent;
    function cdeMinMax(pValue, sourceMax, sourceMin, targetMax, targetMin) {
        return cdeNMI.cdeMinMax(pValue, sourceMax, sourceMin, targetMax, targetMin);
    }
    cdeCommonUtils.cdeMinMax = cdeMinMax;
    function toRadians(degrees) {
        return cdeNMI.toRadians(degrees);
    }
    cdeCommonUtils.toRadians = toRadians;
    ;
})(cdeCommonUtils || (cdeCommonUtils = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
var cdeNMI;
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
(function (cdeNMI) {
    function StartupNMI() {
        if (cde.MyBaseAssets.MyServiceHostInfo.DebugLevel > 3)
            debugger;
        if (document.getElementById("cdeLogView")) {
            cde.MyEventLogger.RegisterEvent("CDE_NEW_LOGENTRY", function (pSender, location, Logtext) {
                var ele = document.getElementById("cdeLogView");
                if (ele)
                    ele.innerHTML = cdeNMI.FormatDateNow("YYYY-MM-DD HH:mm:ss") + ": " + location + ":" + Logtext + "</br>" + ele.innerHTML;
            });
        }
        if (cde.MyBaseAssets.MyServiceHostInfo.ShowLogInConsole === true) {
            cde.MyEventLogger.RegisterEvent("CDE_NEW_LOGENTRY", function (pSender, location, Logtext) {
                var pText = cdeNMI.FormatDateNow("YYYY-MM-DD HH:mm:ss") + ": " + location + ":" + Logtext;
                if (typeof Debug !== "undefined")
                    Debug.writeln(pText);
                else
                    console.log(pText);
            });
        }
        //cde.MyEventLogger.FireEvent(true, "CDE_NEW_LOGENTRY", "ScreenInfo", window.innerWidth + "," + window.innerHeight +" Doc:"+ screen.width+","+screen.height);
        //document.onkeydown = (evt) => {
        //    const keyCode = evt ? (evt.which ? evt.which : evt.keyCode) : evt.keyCode;
        //    switch (keyCode) {
        //        case 13:
        //            if (cdeNMI.Key13Event !== null)
        //                cdeNMI.Key13Event(evt);
        //            cdeNMI.Key13Event = null;
        //            break;
        //        case 27:
        //            //For escape.
        //            if (cdeNMI.Key27Event !== null)
        //                cdeNMI.Key27Event(evt);
        //            cdeNMI.Key27Event = null;
        //            break;
        //        case 10009: //Tizen back
        //            if (cdeNMI.MyScreenManager)
        //                cdeNMI.MyScreenManager.NavigateBack(false);
        //            break;
        //        case 39: //right
        //            cdeNMI.focusNextElement(false);
        //            break;
        //        case 37: //left
        //            cdeNMI.focusNextElement(true);
        //            break;
        //    }
        //};
        //Step 1: Register all overrides (can be done in StartEngine of custom Engines)
        if (cde.MyBaseAssets.MyServiceHostInfo.ShowClassic)
            cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ScreenManager, "cdeNMI.TheScreenManagerClassic");
        else {
            if (cde.MyBaseAssets.MyServiceHostInfo.ScreenManagerClass) {
                cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ScreenManager, cde.MyBaseAssets.MyServiceHostInfo.ScreenManagerClass);
            }
            else {
                cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ScreenManager, "cdeNMI.TheScreenManagerModern");
            }
        }
        cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ProgressBar, "cdeNMI.ctrlProgressBarCool");
        cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.SingleCheck, "cdeNMI.ctrlToggleButton2");
        //cde.MyBaseAssets.MyServiceHostInfo.DisableWebWorker = true;
        //cde.MyBaseAssets.MyServiceHostInfo.PortalReset = function () { return; };
        //debugger;
        //Step 2: Create Communication Channel
        if (window.SharedWorker && !cde.MyBaseAssets.MyServiceHostInfo.DisableWebWorker)
            cde.MyCommChannel = new cdeWEB.cdeWebWorkerComm();
        else
            cde.MyCommChannel = new cdeWEB.cdeWebComm();
        //Step 3: Start Engine Host (starts the ContentService Engine)
        cde.StartEngineHost();
        //Step 4: Start NMI Communication Engine -not required if only manual screens have to be debugged
        //cdeNMI.TheNMIServiceLocal.StartEngine();    //This Engine does not need the CommChannel
        cdeNMI.TheNMIService.StartEngine();
        //Step 5: Login/start communication - Login should be done via NMI!
        if (cde.MyBaseAssets.MyServiceHostInfo.AutoConnectRelay && cde.MyCommChannel) {
            var tConfig = new cde.TheCommConfig(cde.MyBaseAssets.MyServiceHostInfo.WsTimeOut);
            tConfig.DisableRSA = cde.CBool(cde.MyBaseAssets.MyServiceHostInfo.DisableRSA);
            if (cde.MyBaseAssets.MyServiceHostInfo.AutoConnectRelay === "INCDE") {
                tConfig.RequestPath = "<%=ISBPATH%>";
                if (tConfig.RequestPath.substr(0, 3) === "<%=")
                    tConfig.RequestPath = null;
                tConfig.uri = cde.MyBaseAssets.MyCommStatus.MyServiceUrl;
                tConfig.wsuri = cde.MyBaseAssets.MyServiceHostInfo.MyWSServiceUrl;
                if (cde.MyBaseAssets.MyServiceHostInfo.UToken) {
                    tConfig.Creds = new cde.TheCDECredentials();
                    tConfig.Creds.QToken = cde.MyBaseAssets.MyServiceHostInfo.UToken;
                }
                tConfig.NoISB = true;
            }
            else {
                tConfig.uri = cde.MyBaseAssets.MyServiceHostInfo.AutoConnectRelay;
            }
            cde.MyCommChannel.RegisterEvent("CDE_CONN_CHANGED", function (sender, bSuccess) {
                if (bSuccess)
                    cdeNMI.CreatePortalControls();
                else {
                    cdeNMI.ShowMessage("Connection Failed", "A connection could not be established. Please verify your settings.");
                }
            });
            cde.MyCommChannel.RegisterEvent("CDE_SESSION_ENDED", function (sender, pReason) {
                if (cde.MyBaseAssets.MyServiceHostInfo.PortalReset)
                    cde.MyBaseAssets.MyServiceHostInfo.PortalReset();
                else {
                    cde.MyBaseAssets.MyServiceHostInfo.LoginDisallowed = true;
                    if (cde.MyBaseAssets.MyCommStatus) {
                        cde.MyBaseAssets.MyCommStatus.UserPref = null;
                        cde.MyBaseAssets.MyCommStatus.IsConnected = false;
                    }
                    if (cde.MyCommChannel) {
                        cde.MyCommChannel.ForceDisconnect = true;
                    }
                    cdeNMI.RemoveCookies();
                    var tLogView = document.getElementById("cdeLogView");
                    document.body.innerHTML = "";
                    if (tLogView)
                        document.body.appendChild(tLogView);
                    //var t = cde.TheBaseAssets.IsConnectionDown();
                    cdeNMI.ShowMessage(pReason, "Please refresh this page to login again");
                }
            });
            cde.MyCommChannel.RegisterEvent("CDE_NO_CONNECT", function (sender, pReason) {
                cdeNMI.ShowMessage("Connection Failed", pReason);
            });
            cde.MyCommChannel.StartCommunication(tConfig); //This is async now...we need connection update messages to show
        }
        else
            cdeNMI.CreatePortalControls();
    }
    cdeNMI.StartupNMI = StartupNMI;
    function ShowMessage(pStatus, pReason) {
        cde.MyBaseAssets.MyServiceHostInfo.LoginDisallowed = true;
        cdeNMI.MyLoginScreen = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.LoginScreen, true);
        if (cdeNMI.MyLoginScreen) {
            cdeNMI.MyLoginScreen.SetProperty("StatusText", pStatus);
            cdeNMI.MyLoginScreen.SetProperty("ReasonText", pReason);
            cdeNMI.MyLoginScreen.Create(null);
        }
    }
    cdeNMI.ShowMessage = ShowMessage;
    function CreatePortalControls() {
        //Step 6: Create other Portal Controls
        cdeNMI.MyToast = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Toast, true).Create(null);
        cdeNMI.MyPopUp = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.Popup, true).Create(null);
        cdeNMI.MyToolTip = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.ToolTip, true).Create(null);
        cdeNMI.MyShapeRecognizer = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.ShapeRecognizer, true);
        //Step 7: Switch to the correct language
        cdeNMI.TL.RegisterEvent("OnLCIDChanged", function () {
            //Step 8: if you want a screen manager - create it 
            if (cdeNMI.MyScreenManager || cdeNMI.MyLoginScreen) {
                return;
            }
            if (!cde.MyBaseAssets.MyCommStatus.IsUserLoggedIn && !cde.MyBaseAssets.MyServiceHostInfo.DoAllowAnonymous) {
                cdeNMI.MyLoginScreen = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.LoginScreen, true);
                if (cdeNMI.MyLoginScreen) {
                    cdeNMI.MyLoginScreen.RegisterEvent("OnLogin", function (s, pLoggedIn, pUserPreferences) {
                        if (pLoggedIn) {
                            if (pUserPreferences.Transforms) {
                                var scr = document.createElement('script');
                                scr.type = "text/javascript";
                                scr.text = pUserPreferences.Transforms;
                                document.head.appendChild(scr);
                            }
                            cdeNMI.DoLoginSuccess(pUserPreferences);
                        }
                    });
                    cdeNMI.MyLoginScreen.Create(null);
                }
            }
            else {
                try {
                    if (!cde.MyBaseAssets.MyCommStatus.UserPref)
                        cde.MyBaseAssets.MyCommStatus.UserPref = JSON.parse(cde.MyBaseAssets.MyServiceHostInfo.InitUserPref);
                }
                catch (e) {
                    //ignored
                }
                cdeNMI.DoLoginSuccess(cde.MyBaseAssets.MyCommStatus.UserPref);
            }
        });
        cdeNMI.TL.SetLCID(cde.MyBaseAssets.MyServiceHostInfo.CurrentLCID);
    }
    cdeNMI.CreatePortalControls = CreatePortalControls;
    function DoLoginSuccess(pUserPreferences) {
        if (pUserPreferences) {
            if (pUserPreferences.ShowClassic === true || cde.MyBaseAssets.MyServiceHostInfo.WebPlatform === 5)
                cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ScreenManager, "cdeNMI.TheScreenManagerClassic");
            else {
                if (cde.MyBaseAssets.MyServiceHostInfo.ScreenManagerClass) {
                    cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ScreenManager, cde.MyBaseAssets.MyServiceHostInfo.ScreenManagerClass);
                }
                else {
                    cdeNMI.MyTCF.RegisterControlType(cdeNMI.cdeControlType.ScreenManager, "cdeNMI.TheScreenManagerModern");
                }
            }
            if (pUserPreferences.ThemeName === "Lite") {
                cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme = true;
                cdeNMI.ApplyTheme();
            }
            else if (pUserPreferences.ThemeName === "Dark") {
                cde.MyBaseAssets.MyServiceHostInfo.IsLiteTheme = false;
                cdeNMI.ApplyTheme();
            }
        }
        if (cdeNMI.MyScreenManager)
            return;
        cdeNMI.MyScreenManager = cdeNMI.MyTCF.CreateNMIControl(cdeNMI.cdeControlType.ScreenManager);
        cdeNMI.MyScreenManager.RegisterEvent("OnIsLoaded", function () {
            if (cde.MyBaseAssets.MyServiceHostInfo.RedPill === true && cdeNMI.MyDemoScreens) {
                cdeNMI.MyDemoScreens.Show();
            }
        });
        if (cde.MyBaseAssets.MyServiceHostInfo.RequestGeoLocation === true) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    cde.MyCommChannel.SendQueued(null, cdeNMI.eTheNMIEngine, cdeNMI.eTheNMIEngine, "NMI_MY_LOCATION", (position.coords.longitude + ";" + position.coords.latitude + ";" + position.coords.accuracy), 0, 3, 0, null);
                });
            }
        }
        window.addEventListener("scroll", function () {
            cdeNMI.MyNMISettings.IsScrolling = true;
        });
        cdeNMI.MyScreenManager.Create(null);
        cdeNMI.MyScreenManager.CreateLoginButtonOnly();
        if (cde.MyBaseAssets.MyServiceHostInfo.DoAllowAnonymous && !cdeNMI.MyEngine)
            cdeNMI.MyScreenManager.GotoStationHome(false); //Required only if no Login or Engine is present
    }
    cdeNMI.DoLoginSuccess = DoLoginSuccess;
})(cdeNMI || (cdeNMI = {}));
// SPDX-FileCopyrightText: 2009-2020 TRUMPF Laser GmbH, authors: C-Labs
//
// SPDX-License-Identifier: MPL-2.0
// Type Vector is [ x, y ]
// Type Matrix is [ Vector, Vector ]
// Type Transform is [ Matrix, Vector ]
/**
 * Multiply Scalar with Vector returns a Vector.
 *
 * @param {number} l scalar to multiply with
 * @param {Array<number>} x 2D vector.
 * @return {Array<number>}
 */
var scmult = function (l, x) {
    return [l * x[0], l * x[1]];
};
/**
 * Adding two vectors is another vector.
 *
 * @param {Array<number>} a 2D vector.
 * @param {Array<number>} b 2D vector.
 * @return {Array<number>} Sum vector.
 */
var vcadd = function (a, b) {
    return [a[0] + b[0], a[1] + b[1]];
};
/**
 * Subtracting two vectors is another vector.
 *
 * @param {Array<number>} a 2D vector.
 * @param {Array<number>} b 2D vector.
 * @return {Array<number>} Difference vector.
 */
var minus = function (a, b) {
    return [a[0] - b[0], a[1] - b[1]];
};
/**
 * Dot product of two vectors is scalar.
 *
 * @param {Array<number>} a 2D vector.
 * @param {Array<number>} b 2D vector.
 * @return {number} scalar inner product.
 */
var dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};
/**
 * Exterior Product of two vectors is a pseudoscalar.
 *
 * @param {Array<number>} a 2D vector.
 * @param {Array<number>} b 2D vector.
 * @return {number} psuedo-scalar exterior product.
 */
var wedge = function (a, b) {
    return a[0] * b[1] - a[1] * b[0];
};
/**
 * Apply Matrix on Vector returns a Vector.
 *
 * @param {Array<Array<number>>} A 2x2 Matrix
 * @param {Array<number>} x 2D vector.
 * @return {Array<number>} 2D vector linear product.
 */
var apply = function (A, x) {
    return vcadd(scmult(x[0], A[0]), scmult(x[1], A[1]));
};
/**
 * Multiply two matrices.
 *
 * @param {Array<Array<number>>} A 2x2 Matrix
 * @param {Array<Array<number>>} B 2x2 Matrix
 * @return {Array<Array<number>>} A 2x2 Matrix
 */
var mult = function (A, B) {
    return [apply(A, B[0]), apply(A, B[1])];
};
/**
 * Represents a transform operation, Ax + b
 *
 * @constructor
 *
 * @param {Array<Array<number>>} A 2x2 Matrix.
 * @param {Array<number>} b 2D scalar.
 */
function Transform(A, b) {
    this.A = A;
    this.b = b;
}
/**
 * Given CSS Transform representation of the class.
 * @return {string} CSS 2D Transform.
 */
Transform.prototype.css = function () {
    var A = this.A;
    var b = this.b;
    return 'matrix(' + A[0][0] + ',' + A[0][1] + ',' + A[1][0] + ',' + A[1][1] +
        ',' + b[0] + ',' + b[1] + ')';
};
/**
 * Multiply two transforms.
 * Defined as
 *  (T o U) (x) = T(U(x))
 *
 * Derivation:
 *  T(U(x))
 *   = T(U.A(x) + U.b)
 *   = T.A(U.A(x) + U.b)) + T.b
 *   = T.A(U.A(x)) + T.A(U.b) + T.b
 *
 * @param {Transform} T
 * @param {Transform} U
 * @return {Transform} T o U
 */
var cascade = function (T, U) {
    return new Transform(mult(T.A, U.A), vcadd(apply(T.A, U.b), T.b));
};
/**
 * Creates the default rotation matrix
 *
 * @param {number} c x-projection (r cos(theta))
 * @param {number} s y-projection (r sin(theta))
 * @return {Array<Array<number>>} Rotation matrix.
 */
var rotate = function (c, s) {
    return [[c, s], [-s, c]];
};
/**
 * Returns matrix that transforms vector a to vector b.
 *
 * @param {Array<number>} a 2D vector.
 * @param {Array<number>} b 2D vector.
 * @return {Array<Array<number>>} Rotation + Scale matrix
 */
var rotscale = function (a, b) {
    var alen = dot(a, a);
    var sig = dot(a, b);
    var del = wedge(a, b);
    return rotate(sig / alen, del / alen);
};
var justscale = function (a, b) {
    var alen = Math.sqrt(dot(a, a));
    var blen = Math.sqrt(dot(b, b));
    var scale = blen / alen;
    return rotate(scale, 0);
};
/**
 * Zoom is a similarity preserving transform from a pair of source
 * points to a new pair of destination points. If rotate it is false
 * then it won't be maintaining the transfer precisely, but will only
 * do scaling part of it.
 *
 * @param {Array<Array<number>>} s two source points.
 * @param {Array<Array<number>>} d two destination points.
 * @param {Boolean} rotate true - rotate; else scale.
 *
 * @return {Transform} that moves point 's' to point 'd'
 */
var zoom = function (s, d, rotate) {
    // Source vector.
    var a = minus(s[1], s[0]);
    // Destination vector.
    var b = minus(d[1], d[0]);
    // Rotation needed for source to dest vector.
    var rs = rotate ? rotscale(a, b) : justscale(a, b);
    // Position of s[0] if rotation is applied.
    var rs0 = apply(rs, s[0]);
    // Since d[0] = rs0 + t
    var t = minus(d[0], rs0);
    return new Transform(rs, t);
};
/**
 * Weighted average of two vectors.
 *
 * @param {Array<number>} u 2D vector.
 * @param {Array<number>} v 2D vector.
 * @param {number} progress (from 0 to 1)
 * @return {Array<number>} (1-p) u + (p) v
 */
var avgVector = function (u, v, progress) {
    var u1 = scmult(1 - progress, u);
    var v1 = scmult(progress, v);
    return vcadd(u1, v1);
};
/**
 * Weighted average of two vectors.
 *
 * @return {Array<Array<number>>} A 2D matrix.
 * @return {Array<Array<number>>} B 2D matrix.
 * @param {number} progress (from 0 to 1)
 * @return {Array<Array<number>>} (1-p) A + (p) B
 */
var avgMatrix = function (A, B, progress) {
    return [avgVector(A[0], B[0], progress), avgVector(A[1], B[1], progress)];
};
/**
 * Weighted average of two transforms.
 * @param {Transform} Z Source Transform
 * @param {Transform} I Destination Transform
 * @param {number} progress (from 0 to 1)
 * @return {Transform} (1-p) Z + (p) I
 */
Transform.avg = function (Z, I, progress) {
    return new Transform(avgMatrix(Z.A, I.A, progress), avgVector(Z.b, I.b, progress));
};
var identity = new Transform([[1, 0], [0, 1]], [0, 0]);
/**
 * Gives a default value for an input object.
 *
 * @param {Object} param input parameter, may be undefined
 * @param {Object} val returned if param is undefined.
 * @return {Object}
 */
var defaults = function (param, val) {
    return (param === undefined) ? val : param;
};
/**
 * Method to override json config objects with default
 * values. If undefined in cfg corresponding value from
 * cfg_def will be picked.
 *
 * @param {Object} cfg input parameter config.
 * @param {Object} cfg_def default fallbacks.
 * @return {Object} new config
 */
var defaultConfig = function (cfg, cfgDef) {
    var newCfg = defaults(cfg, {});
    for (var k in cfgDef) {
        newCfg[k] = defaults(newCfg[k], cfgDef[k]);
    }
    return newCfg;
};
/**
 * @constructor
 * @export
 * @param {Element} elem to attach zoom handler.
 * @param {Object} config to specify additiona features.
 */
function Zoom(elem, config, wnd) {
    this.mayBeDoubleTap = null;
    this.isAnimationRunning = false;
    // SingleFinger = 1, DoubleFinger = 2, NoTouch = 0
    this.curTouch = 0;
    this.elem = elem;
    // keep reference to parent in case elem is moved elsewhere in DOM
    this.elemParent = elem.parentNode;
    this.activeZoom = identity;
    this.resultantZoom = identity;
    this.srcCoords = [0, 0];
    this.destCoords = [0, 0];
    var me = this;
    this.config = defaultConfig(config, {
        "pan": false,
        "rotate": true
    });
    this.wnd = wnd || window;
    // trigger browser optimisations for the transition
    // see https://dev.opera.com/articles/css-will-change-property/
    elem.style['will-change'] = 'transform';
    elem.style['transform-origin'] = '0 0';
    var getCoordsDouble = function (t) {
        var oX = elem.offsetLeft;
        var oY = elem.offsetTop;
        return [
            [t[0].pageX - oX, t[0].pageY - oY],
            [t[1].pageX - oX, t[1].pageY - oY]
        ];
    };
    var getCoordsSingle = function (t) {
        var oX = elem.offsetLeft;
        var oY = elem.offsetTop;
        var x = t[0].pageX - oX;
        var y = t[0].pageY - oY;
        return [
            [x, y],
            [x + 1, y + 1]
        ];
    };
    var getCoords = function (t) {
        return t.length > 1 ? getCoordsDouble(t) : getCoordsSingle(t);
    };
    var setSrcAndDest = function (touches) {
        me.srcCoords = getCoords(touches);
        me.destCoords = me.srcCoords;
    };
    var setDest = function (touches) {
        me.destCoords = getCoords(touches);
    };
    var handleTouchEvent = function (cb) {
        return function (evt) {
            if (me.isAnimationRunning) {
                return false;
            }
            var touches = evt.touches;
            if (!touches) {
                return false;
            }
            cb(touches);
            evt.preventDefault();
        };
    };
    this._handleZoom = handleTouchEvent(function (touches) {
        var numOfFingers = touches.length;
        if (numOfFingers !== me.curTouch) {
            me.curTouch = numOfFingers;
            me.finalize();
            if (numOfFingers !== 0) {
                setSrcAndDest(touches);
            }
        }
        else {
            setDest(touches);
            me.previewZoom();
        }
    });
    this._handleTouchStart = handleTouchEvent(function (touches) {
        if (touches.length === 1) {
            if (me.mayBeDoubleTap !== null) {
                me.wnd.clearTimeout(me.mayBeDoubleTap);
                me.reset();
                me.mayBeDoubleTap = null;
            }
            else {
                me.mayBeDoubleTap = me.wnd.setTimeout(function () {
                    me.mayBeDoubleTap = null;
                }, 300);
            }
        }
    });
    this.elemParent.addEventListener('touchstart', this._handleTouchStart);
    this.elemParent.addEventListener('touchstart', this._handleZoom);
    this.elemParent.addEventListener('touchmove', this._handleZoom);
    this.elemParent.addEventListener('touchend', this._handleZoom);
}
Zoom.prototype.destroy = function () {
    this.elemParent.removeEventListener('touchstart', this._handleTouchStart);
    this.elemParent.removeEventListener('touchstart', this._handleZoom);
    this.elemParent.removeEventListener('touchmove', this._handleZoom);
    this.elemParent.removeEventListener('touchend', this._handleZoom);
    this.elem.style['will-change'] = null;
    this.elem.style['transform-origin'] = null;
    this.elem.style.transform = null;
};
Zoom.prototype.previewZoom = function () {
    var additionalZoom = zoom(this.srcCoords, this.destCoords, this.config.rotate);
    this.resultantZoom = cascade(additionalZoom, this.activeZoom);
    this.repaint();
};
Zoom.prototype.setZoom = function (newZoom) {
    this.resultantZoom = newZoom;
    this.repaint();
};
Zoom.prototype.finalize = function () {
    this.activeZoom = this.resultantZoom;
};
Zoom.prototype.repaint = function () {
    this.elem.style.transform = this.resultantZoom.css();
};
Zoom.prototype.reset = function () {
    if (this.wnd.requestAnimationFrame) {
        this.isAnimationRunning = true;
        var Z_1 = this.activeZoom;
        var startTime_1 = null;
        var me_1 = this;
        var step_1 = function (time) {
            if (!startTime_1) {
                startTime_1 = time;
            }
            var progress = (time - startTime_1) / 100;
            if (progress >= 1) {
                me_1.setZoom(identity);
                me_1.isAnimationRunning = false;
            }
            else {
                me_1.setZoom(Transform.avg(Z_1, identity, progress));
                me_1.wnd.requestAnimationFrame(step_1);
            }
        };
        this.wnd.requestAnimationFrame(step_1);
    }
    else {
        this.setZoom(identity);
    }
};
//# sourceMappingURL=cde.js.map